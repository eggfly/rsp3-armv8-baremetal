# 1 "../src/arch/qemu_virt/main_aarch64_instructions.cpp"
# 1 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\Debug-qemu_virt//"
# 1 "<built-in>"
#define __STDC__ 1
#define __cplusplus 201402L
#define __STDC_UTF_16__ 1
#define __STDC_UTF_32__ 1
#define __STDC_HOSTED__ 0
#define __GNUC__ 7
#define __GNUC_MINOR__ 2
#define __GNUC_PATCHLEVEL__ 1
#define __VERSION__ "7.2.1 20171011"
#define __LINARO_RELEASE__ 201711
#define __LINARO_SPIN__ 0
#define __ATOMIC_RELAXED 0
#define __ATOMIC_SEQ_CST 5
#define __ATOMIC_ACQUIRE 2
#define __ATOMIC_RELEASE 3
#define __ATOMIC_ACQ_REL 4
#define __ATOMIC_CONSUME 1
#define __OPTIMIZE__ 1
#define __FINITE_MATH_ONLY__ 0
#define _LP64 1
#define __LP64__ 1
#define __SIZEOF_INT__ 4
#define __SIZEOF_LONG__ 8
#define __SIZEOF_LONG_LONG__ 8
#define __SIZEOF_SHORT__ 2
#define __SIZEOF_FLOAT__ 4
#define __SIZEOF_DOUBLE__ 8
#define __SIZEOF_LONG_DOUBLE__ 16
#define __SIZEOF_SIZE_T__ 8
#define __CHAR_BIT__ 8
#define __BIGGEST_ALIGNMENT__ 16
#define __ORDER_LITTLE_ENDIAN__ 1234
#define __ORDER_BIG_ENDIAN__ 4321
#define __ORDER_PDP_ENDIAN__ 3412
#define __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __FLOAT_WORD_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __SIZEOF_POINTER__ 8
#define __GNUG__ 7
#define __SIZE_TYPE__ long unsigned int
#define __PTRDIFF_TYPE__ long int
#define __WCHAR_TYPE__ unsigned int
#define __WINT_TYPE__ unsigned int
#define __INTMAX_TYPE__ long int
#define __UINTMAX_TYPE__ long unsigned int
#define __CHAR16_TYPE__ short unsigned int
#define __CHAR32_TYPE__ unsigned int
#define __SIG_ATOMIC_TYPE__ int
#define __INT8_TYPE__ signed char
#define __INT16_TYPE__ short int
#define __INT32_TYPE__ int
#define __INT64_TYPE__ long int
#define __UINT8_TYPE__ unsigned char
#define __UINT16_TYPE__ short unsigned int
#define __UINT32_TYPE__ unsigned int
#define __UINT64_TYPE__ long unsigned int
#define __INT_LEAST8_TYPE__ signed char
#define __INT_LEAST16_TYPE__ short int
#define __INT_LEAST32_TYPE__ int
#define __INT_LEAST64_TYPE__ long int
#define __UINT_LEAST8_TYPE__ unsigned char
#define __UINT_LEAST16_TYPE__ short unsigned int
#define __UINT_LEAST32_TYPE__ unsigned int
#define __UINT_LEAST64_TYPE__ long unsigned int
#define __INT_FAST8_TYPE__ int
#define __INT_FAST16_TYPE__ int
#define __INT_FAST32_TYPE__ int
#define __INT_FAST64_TYPE__ long int
#define __UINT_FAST8_TYPE__ unsigned int
#define __UINT_FAST16_TYPE__ unsigned int
#define __UINT_FAST32_TYPE__ unsigned int
#define __UINT_FAST64_TYPE__ long unsigned int
#define __INTPTR_TYPE__ long int
#define __UINTPTR_TYPE__ long unsigned int
#define __has_include(STR) __has_include__(STR)
#define __has_include_next(STR) __has_include_next__(STR)
#define __GXX_WEAK__ 1
#define __DEPRECATED 1
#define __GXX_EXPERIMENTAL_CXX0X__ 1
#define __cpp_binary_literals 201304
#define __cpp_unicode_characters 200704
#define __cpp_raw_strings 200710
#define __cpp_unicode_literals 200710
#define __cpp_user_defined_literals 200809
#define __cpp_lambdas 200907
#define __cpp_range_based_for 200907
#define __cpp_static_assert 200410
#define __cpp_decltype 200707
#define __cpp_attributes 200809
#define __cpp_rvalue_reference 200610
#define __cpp_rvalue_references 200610
#define __cpp_variadic_templates 200704
#define __cpp_initializer_lists 200806
#define __cpp_delegating_constructors 200604
#define __cpp_nsdmi 200809
#define __cpp_inheriting_constructors 201511
#define __cpp_ref_qualifiers 200710
#define __cpp_alias_templates 200704
#define __cpp_return_type_deduction 201304
#define __cpp_init_captures 201304
#define __cpp_generic_lambdas 201304
#define __cpp_constexpr 201304
#define __cpp_decltype_auto 201304
#define __cpp_aggregate_nsdmi 201304
#define __cpp_variable_templates 201304
#define __cpp_digit_separators 201309
#define __cpp_sized_deallocation 201309
#define __cpp_threadsafe_static_init 200806
#define __GXX_ABI_VERSION 1011
#define __SCHAR_MAX__ 0x7f
#define __SHRT_MAX__ 0x7fff
#define __INT_MAX__ 0x7fffffff
#define __LONG_MAX__ 0x7fffffffffffffffL
#define __LONG_LONG_MAX__ 0x7fffffffffffffffLL
#define __WCHAR_MAX__ 0xffffffffU
#define __WCHAR_MIN__ 0U
#define __WINT_MAX__ 0xffffffffU
#define __WINT_MIN__ 0U
#define __PTRDIFF_MAX__ 0x7fffffffffffffffL
#define __SIZE_MAX__ 0xffffffffffffffffUL
#define __SCHAR_WIDTH__ 8
#define __SHRT_WIDTH__ 16
#define __INT_WIDTH__ 32
#define __LONG_WIDTH__ 64
#define __LONG_LONG_WIDTH__ 64
#define __WCHAR_WIDTH__ 32
#define __WINT_WIDTH__ 32
#define __PTRDIFF_WIDTH__ 64
#define __SIZE_WIDTH__ 64
#define __INTMAX_MAX__ 0x7fffffffffffffffL
#define __INTMAX_C(c) c ## L
#define __UINTMAX_MAX__ 0xffffffffffffffffUL
#define __UINTMAX_C(c) c ## UL
#define __INTMAX_WIDTH__ 64
#define __SIG_ATOMIC_MAX__ 0x7fffffff
#define __SIG_ATOMIC_MIN__ (-__SIG_ATOMIC_MAX__ - 1)
#define __SIG_ATOMIC_WIDTH__ 32
#define __INT8_MAX__ 0x7f
#define __INT16_MAX__ 0x7fff
#define __INT32_MAX__ 0x7fffffff
#define __INT64_MAX__ 0x7fffffffffffffffL
#define __UINT8_MAX__ 0xff
#define __UINT16_MAX__ 0xffff
#define __UINT32_MAX__ 0xffffffffU
#define __UINT64_MAX__ 0xffffffffffffffffUL
#define __INT_LEAST8_MAX__ 0x7f
#define __INT8_C(c) c
#define __INT_LEAST8_WIDTH__ 8
#define __INT_LEAST16_MAX__ 0x7fff
#define __INT16_C(c) c
#define __INT_LEAST16_WIDTH__ 16
#define __INT_LEAST32_MAX__ 0x7fffffff
#define __INT32_C(c) c
#define __INT_LEAST32_WIDTH__ 32
#define __INT_LEAST64_MAX__ 0x7fffffffffffffffL
#define __INT64_C(c) c ## L
#define __INT_LEAST64_WIDTH__ 64
#define __UINT_LEAST8_MAX__ 0xff
#define __UINT8_C(c) c
#define __UINT_LEAST16_MAX__ 0xffff
#define __UINT16_C(c) c
#define __UINT_LEAST32_MAX__ 0xffffffffU
#define __UINT32_C(c) c ## U
#define __UINT_LEAST64_MAX__ 0xffffffffffffffffUL
#define __UINT64_C(c) c ## UL
#define __INT_FAST8_MAX__ 0x7fffffff
#define __INT_FAST8_WIDTH__ 32
#define __INT_FAST16_MAX__ 0x7fffffff
#define __INT_FAST16_WIDTH__ 32
#define __INT_FAST32_MAX__ 0x7fffffff
#define __INT_FAST32_WIDTH__ 32
#define __INT_FAST64_MAX__ 0x7fffffffffffffffL
#define __INT_FAST64_WIDTH__ 64
#define __UINT_FAST8_MAX__ 0xffffffffU
#define __UINT_FAST16_MAX__ 0xffffffffU
#define __UINT_FAST32_MAX__ 0xffffffffU
#define __UINT_FAST64_MAX__ 0xffffffffffffffffUL
#define __INTPTR_MAX__ 0x7fffffffffffffffL
#define __INTPTR_WIDTH__ 64
#define __UINTPTR_MAX__ 0xffffffffffffffffUL
#define __GCC_IEC_559 2
#define __GCC_IEC_559_COMPLEX 2
#define __FLT_EVAL_METHOD__ 0
#define __FLT_EVAL_METHOD_TS_18661_3__ 0
#define __DEC_EVAL_METHOD__ 2
#define __FLT_RADIX__ 2
#define __FLT_MANT_DIG__ 24
#define __FLT_DIG__ 6
#define __FLT_MIN_EXP__ (-125)
#define __FLT_MIN_10_EXP__ (-37)
#define __FLT_MAX_EXP__ 128
#define __FLT_MAX_10_EXP__ 38
#define __FLT_DECIMAL_DIG__ 9
#define __FLT_MAX__ 3.40282346638528859811704183484516925e+38F
#define __FLT_MIN__ 1.17549435082228750796873653722224568e-38F
#define __FLT_EPSILON__ 1.19209289550781250000000000000000000e-7F
#define __FLT_DENORM_MIN__ 1.40129846432481707092372958328991613e-45F
#define __FLT_HAS_DENORM__ 1
#define __FLT_HAS_INFINITY__ 1
#define __FLT_HAS_QUIET_NAN__ 1
#define __FP_FAST_FMAF 1
#define __DBL_MANT_DIG__ 53
#define __DBL_DIG__ 15
#define __DBL_MIN_EXP__ (-1021)
#define __DBL_MIN_10_EXP__ (-307)
#define __DBL_MAX_EXP__ 1024
#define __DBL_MAX_10_EXP__ 308
#define __DBL_DECIMAL_DIG__ 17
#define __DBL_MAX__ double(1.79769313486231570814527423731704357e+308L)
#define __DBL_MIN__ double(2.22507385850720138309023271733240406e-308L)
#define __DBL_EPSILON__ double(2.22044604925031308084726333618164062e-16L)
#define __DBL_DENORM_MIN__ double(4.94065645841246544176568792868221372e-324L)
#define __DBL_HAS_DENORM__ 1
#define __DBL_HAS_INFINITY__ 1
#define __DBL_HAS_QUIET_NAN__ 1
#define __FP_FAST_FMA 1
#define __LDBL_MANT_DIG__ 113
#define __LDBL_DIG__ 33
#define __LDBL_MIN_EXP__ (-16381)
#define __LDBL_MIN_10_EXP__ (-4931)
#define __LDBL_MAX_EXP__ 16384
#define __LDBL_MAX_10_EXP__ 4932
#define __DECIMAL_DIG__ 36
#define __LDBL_DECIMAL_DIG__ 36
#define __LDBL_MAX__ 1.18973149535723176508575932662800702e+4932L
#define __LDBL_MIN__ 3.36210314311209350626267781732175260e-4932L
#define __LDBL_EPSILON__ 1.92592994438723585305597794258492732e-34L
#define __LDBL_DENORM_MIN__ 6.47517511943802511092443895822764655e-4966L
#define __LDBL_HAS_DENORM__ 1
#define __LDBL_HAS_INFINITY__ 1
#define __LDBL_HAS_QUIET_NAN__ 1
#define __FLT16_MANT_DIG__ 11
#define __FLT16_DIG__ 3
#define __FLT16_MIN_EXP__ (-13)
#define __FLT16_MIN_10_EXP__ (-4)
#define __FLT16_MAX_EXP__ 16
#define __FLT16_MAX_10_EXP__ 4
#define __FLT16_DECIMAL_DIG__ 5
#define __FLT16_MAX__ 6.55040000000000000000000000000000000e+4F16
#define __FLT16_MIN__ 6.10351562500000000000000000000000000e-5F16
#define __FLT16_EPSILON__ 9.76562500000000000000000000000000000e-4F16
#define __FLT16_DENORM_MIN__ 5.96046447753906250000000000000000000e-8F16
#define __FLT16_HAS_DENORM__ 1
#define __FLT16_HAS_INFINITY__ 1
#define __FLT16_HAS_QUIET_NAN__ 1
#define __FLT32_MANT_DIG__ 24
#define __FLT32_DIG__ 6
#define __FLT32_MIN_EXP__ (-125)
#define __FLT32_MIN_10_EXP__ (-37)
#define __FLT32_MAX_EXP__ 128
#define __FLT32_MAX_10_EXP__ 38
#define __FLT32_DECIMAL_DIG__ 9
#define __FLT32_MAX__ 3.40282346638528859811704183484516925e+38F32
#define __FLT32_MIN__ 1.17549435082228750796873653722224568e-38F32
#define __FLT32_EPSILON__ 1.19209289550781250000000000000000000e-7F32
#define __FLT32_DENORM_MIN__ 1.40129846432481707092372958328991613e-45F32
#define __FLT32_HAS_DENORM__ 1
#define __FLT32_HAS_INFINITY__ 1
#define __FLT32_HAS_QUIET_NAN__ 1
#define __FLT64_MANT_DIG__ 53
#define __FLT64_DIG__ 15
#define __FLT64_MIN_EXP__ (-1021)
#define __FLT64_MIN_10_EXP__ (-307)
#define __FLT64_MAX_EXP__ 1024
#define __FLT64_MAX_10_EXP__ 308
#define __FLT64_DECIMAL_DIG__ 17
#define __FLT64_MAX__ 1.79769313486231570814527423731704357e+308F64
#define __FLT64_MIN__ 2.22507385850720138309023271733240406e-308F64
#define __FLT64_EPSILON__ 2.22044604925031308084726333618164062e-16F64
#define __FLT64_DENORM_MIN__ 4.94065645841246544176568792868221372e-324F64
#define __FLT64_HAS_DENORM__ 1
#define __FLT64_HAS_INFINITY__ 1
#define __FLT64_HAS_QUIET_NAN__ 1
#define __FLT128_MANT_DIG__ 113
#define __FLT128_DIG__ 33
#define __FLT128_MIN_EXP__ (-16381)
#define __FLT128_MIN_10_EXP__ (-4931)
#define __FLT128_MAX_EXP__ 16384
#define __FLT128_MAX_10_EXP__ 4932
#define __FLT128_DECIMAL_DIG__ 36
#define __FLT128_MAX__ 1.18973149535723176508575932662800702e+4932F128
#define __FLT128_MIN__ 3.36210314311209350626267781732175260e-4932F128
#define __FLT128_EPSILON__ 1.92592994438723585305597794258492732e-34F128
#define __FLT128_DENORM_MIN__ 6.47517511943802511092443895822764655e-4966F128
#define __FLT128_HAS_DENORM__ 1
#define __FLT128_HAS_INFINITY__ 1
#define __FLT128_HAS_QUIET_NAN__ 1
#define __FLT32X_MANT_DIG__ 53
#define __FLT32X_DIG__ 15
#define __FLT32X_MIN_EXP__ (-1021)
#define __FLT32X_MIN_10_EXP__ (-307)
#define __FLT32X_MAX_EXP__ 1024
#define __FLT32X_MAX_10_EXP__ 308
#define __FLT32X_DECIMAL_DIG__ 17
#define __FLT32X_MAX__ 1.79769313486231570814527423731704357e+308F32x
#define __FLT32X_MIN__ 2.22507385850720138309023271733240406e-308F32x
#define __FLT32X_EPSILON__ 2.22044604925031308084726333618164062e-16F32x
#define __FLT32X_DENORM_MIN__ 4.94065645841246544176568792868221372e-324F32x
#define __FLT32X_HAS_DENORM__ 1
#define __FLT32X_HAS_INFINITY__ 1
#define __FLT32X_HAS_QUIET_NAN__ 1
#define __FLT64X_MANT_DIG__ 113
#define __FLT64X_DIG__ 33
#define __FLT64X_MIN_EXP__ (-16381)
#define __FLT64X_MIN_10_EXP__ (-4931)
#define __FLT64X_MAX_EXP__ 16384
#define __FLT64X_MAX_10_EXP__ 4932
#define __FLT64X_DECIMAL_DIG__ 36
#define __FLT64X_MAX__ 1.18973149535723176508575932662800702e+4932F64x
#define __FLT64X_MIN__ 3.36210314311209350626267781732175260e-4932F64x
#define __FLT64X_EPSILON__ 1.92592994438723585305597794258492732e-34F64x
#define __FLT64X_DENORM_MIN__ 6.47517511943802511092443895822764655e-4966F64x
#define __FLT64X_HAS_DENORM__ 1
#define __FLT64X_HAS_INFINITY__ 1
#define __FLT64X_HAS_QUIET_NAN__ 1
#define __DEC32_MANT_DIG__ 7
#define __DEC32_MIN_EXP__ (-94)
#define __DEC32_MAX_EXP__ 97
#define __DEC32_MIN__ 1E-95DF
#define __DEC32_MAX__ 9.999999E96DF
#define __DEC32_EPSILON__ 1E-6DF
#define __DEC32_SUBNORMAL_MIN__ 0.000001E-95DF
#define __DEC64_MANT_DIG__ 16
#define __DEC64_MIN_EXP__ (-382)
#define __DEC64_MAX_EXP__ 385
#define __DEC64_MIN__ 1E-383DD
#define __DEC64_MAX__ 9.999999999999999E384DD
#define __DEC64_EPSILON__ 1E-15DD
#define __DEC64_SUBNORMAL_MIN__ 0.000000000000001E-383DD
#define __DEC128_MANT_DIG__ 34
#define __DEC128_MIN_EXP__ (-6142)
#define __DEC128_MAX_EXP__ 6145
#define __DEC128_MIN__ 1E-6143DL
#define __DEC128_MAX__ 9.999999999999999999999999999999999E6144DL
#define __DEC128_EPSILON__ 1E-33DL
#define __DEC128_SUBNORMAL_MIN__ 0.000000000000000000000000000000001E-6143DL
#define __REGISTER_PREFIX__ 
#define __USER_LABEL_PREFIX__ 
#define __GNUC_STDC_INLINE__ 1
#define __STRICT_ANSI__ 1
#define __WCHAR_UNSIGNED__ 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 1
#define __GCC_ATOMIC_BOOL_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR16_T_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR32_T_LOCK_FREE 2
#define __GCC_ATOMIC_WCHAR_T_LOCK_FREE 2
#define __GCC_ATOMIC_SHORT_LOCK_FREE 2
#define __GCC_ATOMIC_INT_LOCK_FREE 2
#define __GCC_ATOMIC_LONG_LOCK_FREE 2
#define __GCC_ATOMIC_LLONG_LOCK_FREE 2
#define __GCC_ATOMIC_TEST_AND_SET_TRUEVAL 1
#define __GCC_ATOMIC_POINTER_LOCK_FREE 2
#define __GCC_HAVE_DWARF2_CFI_ASM 1
#define __PRAGMA_REDEFINE_EXTNAME 1
#define __SIZEOF_INT128__ 16
#define __SIZEOF_WCHAR_T__ 4
#define __SIZEOF_WINT_T__ 4
#define __SIZEOF_PTRDIFF_T__ 8
#define __aarch64__ 1
#define __ARM_64BIT_STATE 1
#define __ARM_ARCH_ISA_A64 1
#define __ARM_ALIGN_MAX_PWR 28
#define __ARM_ALIGN_MAX_STACK_PWR 16
#define __ARM_ARCH_8A 1
#define __ARM_ARCH_PROFILE 65
#define __ARM_FEATURE_CLZ 1
#define __ARM_FEATURE_IDIV 1
#define __ARM_FEATURE_UNALIGNED 1
#define __ARM_PCS_AAPCS64 1
#define __ARM_SIZEOF_WCHAR_T 4
#undef __ARM_FP_FAST
# 1 "<built-in>"
#define __ARM_ARCH 8
#define __ARM_SIZEOF_MINIMAL_ENUM 4
#undef __AARCH64EB__
# 1 "<built-in>"
#undef __ARM_BIG_ENDIAN
# 1 "<built-in>"
#define __AARCH64EL__ 1
#define __ARM_FEATURE_FMA 1
#define __ARM_FP 14
#define __ARM_FP16_FORMAT_IEEE 1
#define __ARM_FP16_ARGS 1
#undef __ARM_FEATURE_FP16_SCALAR_ARITHMETIC
# 1 "<built-in>"
#undef __ARM_FEATURE_FP16_VECTOR_ARITHMETIC
# 1 "<built-in>"
#define __ARM_FEATURE_NUMERIC_MAXMIN 1
#define __ARM_NEON 1
#undef __ARM_FEATURE_CRC32
# 1 "<built-in>"
#undef __AARCH64_CMODEL_TINY__
# 1 "<built-in>"
#undef __AARCH64_CMODEL_SMALL__
# 1 "<built-in>"
#undef __AARCH64_CMODEL_LARGE__
# 1 "<built-in>"
#define __AARCH64_CMODEL_SMALL__ 1
#undef _ILP32
# 1 "<built-in>"
#undef __ILP32__
# 1 "<built-in>"
#undef __ARM_FEATURE_CRYPTO
# 1 "<built-in>"
#undef __ARM_FEATURE_QRDMX
# 1 "<built-in>"
#undef __FLT_EVAL_METHOD__
# 1 "<built-in>"
#define __FLT_EVAL_METHOD__ 0
#undef __FLT_EVAL_METHOD_C99__
# 1 "<built-in>"
#define __FLT_EVAL_METHOD_C99__ 0
#define __ELF__ 1
# 1 "<command-line>"
#define ARCH_IS_host 1
# 1 "./cxx_macros.h" 1


#define CXX_MACROS_H__ 

#define KERNEL_ADDRESS 0
#define UART_BASE 0x09000000
#define CONFIG_RAM_START 0x40000000
#define CONFIG_RAM_SIZE 0x40000000
#define ARCH_IS_qemu_virt 
#define PERIPHBASE 0x08000000
# 1 "<command-line>" 2
# 1 "../src/arch/qemu_virt/main_aarch64_instructions.cpp"

# 1 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\include/def.h" 1


#define DEF_H__ 




# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstddef" 1 3
# 40 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstddef" 3
#define _GLIBCXX_CSTDDEF 1

       
# 43 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstddef" 3

#undef __need_wchar_t
#undef __need_ptrdiff_t
#undef __need_size_t
#undef __need_NULL
#undef __need_wint_t
# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 1 3
# 31 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_CXX_CONFIG_H 1


#define _GLIBCXX_RELEASE 7


#define __GLIBCXX__ 20171011
# 46 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_PURE __attribute__ ((__pure__))



#define _GLIBCXX_CONST __attribute__ ((__const__))



#define _GLIBCXX_NORETURN __attribute__ ((__noreturn__))
# 67 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY 1


#define _GLIBCXX_VISIBILITY(V) __attribute__ ((__visibility__ (#V)))
# 81 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_USE_DEPRECATED 1



#define _GLIBCXX_DEPRECATED __attribute__ ((__deprecated__))






#define _GLIBCXX_ABI_TAG_CXX11 __attribute ((__abi_tag__ ("cxx11")))
# 101 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_CONSTEXPR constexpr
#define _GLIBCXX_USE_CONSTEXPR constexpr
# 111 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX14_CONSTEXPR constexpr
# 121 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX17_CONSTEXPR 







#define _GLIBCXX17_INLINE 






#define _GLIBCXX_NOEXCEPT noexcept
#define _GLIBCXX_NOEXCEPT_IF(_COND) noexcept(_COND)
#define _GLIBCXX_USE_NOEXCEPT noexcept
#define _GLIBCXX_THROW(_EXC) 
# 149 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_NOTHROW _GLIBCXX_USE_NOEXCEPT






#define _GLIBCXX_THROW_OR_ABORT(_EXC) (__builtin_abort())







#define _GLIBCXX_NOEXCEPT_PARM 
#define _GLIBCXX_NOEXCEPT_QUAL 
# 178 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_EXTERN_TEMPLATE 1
# 229 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3

# 229 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}

#define _GLIBCXX_USE_DUAL_ABI 1







#define _GLIBCXX_USE_CXX11_ABI 1



namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
#define _GLIBCXX_NAMESPACE_CXX11 __cxx11::
#define _GLIBCXX_BEGIN_NAMESPACE_CXX11 namespace __cxx11 {
#define _GLIBCXX_END_NAMESPACE_CXX11 }
#define _GLIBCXX_DEFAULT_ABI_TAG _GLIBCXX_ABI_TAG_CXX11
# 272 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_INLINE_VERSION 0
# 330 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_BEGIN_NAMESPACE_VERSION 
#define _GLIBCXX_END_NAMESPACE_VERSION 
# 403 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_STD_C std
#define _GLIBCXX_BEGIN_NAMESPACE_CONTAINER _GLIBCXX_BEGIN_NAMESPACE_VERSION
#define _GLIBCXX_END_NAMESPACE_CONTAINER _GLIBCXX_END_NAMESPACE_VERSION
# 415 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_STD_A std
#define _GLIBCXX_BEGIN_NAMESPACE_ALGO _GLIBCXX_BEGIN_NAMESPACE_VERSION
#define _GLIBCXX_END_NAMESPACE_ALGO _GLIBCXX_END_NAMESPACE_VERSION




#undef _GLIBCXX_LONG_DOUBLE_COMPAT
# 434 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_NAMESPACE_LDBL 
#define _GLIBCXX_BEGIN_NAMESPACE_LDBL 
#define _GLIBCXX_END_NAMESPACE_LDBL 


#define _GLIBCXX_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_NAMESPACE_CXX11
#define _GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_BEGIN_NAMESPACE_CXX11
#define _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_END_NAMESPACE_CXX11
# 487 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define __glibcxx_assert(_Condition) 
# 512 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(A) 


#define _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(A) 



#define _GLIBCXX_BEGIN_EXTERN_C extern "C" {
#define _GLIBCXX_END_EXTERN_C }

#define _GLIBCXX_USE_ALLOCATOR_NEW 1
# 533 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\os_defines.h" 1 3
# 31 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\os_defines.h" 3
#define _GLIBCXX_OS_DEFINES 1
# 534 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 2 3


# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\cpu_defines.h" 1 3
# 31 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\cpu_defines.h" 3
#define _GLIBCXX_CPU_DEFINES 1
# 537 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 2 3




#define _GLIBCXX_PSEUDO_VISIBILITY(V) 






#define _GLIBCXX_WEAK_DEFINITION 







#define _GLIBCXX_USE_WEAK_REF __GXX_WEAK__
# 569 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_TXN_SAFE 
#define _GLIBCXX_TXN_SAFE_DYN 
# 588 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_FAST_MATH 0






#define __N(msgid) (msgid)


#undef min
#undef max





#define _GLIBCXX_USE_C99_MATH _GLIBCXX11_USE_C99_MATH


#define _GLIBCXX_USE_C99_COMPLEX _GLIBCXX11_USE_C99_COMPLEX


#define _GLIBCXX_USE_C99_STDIO _GLIBCXX11_USE_C99_STDIO


#define _GLIBCXX_USE_C99_STDLIB _GLIBCXX11_USE_C99_STDLIB


#define _GLIBCXX_USE_C99_WCHAR _GLIBCXX11_USE_C99_WCHAR
# 642 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_ACOSF 1
# 651 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_ASINF 1





#define _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE 1


#define _GLIBCXX_HAVE_ATAN2F 1





#define _GLIBCXX_HAVE_ATANF 1
# 678 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_CEILF 1





#define _GLIBCXX_HAVE_COMPLEX_H 1


#define _GLIBCXX_HAVE_COSF 1


#define _GLIBCXX_HAVE_COSHF 1
# 705 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_EBADMSG 1


#define _GLIBCXX_HAVE_ECANCELED 1


#define _GLIBCXX_HAVE_ECHILD 1


#define _GLIBCXX_HAVE_EIDRM 1





#define _GLIBCXX_HAVE_ENODATA 1


#define _GLIBCXX_HAVE_ENOLINK 1


#define _GLIBCXX_HAVE_ENOSPC 1


#define _GLIBCXX_HAVE_ENOSR 1


#define _GLIBCXX_HAVE_ENOSTR 1


#define _GLIBCXX_HAVE_ENOTRECOVERABLE 1


#define _GLIBCXX_HAVE_ENOTSUP 1


#define _GLIBCXX_HAVE_EOVERFLOW 1


#define _GLIBCXX_HAVE_EOWNERDEAD 1


#define _GLIBCXX_HAVE_EPERM 1


#define _GLIBCXX_HAVE_EPROTO 1


#define _GLIBCXX_HAVE_ETIME 1


#define _GLIBCXX_HAVE_ETIMEDOUT 1


#define _GLIBCXX_HAVE_ETXTBSY 1


#define _GLIBCXX_HAVE_EWOULDBLOCK 1
# 771 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_EXPF 1





#define _GLIBCXX_HAVE_FABSF 1





#define _GLIBCXX_HAVE_FCNTL_H 1
# 798 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_FLOAT_H 1


#define _GLIBCXX_HAVE_FLOORF 1





#define _GLIBCXX_HAVE_FMODF 1
# 819 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_FREXPF 1





#define _GLIBCXX_HAVE_GETIPINFO 1


#define _GLIBCXX_HAVE_GETS 1


#define _GLIBCXX_HAVE_HYPOT 1
# 840 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_ICONV 1


#define _GLIBCXX_HAVE_IEEEFP_H 1


#define _GLIBCXX_HAVE_INT64_T 1


#define _GLIBCXX_HAVE_INT64_T_LONG 1





#define _GLIBCXX_HAVE_INTTYPES_H 1
# 876 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_ISWBLANK 1


#define _GLIBCXX_HAVE_LC_MESSAGES 1


#define _GLIBCXX_HAVE_LDEXPF 1
# 891 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_LIMIT_AS 0


#define _GLIBCXX_HAVE_LIMIT_DATA 0


#define _GLIBCXX_HAVE_LIMIT_FSIZE 0


#define _GLIBCXX_HAVE_LIMIT_RSS 0


#define _GLIBCXX_HAVE_LIMIT_VMEM 0





#define _GLIBCXX_HAVE_LOCALE_H 1


#define _GLIBCXX_HAVE_LOG10F 1





#define _GLIBCXX_HAVE_LOGF 1





#define _GLIBCXX_HAVE_MACHINE_ENDIAN_H 1


#define _GLIBCXX_HAVE_MACHINE_PARAM_H 1


#define _GLIBCXX_HAVE_MBSTATE_T 1


#define _GLIBCXX_HAVE_MEMALIGN 1


#define _GLIBCXX_HAVE_MEMORY_H 1





#define _GLIBCXX_HAVE_MODFF 1
# 963 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_POWF 1
# 987 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_SINF 1


#define _GLIBCXX_HAVE_SINHF 1
# 999 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_SLEEP 1


#define _GLIBCXX_HAVE_SQRTF 1





#define _GLIBCXX_HAVE_STDALIGN_H 1


#define _GLIBCXX_HAVE_STDBOOL_H 1


#define _GLIBCXX_HAVE_STDINT_H 1


#define _GLIBCXX_HAVE_STDLIB_H 1





#define _GLIBCXX_HAVE_STRERROR_R 1


#define _GLIBCXX_HAVE_STRINGS_H 1


#define _GLIBCXX_HAVE_STRING_H 1


#define _GLIBCXX_HAVE_STRTOF 1
# 1063 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_SYS_PARAM_H 1


#define _GLIBCXX_HAVE_SYS_RESOURCE_H 1
# 1078 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_SYS_STAT_H 1





#define _GLIBCXX_HAVE_SYS_TIME_H 1


#define _GLIBCXX_HAVE_SYS_TYPES_H 1
# 1096 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_S_ISREG 1


#define _GLIBCXX_HAVE_TANF 1


#define _GLIBCXX_HAVE_TANHF 1
# 1111 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_TGMATH_H 1
# 1120 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_UNISTD_H 1


#define _GLIBCXX_HAVE_USLEEP 1


#define _GLIBCXX_HAVE_UTIME_H 1


#define _GLIBCXX_HAVE_VFWSCANF 1


#define _GLIBCXX_HAVE_VSWSCANF 1


#define _GLIBCXX_HAVE_VWSCANF 1


#define _GLIBCXX_HAVE_WCHAR_H 1


#define _GLIBCXX_HAVE_WCSTOF 1


#define _GLIBCXX_HAVE_WCTYPE_H 1
# 1352 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define LT_OBJDIR ".libs/"





#define _GLIBCXX_PACKAGE_BUGREPORT ""


#define _GLIBCXX_PACKAGE_NAME "package-unused"


#define _GLIBCXX_PACKAGE_STRING "package-unused version-unused"


#define _GLIBCXX_PACKAGE_TARNAME "libstdc++"


#define _GLIBCXX_PACKAGE_URL ""


#define _GLIBCXX_PACKAGE__GLIBCXX_VERSION "version-unused"
# 1391 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define STDC_HEADERS 1
# 1403 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX11_USE_C99_MATH 1



#define _GLIBCXX11_USE_C99_STDIO 1



#define _GLIBCXX11_USE_C99_STDLIB 1



#define _GLIBCXX11_USE_C99_WCHAR 1
# 1424 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX98_USE_C99_MATH 1



#define _GLIBCXX98_USE_C99_STDIO 1



#define _GLIBCXX98_USE_C99_STDLIB 1



#define _GLIBCXX98_USE_C99_WCHAR 1


#define _GLIBCXX_ATOMIC_BUILTINS 1






#define _GLIBCXX_FULLY_DYNAMIC_STRING 0





#define _GLIBCXX_HOSTED 1




#define _GLIBCXX_MANGLE_SIZE_T m
# 1472 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_STDIO_EOF -1


#define _GLIBCXX_STDIO_SEEK_CUR 1


#define _GLIBCXX_STDIO_SEEK_END 2
# 1510 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_USE_C99_CTYPE_TR1 1







#define _GLIBCXX_USE_C99_INTTYPES_TR1 1



#define _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1 1







#define _GLIBCXX_USE_C99_STDINT_TR1 1
# 1547 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_USE_FCHMOD 1


#define _GLIBCXX_USE_FCHMODAT 1





#define _GLIBCXX_USE_GETTIMEOFDAY 1





#define _GLIBCXX_USE_INT128 1





#define _GLIBCXX_USE_LONG_LONG 1
# 1593 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_USE_SC_NPROCESSORS_ONLN 1
# 1608 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_USE_TMPNAM 1






#define _GLIBCXX_USE_WCHAR_T 1


#define _GLIBCXX_VERBOSE 1





#define _GTHREAD_USE_MUTEX_TIMEDLOCK 1
# 50 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstddef" 2 3
# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 1 3 4
# 39 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#define _STDDEF_H 
#define _STDDEF_H_ 

#define _ANSI_STDDEF_H 
# 137 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#define _PTRDIFF_T 
#define _T_PTRDIFF_ 
#define _T_PTRDIFF 
#define __PTRDIFF_T 
#define _PTRDIFF_T_ 
#define _BSD_PTRDIFF_T_ 
#define ___int_ptrdiff_t_h 
#define _GCC_PTRDIFF_T 
#define _PTRDIFF_T_DECLARED 



typedef long int ptrdiff_t;
# 161 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#undef __need_ptrdiff_t
# 187 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#define __size_t__ 
#define __SIZE_T__ 
#define _SIZE_T 
#define _SYS_SIZE_T_H 
#define _T_SIZE_ 
#define _T_SIZE 
#define __SIZE_T 
#define _SIZE_T_ 
#define _BSD_SIZE_T_ 
#define _SIZE_T_DEFINED_ 
#define _SIZE_T_DEFINED 
#define _BSD_SIZE_T_DEFINED_ 
#define _SIZE_T_DECLARED 
#define ___int_size_t_h 
#define _GCC_SIZE_T 
#define _SIZET_ 







#define __size_t 





typedef long unsigned int size_t;
# 238 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#undef __need_size_t
# 267 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#define __wchar_t__ 
#define __WCHAR_T__ 
#define _WCHAR_T 
#define _T_WCHAR_ 
#define _T_WCHAR 
#define __WCHAR_T 
#define _WCHAR_T_ 
#define _BSD_WCHAR_T_ 
#define _WCHAR_T_DEFINED_ 
#define _WCHAR_T_DEFINED 
#define _WCHAR_T_H 
#define ___int_wchar_t_h 
#define __INT_WCHAR_T_H 
#define _GCC_WCHAR_T 
#define _WCHAR_T_DECLARED 
# 294 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#undef _BSD_WCHAR_T_
# 347 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#undef __need_wchar_t
# 401 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#undef NULL

#define NULL __null
# 412 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)




#define _GCC_MAX_ALIGN_T 



typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
# 437 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
} max_align_t;





#define _GXX_NULLPTR_T 
  typedef decltype(nullptr) nullptr_t;
# 51 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstddef" 2 3


namespace std
{

  using ::max_align_t;
}
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\include/def.h" 2
# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstdint" 1 3
# 30 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstdint" 3
#define _GLIBCXX_CSTDINT 1

       
# 33 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstdint" 3
# 41 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstdint" 3
# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stdint.h" 1 3 4
# 11 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stdint.h" 3 4
# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stdint-gcc.h" 1 3 4
# 29 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stdint-gcc.h" 3 4
#define _GCC_STDINT_H 




typedef signed char int8_t;


typedef short int int16_t;


typedef int int32_t;


typedef long int int64_t;


typedef unsigned char uint8_t;


typedef short unsigned int uint16_t;


typedef unsigned int uint32_t;


typedef long unsigned int uint64_t;




typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;
typedef long int int_least64_t;
typedef unsigned char uint_least8_t;
typedef short unsigned int uint_least16_t;
typedef unsigned int uint_least32_t;
typedef long unsigned int uint_least64_t;



typedef int int_fast8_t;
typedef int int_fast16_t;
typedef int int_fast32_t;
typedef long int int_fast64_t;
typedef unsigned int uint_fast8_t;
typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
typedef long unsigned int uint_fast64_t;




typedef long int intptr_t;


typedef long unsigned int uintptr_t;




typedef long int intmax_t;
typedef long unsigned int uintmax_t;







#undef INT8_MAX
#define INT8_MAX __INT8_MAX__
#undef INT8_MIN
#define INT8_MIN (-INT8_MAX - 1)


#undef UINT8_MAX
#define UINT8_MAX __UINT8_MAX__


#undef INT16_MAX
#define INT16_MAX __INT16_MAX__
#undef INT16_MIN
#define INT16_MIN (-INT16_MAX - 1)


#undef UINT16_MAX
#define UINT16_MAX __UINT16_MAX__


#undef INT32_MAX
#define INT32_MAX __INT32_MAX__
#undef INT32_MIN
#define INT32_MIN (-INT32_MAX - 1)


#undef UINT32_MAX
#define UINT32_MAX __UINT32_MAX__


#undef INT64_MAX
#define INT64_MAX __INT64_MAX__
#undef INT64_MIN
#define INT64_MIN (-INT64_MAX - 1)


#undef UINT64_MAX
#define UINT64_MAX __UINT64_MAX__


#undef INT_LEAST8_MAX
#define INT_LEAST8_MAX __INT_LEAST8_MAX__
#undef INT_LEAST8_MIN
#define INT_LEAST8_MIN (-INT_LEAST8_MAX - 1)
#undef UINT_LEAST8_MAX
#define UINT_LEAST8_MAX __UINT_LEAST8_MAX__
#undef INT_LEAST16_MAX
#define INT_LEAST16_MAX __INT_LEAST16_MAX__
#undef INT_LEAST16_MIN
#define INT_LEAST16_MIN (-INT_LEAST16_MAX - 1)
#undef UINT_LEAST16_MAX
#define UINT_LEAST16_MAX __UINT_LEAST16_MAX__
#undef INT_LEAST32_MAX
#define INT_LEAST32_MAX __INT_LEAST32_MAX__
#undef INT_LEAST32_MIN
#define INT_LEAST32_MIN (-INT_LEAST32_MAX - 1)
#undef UINT_LEAST32_MAX
#define UINT_LEAST32_MAX __UINT_LEAST32_MAX__
#undef INT_LEAST64_MAX
#define INT_LEAST64_MAX __INT_LEAST64_MAX__
#undef INT_LEAST64_MIN
#define INT_LEAST64_MIN (-INT_LEAST64_MAX - 1)
#undef UINT_LEAST64_MAX
#define UINT_LEAST64_MAX __UINT_LEAST64_MAX__

#undef INT_FAST8_MAX
#define INT_FAST8_MAX __INT_FAST8_MAX__
#undef INT_FAST8_MIN
#define INT_FAST8_MIN (-INT_FAST8_MAX - 1)
#undef UINT_FAST8_MAX
#define UINT_FAST8_MAX __UINT_FAST8_MAX__
#undef INT_FAST16_MAX
#define INT_FAST16_MAX __INT_FAST16_MAX__
#undef INT_FAST16_MIN
#define INT_FAST16_MIN (-INT_FAST16_MAX - 1)
#undef UINT_FAST16_MAX
#define UINT_FAST16_MAX __UINT_FAST16_MAX__
#undef INT_FAST32_MAX
#define INT_FAST32_MAX __INT_FAST32_MAX__
#undef INT_FAST32_MIN
#define INT_FAST32_MIN (-INT_FAST32_MAX - 1)
#undef UINT_FAST32_MAX
#define UINT_FAST32_MAX __UINT_FAST32_MAX__
#undef INT_FAST64_MAX
#define INT_FAST64_MAX __INT_FAST64_MAX__
#undef INT_FAST64_MIN
#define INT_FAST64_MIN (-INT_FAST64_MAX - 1)
#undef UINT_FAST64_MAX
#define UINT_FAST64_MAX __UINT_FAST64_MAX__


#undef INTPTR_MAX
#define INTPTR_MAX __INTPTR_MAX__
#undef INTPTR_MIN
#define INTPTR_MIN (-INTPTR_MAX - 1)


#undef UINTPTR_MAX
#define UINTPTR_MAX __UINTPTR_MAX__


#undef INTMAX_MAX
#define INTMAX_MAX __INTMAX_MAX__
#undef INTMAX_MIN
#define INTMAX_MIN (-INTMAX_MAX - 1)
#undef UINTMAX_MAX
#define UINTMAX_MAX __UINTMAX_MAX__



#undef PTRDIFF_MAX
#define PTRDIFF_MAX __PTRDIFF_MAX__
#undef PTRDIFF_MIN
#define PTRDIFF_MIN (-PTRDIFF_MAX - 1)

#undef SIG_ATOMIC_MAX
#define SIG_ATOMIC_MAX __SIG_ATOMIC_MAX__
#undef SIG_ATOMIC_MIN
#define SIG_ATOMIC_MIN __SIG_ATOMIC_MIN__

#undef SIZE_MAX
#define SIZE_MAX __SIZE_MAX__

#undef WCHAR_MAX
#define WCHAR_MAX __WCHAR_MAX__
#undef WCHAR_MIN
#define WCHAR_MIN __WCHAR_MIN__

#undef WINT_MAX
#define WINT_MAX __WINT_MAX__
#undef WINT_MIN
#define WINT_MIN __WINT_MIN__







#undef INT8_C
#define INT8_C(c) __INT8_C(c)
#undef INT16_C
#define INT16_C(c) __INT16_C(c)
#undef INT32_C
#define INT32_C(c) __INT32_C(c)
#undef INT64_C
#define INT64_C(c) __INT64_C(c)
#undef UINT8_C
#define UINT8_C(c) __UINT8_C(c)
#undef UINT16_C
#define UINT16_C(c) __UINT16_C(c)
#undef UINT32_C
#define UINT32_C(c) __UINT32_C(c)
#undef UINT64_C
#define UINT64_C(c) __UINT64_C(c)
#undef INTMAX_C
#define INTMAX_C(c) __INTMAX_C(c)
#undef UINTMAX_C
#define UINTMAX_C(c) __UINTMAX_C(c)
# 12 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stdint.h" 2 3 4

#define _GCC_WRAP_STDINT_H 
# 42 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstdint" 2 3




namespace std
{
  using ::int8_t;
  using ::int16_t;
  using ::int32_t;
  using ::int64_t;

  using ::int_fast8_t;
  using ::int_fast16_t;
  using ::int_fast32_t;
  using ::int_fast64_t;

  using ::int_least8_t;
  using ::int_least16_t;
  using ::int_least32_t;
  using ::int_least64_t;

  using ::intmax_t;
  using ::intptr_t;

  using ::uint8_t;
  using ::uint16_t;
  using ::uint32_t;
  using ::uint64_t;

  using ::uint_fast8_t;
  using ::uint_fast16_t;
  using ::uint_fast32_t;
  using ::uint_fast64_t;

  using ::uint_least8_t;
  using ::uint_least16_t;
  using ::uint_least32_t;
  using ::uint_least64_t;

  using ::uintmax_t;
  using ::uintptr_t;
}
# 10 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\include/def.h" 2

#define AS_MACRO __attribute__((always_inline)) inline
#define arrsizeof(arr) (sizeof(arr)/sizeof(arr[0]))
#define NULL_CHAR '\0'
# 22 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\include/def.h"
#define INFO "[INFO] "
#define WARNING "[WARNING] "
#define FATAL "[FATAL] "




# 28 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\include/def.h"
extern const char EMPTY_STR[1];


constexpr size_t koutBufSize = 65;
extern char koutBuf[koutBufSize];

constexpr int UNIT_K=1024;
constexpr int KiB = UNIT_K;
constexpr int MiB = UNIT_K * KiB;
constexpr int GiB = UNIT_K * MiB;


#define RUN_TEST(testCallable) if(!(testCallable())) { kout << FATAL << #testCallable << " failed.\n";}

#define TIE2(t1,v1,t2,v2) t1 v1;t2 v2;std::tie((v1),(v2))


#define __stringify_1(x) #x
#define __stringify(x) __stringify_1(x)
# 3 "../src/arch/qemu_virt/main_aarch64_instructions.cpp" 2
# 1 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\include/printk.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\include/printk.h"
#define INCLUDE_PRINTK_H_ 




size_t printk(char ch);


size_t printk(const char *s);
size_t printk(const char *s,size_t n);

class Output{
public:
 size_t print(const char *s,size_t len);
 size_t print(const char *s);
 Output & operator<<(char ch);

 Output & operator<<(uint8_t u);
 Output & operator<<(uint16_t u);
 Output & operator<<(uint32_t u);
 Output & operator<<(short i);
 Output & operator<<(int i);
 Output & operator<<(double d);
 Output & operator<<(const char *s);
 Output & operator<<(size_t i);
 Output & operator<<(void *p);
};



extern Output kout;



# 1 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\include/templates_implementation/printk.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\include/templates_implementation/printk.h"
#define INCLUDE_TEMPLATES_IMPLEMENTATION_PRINTK_H_ 

# 1 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\include/printk.h" 1
# 12 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\include/templates_implementation/printk.h" 2
# 44 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\include/printk.h" 2
# 4 "../src/arch/qemu_virt/main_aarch64_instructions.cpp" 2
# 1 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\include/IntegerFormatter.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\include/IntegerFormatter.h"
#define INCLUDE_INTEGERINTEGERFORMATTER_H_ 





template <int Base>
class IntegerFormatter{
public:
 IntegerFormatter(size_t num);
 IntegerFormatter(void *p);
 char *format()const;
private:
 size_t num;
};


using Hex=IntegerFormatter<16>;
using Dec=IntegerFormatter<10>;
using Bin=IntegerFormatter<2>;

template <int Base>
Output & operator<<(Output & out,const IntegerFormatter<Base> &hf);



# 1 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\include/templates_implementation/IntegerFormatter.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\include/templates_implementation/IntegerFormatter.h"
#define INCLUDE_TEMPLATES_IMPLEMENTATION_INTEGERFORMATTER_H_ 

# 1 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\include/IntegerFormatter.h" 1
# 12 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\include/templates_implementation/IntegerFormatter.h" 2
# 1 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\include/generic_util.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\include/generic_util.h"
#define INCLUDE_GENERIC_UTIL_H_ 




void delayCPU(size_t i);
void delayCPU(size_t i,size_t j);
void haltCPU();





extern const char digitsMap[];



size_t itob(size_t i,char *dst,size_t size);
size_t itod(size_t i,char *dst,size_t size);
size_t itox(size_t i,char *dst,size_t size);

size_t itos(size_t i,unsigned int base,char *dst,size_t size);





void reverse(char *str,size_t size);



const char *strOffset(const char *p,size_t offset);
# 13 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\include/templates_implementation/IntegerFormatter.h" 2


template <int Base>
IntegerFormatter<Base>::IntegerFormatter(size_t num)
 :num(num){}

template <int Base>
IntegerFormatter<Base>::IntegerFormatter(void *p)
 :num(reinterpret_cast<size_t>(p)){}

template <int Base>
char *IntegerFormatter<Base>::format()const
{
 itos(num, Base, koutBuf, koutBufSize);
 return koutBuf;
}

template <int Base>
Output & operator<<(Output &out,const IntegerFormatter<Base> &hf)
{
 out << hf.format();
 return out;
}
# 36 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\include/IntegerFormatter.h" 2
# 5 "../src/arch/qemu_virt/main_aarch64_instructions.cpp" 2
# 1 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\include/arch/common_aarch64/timer_registers.h" 1


#define INCLUDE_TIMER_REGISTERS_H__ 
# 1 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\include/arch/common_aarch64/system_registers_defines.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\include/arch/common_aarch64/system_registers_defines.h"
#define INCLUDE_ARCH_COMMON_AARCH64_SYSTEM_REGISTERS_BASE_H_ 




#define DUMP_FIELD_MODIFIER(field,fieldMod) "," #field " = " << fieldMod
#define DUMP_FIELD(field) DUMP_FIELD_MODIFIER(field,field)





#define DEFINE_REG_READ(regTypeInCXX,regNameInAsm) AS_MACRO regTypeInCXX read ##regTypeInCXX(){ regTypeInCXX res;__asm__ __volatile__("mrs %0," __stringify(regNameInAsm) "\n\t":"=r"(res));return res;}
#define DEFINE_REG_WRITE(regTypeInCXX,regNameInAsm) AS_MACRO void write ##regTypeInCXX(regTypeInCXX val){ __asm__ __volatile__("msr " __stringify(regNameInAsm) ",%0 \n\t"::"r"(val));}


#define SETUP_REG_STD(regname) DEFINE_REG_READ(Reg ##regname,regname) DEFINE_REG_WRITE(Reg ##regname,regname)



#define SYS_REG_GCC_REPR(op0,op1,crn,crm,op2) s ##op0 ##_ ##op1 ##_ ##c ##crn ##_ ##c ##crm ##_ ##op2



#define ICC_BPR0_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,8,3)
#define ICC_BPR1_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,12,3)
#define ICC_CTLR_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,12,4)
#define ICC_CTLR_EL3_GCC_REPR SYS_REG_GCC_REPR(3,6,12,12,4)
#define ICC_DIR_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,11,1)
#define ICC_EOIR0_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,8,1)
#define ICC_EOIR1_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,12,1)
#define ICC_HPPIR0_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,8,2)
#define ICC_HPPIR1_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,12,2)
#define ICC_IAR0_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,8,0)
#define ICC_IAR1_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,12,0)
#define ICC_IGRPEN0_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,12,6)
#define ICC_IGRPEN1_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,12,7)
#define ICC_IGRPEN1_EL3_GCC_REPR SYS_REG_GCC_REPR(3,6,12,12,7)
#define ICC_PMR_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,4,6,0)
#define ICC_RPR_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,11,3)
#define ICC_SGI0R_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,11,7)
#define ICC_SGI1R_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,11,5)
#define ICC_SRE_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,12,5)
#define ICC_SRE_EL2_GCC_REPR SYS_REG_GCC_REPR(3,4,12,9,5)
#define ICC_SRE_EL3_GCC_REPR SYS_REG_GCC_REPR(3,6,12,12,5)

#define SETUP_REG_GCC_REPR(name) DEFINE_REG_READ(Reg ##name,name ##_GCC_REPR) DEFINE_REG_WRITE(Reg ##name,name ##_GCC_REPR)




#define ENCODE_MSR 11010101000


#define ENCODE_MRS 11010101001
#define ENCODE_ICC_IGRPEN0_EL1 1100011001100110
#define ENCODE_X0 00000


#define DEFINE_REG_READ_HARD_CODED(name) AS_MACRO Reg ##name readReg ##name() { Reg ##name res; __asm__ __volatile__( ".4byte 0b" __stringify(ENCODE_MRS) __stringify(ENCODE_ ##name) __stringify(ENCODE_X0) "\n\t" "mov %0,x0 \n\t" :"=r"(res)); return res; }
# 79 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\include/arch/common_aarch64/system_registers_defines.h"
#define DEFINE_REG_WRITE_HARD_CODED(name) AS_MACRO void writeReg ##name(Reg ##name val) { __asm__ __volatile( "mov x0,%0 \n\t" ".4byte 0b" __stringify(ENCODE_MSR) __stringify(ENCODE_ ##name) __stringify(ENCODE_X0) "\n\t" : :"r"(val) ); }
# 90 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\include/arch/common_aarch64/system_registers_defines.h"
#define SETUP_REG_HARD_CODED(name) DEFINE_REG_READ_HARD_CODED(name) DEFINE_REG_WRITE_HARD_CODED(name)







#define DEFINE_REG_READ_MEM_MAPPED(name) AS_MACRO Reg ##name readReg ##name() { return *reinterpret_cast<Reg ##name*>(name ##_MEM_MAPPED_ADDR);}





#define DEFINE_REG_WRITE_MEM_MAPPED(name) AS_MACRO void writeReg ##name(Reg ##name val) { *reinterpret_cast<Reg ##name*>(name ##_MEM_MAPPED_ADDR)=val;}




#define SETUP_REG_MEM_MAPPED(name) DEFINE_REG_READ_MEM_MAPPED(name) DEFINE_REG_WRITE_MEM_MAPPED(name)
# 5 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\include/arch/common_aarch64/timer_registers.h" 2

class RegCNTFRQ_EL0{
public:
    uint32_t ClockFrq:32;

    void dump()const
    {
        kout << "CNTFRQ_EL0:"
        << ",ClockFrq = " << ClockFrq
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegCNTFRQ_EL0 readRegCNTFRQ_EL0(){ RegCNTFRQ_EL0 res;__asm__ __volatile__("mrs %0," "CNTFRQ_EL0" "\n\t":"=r"(res));return res;} __attribute__((always_inline)) inline void writeRegCNTFRQ_EL0(RegCNTFRQ_EL0 val){ __asm__ __volatile__("msr " "CNTFRQ_EL0" ",%0 \n\t"::"r"(val));}


class RegCNTHCTL_EL2{
public:
    uint32_t EL1PCTEN:1;
    uint32_t EL1PCEN:1;
    uint32_t EVNTEN:1;
    uint32_t EVNTDIR:1;
    uint32_t EVNTI:4;
    uint32_t RES0:24;

    void dump()const
    {
        kout << "CNTHCTL_EL2:"
        << ",EL1PCTEN = " << EL1PCTEN
        << ",EL1PCEN = " << EL1PCEN
        << ",EVNTEN = " << EVNTEN
        << ",EVNTDIR = " << EVNTDIR
        << ",EVNTI = " << EVNTI
        << ",RES0 = " << RES0
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegCNTHCTL_EL2 readRegCNTHCTL_EL2(){ RegCNTHCTL_EL2 res;__asm__ __volatile__("mrs %0," "CNTHCTL_EL2" "\n\t":"=r"(res));return res;} __attribute__((always_inline)) inline void writeRegCNTHCTL_EL2(RegCNTHCTL_EL2 val){ __asm__ __volatile__("msr " "CNTHCTL_EL2" ",%0 \n\t"::"r"(val));}


class RegCNTKCTL_EL1{
public:
    uint32_t EL10PCTEN:1;
    uint32_t EL0VCTEN:1;
    uint32_t EVNTEN:1;
    uint32_t EVNTDIR:1;
    uint32_t EVNTI:4;
    uint32_t EL0VTEN:1;
    uint32_t EL0PTEN:1;
    uint32_t RES0:22;

    void dump()const
    {
        kout << "CNTKCTL_EL1:"
        << ",EL10PCTEN = " << EL10PCTEN
        << ",EL0VCTEN = " << EL0VCTEN
        << ",EVNTEN = " << EVNTEN
        << ",EVNTDIR = " << EVNTDIR
        << ",EVNTI = " << EVNTI
        << ",EL0VTEN = " << EL0VTEN
        << ",EL0PTEN = " << EL0PTEN
        << ",RES0 = " << RES0
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegCNTKCTL_EL1 readRegCNTKCTL_EL1(){ RegCNTKCTL_EL1 res;__asm__ __volatile__("mrs %0," "CNTKCTL_EL1" "\n\t":"=r"(res));return res;} __attribute__((always_inline)) inline void writeRegCNTKCTL_EL1(RegCNTKCTL_EL1 val){ __asm__ __volatile__("msr " "CNTKCTL_EL1" ",%0 \n\t"::"r"(val));}


class RegCNTP_CTL_EL0{
public:
    uint32_t ENABLE:1;
    uint32_t IMASK:1;
    uint32_t ISTATUS:1;
    uint32_t RES0:29;

    void dump()const
    {
        kout << "CNTP_CTL_EL0:"
        << ",ENABLE = " << ENABLE
        << ",IMASK = " << IMASK
        << ",ISTATUS = " << ISTATUS
        << ",RES0 = " << RES0
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegCNTP_CTL_EL0 readRegCNTP_CTL_EL0(){ RegCNTP_CTL_EL0 res;__asm__ __volatile__("mrs %0," "CNTP_CTL_EL0" "\n\t":"=r"(res));return res;} __attribute__((always_inline)) inline void writeRegCNTP_CTL_EL0(RegCNTP_CTL_EL0 val){ __asm__ __volatile__("msr " "CNTP_CTL_EL0" ",%0 \n\t"::"r"(val));}


class RegCNTP_CVAL_EL0{
public:
    uint64_t CompareValue:64;

    void dump()const
    {
        kout << "CNTP_CVAL_EL0:"
        << ",CompareValue = " << CompareValue
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegCNTP_CVAL_EL0 readRegCNTP_CVAL_EL0(){ RegCNTP_CVAL_EL0 res;__asm__ __volatile__("mrs %0," "CNTP_CVAL_EL0" "\n\t":"=r"(res));return res;} __attribute__((always_inline)) inline void writeRegCNTP_CVAL_EL0(RegCNTP_CVAL_EL0 val){ __asm__ __volatile__("msr " "CNTP_CVAL_EL0" ",%0 \n\t"::"r"(val));}


class RegCNTP_TVAL_EL0{
public:
    uint64_t TimerValue:64;

    void dump()const
    {
        kout << "CNTP_TVAL_EL0:"
        << ",TimerValue = " << TimerValue
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegCNTP_TVAL_EL0 readRegCNTP_TVAL_EL0(){ RegCNTP_TVAL_EL0 res;__asm__ __volatile__("mrs %0," "CNTP_TVAL_EL0" "\n\t":"=r"(res));return res;} __attribute__((always_inline)) inline void writeRegCNTP_TVAL_EL0(RegCNTP_TVAL_EL0 val){ __asm__ __volatile__("msr " "CNTP_TVAL_EL0" ",%0 \n\t"::"r"(val));}


class RegCNTPCT_EL0{
public:
    uint64_t PhysicalCount:64;

    void dump()const
    {
        kout << "CNTPCT_EL0:"
        << ",PhysicalCount = " << PhysicalCount
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegCNTPCT_EL0 readRegCNTPCT_EL0(){ RegCNTPCT_EL0 res;__asm__ __volatile__("mrs %0," "CNTPCT_EL0" "\n\t":"=r"(res));return res;} __attribute__((always_inline)) inline void writeRegCNTPCT_EL0(RegCNTPCT_EL0 val){ __asm__ __volatile__("msr " "CNTPCT_EL0" ",%0 \n\t"::"r"(val));}


class RegCNTVCT_EL0{
public:
    uint64_t VirtualCountValue:64;

    void dump()const
    {
        kout << "CNTVCT_EL0:"
        << ",VirtualCountValue = " << VirtualCountValue
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegCNTVCT_EL0 readRegCNTVCT_EL0(){ RegCNTVCT_EL0 res;__asm__ __volatile__("mrs %0," "CNTVCT_EL0" "\n\t":"=r"(res));return res;} __attribute__((always_inline)) inline void writeRegCNTVCT_EL0(RegCNTVCT_EL0 val){ __asm__ __volatile__("msr " "CNTVCT_EL0" ",%0 \n\t"::"r"(val));}


class RegCNTV_CTL_EL0{
public:
    uint32_t ENABLE:1;
    uint32_t IMASK:1;
    uint32_t ISTATUS:1;
    uint32_t RES0:29;

    void dump()const
    {
        kout << "CNTV_CTL_EL0:"
        << ",ENABLE = " << ENABLE
        << ",IMASK = " << IMASK
        << ",ISTATUS = " << ISTATUS
        << ",RES0 = " << RES0
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegCNTV_CTL_EL0 readRegCNTV_CTL_EL0(){ RegCNTV_CTL_EL0 res;__asm__ __volatile__("mrs %0," "CNTV_CTL_EL0" "\n\t":"=r"(res));return res;} __attribute__((always_inline)) inline void writeRegCNTV_CTL_EL0(RegCNTV_CTL_EL0 val){ __asm__ __volatile__("msr " "CNTV_CTL_EL0" ",%0 \n\t"::"r"(val));}
# 6 "../src/arch/qemu_virt/main_aarch64_instructions.cpp" 2
# 1 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\include/arch/common_aarch64/gicv3_system_registers.h" 1
# 13 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\include/arch/common_aarch64/gicv3_system_registers.h"
#define INCLUDE_ARCH_COMMON_AARCH64_GIC_REGISTERS_H_ 




class RegICC_BPR0_EL1{
public:
 uint32_t BinaryPoint:3;
 uint32_t RES0_0:29;
 void dump()const
 {
  kout << "ICC_BPR0_EL1:" << "," "BinaryPoint" " = " << BinaryPoint << "\n";
 }
}__attribute__((packed));
__attribute__((always_inline)) inline RegICC_BPR0_EL1 readRegICC_BPR0_EL1(){ RegICC_BPR0_EL1 res;__asm__ __volatile__("mrs %0," "s3_0_c12_c8_3" "\n\t":"=r"(res));return res;} __attribute__((always_inline)) inline void writeRegICC_BPR0_EL1(RegICC_BPR0_EL1 val){ __asm__ __volatile__("msr " "s3_0_c12_c8_3" ",%0 \n\t"::"r"(val));}

class RegICC_BPR1_EL1{
public:
 uint32_t BinaryPoint:3;
 uint32_t RES0_0:29;
 void dump()const
 {
  kout << "ICC_BPR1_EL1:" << "," "BinaryPoint" " = " << BinaryPoint << "\n";
 }
}__attribute__((packed));
__attribute__((always_inline)) inline RegICC_BPR1_EL1 readRegICC_BPR1_EL1(){ RegICC_BPR1_EL1 res;__asm__ __volatile__("mrs %0," "s3_0_c12_c12_3" "\n\t":"=r"(res));return res;} __attribute__((always_inline)) inline void writeRegICC_BPR1_EL1(RegICC_BPR1_EL1 val){ __asm__ __volatile__("msr " "s3_0_c12_c12_3" ",%0 \n\t"::"r"(val));}

class RegICC_CTLR_EL3{
public:
 uint32_t CBPR_EL1S:1;
 uint32_t CBPR_EL1NS:1;
 uint32_t EOImode_EL3:1;
 uint32_t EOImode_EL1S:1;
 uint32_t EOImode_EL1NS:1;
 uint32_t RM:1;
 uint32_t PMHE:1;
 uint32_t RES0_0:1;
 uint32_t PRIbits:3;
 uint32_t IDbits:3;
 uint32_t SEIS:1;
 uint32_t A3V:1;
 uint32_t RES0_1:1;
 uint32_t nDS:1;
 uint32_t RSS:1;
 uint32_t RES0_2:13;

}__attribute__((packed));
__attribute__((always_inline)) inline RegICC_CTLR_EL3 readRegICC_CTLR_EL3(){ RegICC_CTLR_EL3 res;__asm__ __volatile__("mrs %0," "s3_6_c12_c12_4" "\n\t":"=r"(res));return res;} __attribute__((always_inline)) inline void writeRegICC_CTLR_EL3(RegICC_CTLR_EL3 val){ __asm__ __volatile__("msr " "s3_6_c12_c12_4" ",%0 \n\t"::"r"(val));}


class RegICC_CTLR_EL1{
public:
 uint32_t CBPR:1;
 uint32_t EOImode:1;
 uint32_t RES0_0:4;
 uint32_t PMHE:1;
 uint32_t RES0_1:1;
 uint32_t PRIbits:3;
 uint32_t IDbits:3;
 uint32_t SEIS:1;
 uint32_t A3V:1;
 uint32_t RES0_2:2;
 uint32_t RSS:1;
 uint32_t RES0_3:13;
 void dump()const
 {
  kout << "ICC_CTLR_EL1 : "
    << "," "CBPR" " = " << CBPR
    << "," "EOImode" " = " << EOImode
    << "," "PMHE" " = " << PMHE
    << "," "PRIbits" " = " << PRIbits
    << "," "IDbits" " = " << IDbits
    << "," "SEIS" " = " << SEIS
    << "," "A3V" " = " << A3V
    << "," "RSS" " = " << RSS
    << "," "RES0_3" " = " << RES0_3
    << "\n";
 }

}__attribute__((packed));
__attribute__((always_inline)) inline RegICC_CTLR_EL1 readRegICC_CTLR_EL1(){ RegICC_CTLR_EL1 res;__asm__ __volatile__("mrs %0," "s3_0_c12_c12_4" "\n\t":"=r"(res));return res;} __attribute__((always_inline)) inline void writeRegICC_CTLR_EL1(RegICC_CTLR_EL1 val){ __asm__ __volatile__("msr " "s3_0_c12_c12_4" ",%0 \n\t"::"r"(val));}


class RegICC_DIR_EL1{
public:
 uint32_t INTID:24;
 uint32_t RES0:8;
 void dump()const
 {
  kout << "ICC_DIR_EL1 " << "," "INTID" " = " << INTID << "\n";
 }
}__attribute__((packed));
__attribute__((always_inline)) inline RegICC_DIR_EL1 readRegICC_DIR_EL1(){ RegICC_DIR_EL1 res;__asm__ __volatile__("mrs %0," "s3_0_c12_c11_1" "\n\t":"=r"(res));return res;} __attribute__((always_inline)) inline void writeRegICC_DIR_EL1(RegICC_DIR_EL1 val){ __asm__ __volatile__("msr " "s3_0_c12_c11_1" ",%0 \n\t"::"r"(val));}




class RegICC_EOIR0_EL1{
public:
 uint32_t INTID:24;
 uint32_t RES0:8;
 void dump()const
 {
  kout << "ICC_EOIR0_EL1 " << "," "INTID" " = " << INTID << "\n";
 }
}__attribute__((packed));
__attribute__((always_inline)) inline RegICC_EOIR0_EL1 readRegICC_EOIR0_EL1(){ RegICC_EOIR0_EL1 res;__asm__ __volatile__("mrs %0," "s3_0_c12_c8_1" "\n\t":"=r"(res));return res;} __attribute__((always_inline)) inline void writeRegICC_EOIR0_EL1(RegICC_EOIR0_EL1 val){ __asm__ __volatile__("msr " "s3_0_c12_c8_1" ",%0 \n\t"::"r"(val));}

class RegICC_EOIR1_EL1{
public:
 uint32_t INTID:24;
 uint32_t RES0:8;
 void dump()const
 {
  kout << "ICC_EOIR1_EL1 " << "," "INTID" " = " << INTID << "\n";
 }
}__attribute__((packed));
__attribute__((always_inline)) inline RegICC_EOIR1_EL1 readRegICC_EOIR1_EL1(){ RegICC_EOIR1_EL1 res;__asm__ __volatile__("mrs %0," "s3_0_c12_c12_1" "\n\t":"=r"(res));return res;} __attribute__((always_inline)) inline void writeRegICC_EOIR1_EL1(RegICC_EOIR1_EL1 val){ __asm__ __volatile__("msr " "s3_0_c12_c12_1" ",%0 \n\t"::"r"(val));}



class RegICC_HPPIR0_EL1{
public:
 uint32_t INTID:24;
 uint32_t RES0:8;
 void dump()const
 {
  kout << "ICC_HPPIR0_EL1 " << "," "INTID" " = " << INTID << "\n";
 }
}__attribute__((packed));
__attribute__((always_inline)) inline RegICC_HPPIR0_EL1 readRegICC_HPPIR0_EL1(){ RegICC_HPPIR0_EL1 res;__asm__ __volatile__("mrs %0," "s3_0_c12_c8_2" "\n\t":"=r"(res));return res;} __attribute__((always_inline)) inline void writeRegICC_HPPIR0_EL1(RegICC_HPPIR0_EL1 val){ __asm__ __volatile__("msr " "s3_0_c12_c8_2" ",%0 \n\t"::"r"(val));}
class RegICC_HPPIR1_EL1{
public:
 uint32_t INTID:24;
 uint32_t RES0:8;
 void dump()const
 {
  kout << "ICC_HPPIR1_EL1 " << "," "INTID" " = " << INTID << "\n";
 }
}__attribute__((packed));
__attribute__((always_inline)) inline RegICC_HPPIR1_EL1 readRegICC_HPPIR1_EL1(){ RegICC_HPPIR1_EL1 res;__asm__ __volatile__("mrs %0," "s3_0_c12_c12_2" "\n\t":"=r"(res));return res;} __attribute__((always_inline)) inline void writeRegICC_HPPIR1_EL1(RegICC_HPPIR1_EL1 val){ __asm__ __volatile__("msr " "s3_0_c12_c12_2" ",%0 \n\t"::"r"(val));}



class RegICC_IAR0_EL1{
public:
 uint32_t INTID:24;
 uint32_t RES0:8;
 void dump()const
 {
  kout << "ICC_IAR0_EL1:" << "INTID = " << INTID << "\n";
 }
}__attribute__((packed));
__attribute__((always_inline)) inline RegICC_IAR0_EL1 readRegICC_IAR0_EL1(){ RegICC_IAR0_EL1 res;__asm__ __volatile__("mrs %0," "s3_0_c12_c8_0" "\n\t":"=r"(res));return res;} __attribute__((always_inline)) inline void writeRegICC_IAR0_EL1(RegICC_IAR0_EL1 val){ __asm__ __volatile__("msr " "s3_0_c12_c8_0" ",%0 \n\t"::"r"(val));}


class RegICC_IAR1_EL1{
public:
 uint32_t INTID:24;
 uint32_t RES0:8;
 void dump()const
 {
  kout << "ICC_IAR1_EL1:" << "INTID = " << INTID << "\n";
 }
}__attribute__((packed));
__attribute__((always_inline)) inline RegICC_IAR1_EL1 readRegICC_IAR1_EL1(){ RegICC_IAR1_EL1 res;__asm__ __volatile__("mrs %0," "s3_0_c12_c12_0" "\n\t":"=r"(res));return res;} __attribute__((always_inline)) inline void writeRegICC_IAR1_EL1(RegICC_IAR1_EL1 val){ __asm__ __volatile__("msr " "s3_0_c12_c12_0" ",%0 \n\t"::"r"(val));}



class RegICC_IGRPEN0_EL1{
public:
 uint32_t Enable:1;
 uint32_t RES0:31;
 void dump()const
 {
  kout << "RegICC_IGRPEN0_EL1 : " << "," "Enable" " = " << Enable << "\n";
 }

}__attribute__((packed));
__attribute__((always_inline)) inline RegICC_IGRPEN0_EL1 readRegICC_IGRPEN0_EL1(){ RegICC_IGRPEN0_EL1 res;__asm__ __volatile__("mrs %0," "s3_0_c12_c12_6" "\n\t":"=r"(res));return res;} __attribute__((always_inline)) inline void writeRegICC_IGRPEN0_EL1(RegICC_IGRPEN0_EL1 val){ __asm__ __volatile__("msr " "s3_0_c12_c12_6" ",%0 \n\t"::"r"(val));}



class RegICC_IGRPEN1_EL1{
public:
 uint32_t Enable:1;
 uint32_t RES0:31;
 void dump()const
 {
  kout << "RegICC_IGRPEN1_EL1 : " << "," "Enable" " = " << Enable << "\n";
 }
}__attribute__((packed));
__attribute__((always_inline)) inline RegICC_IGRPEN1_EL1 readRegICC_IGRPEN1_EL1(){ RegICC_IGRPEN1_EL1 res;__asm__ __volatile__("mrs %0," "s3_0_c12_c12_7" "\n\t":"=r"(res));return res;} __attribute__((always_inline)) inline void writeRegICC_IGRPEN1_EL1(RegICC_IGRPEN1_EL1 val){ __asm__ __volatile__("msr " "s3_0_c12_c12_7" ",%0 \n\t"::"r"(val));}

class RegICC_IGRPEN1_EL3{
public:
 uint32_t EnableGrp1NS:1;
 uint32_t EnableGrp1S:1;
 uint32_t RES0:30;
 void dump()const
 {
  kout << "ICC_IGRPEN1_EL3 : "
    << "," "EnableGrp1NS" " = " << EnableGrp1NS
    << "," "EnableGrp1S" " = " << EnableGrp1S
    << "\n";
 }
}__attribute__((packed));
__attribute__((always_inline)) inline RegICC_IGRPEN1_EL3 readRegICC_IGRPEN1_EL3(){ RegICC_IGRPEN1_EL3 res;__asm__ __volatile__("mrs %0," "s3_6_c12_c12_7" "\n\t":"=r"(res));return res;} __attribute__((always_inline)) inline void writeRegICC_IGRPEN1_EL3(RegICC_IGRPEN1_EL3 val){ __asm__ __volatile__("msr " "s3_6_c12_c12_7" ",%0 \n\t"::"r"(val));}

class RegICC_PMR_EL1{
public:
 uint32_t Priortiy:8;
 uint32_t RES0_0:24;
 void dump()const
 {
  kout << "PMR_EL1:"<<"," "Priortiy" " = " << Priortiy<<"\n";
 }
}__attribute__((packed));
__attribute__((always_inline)) inline RegICC_PMR_EL1 readRegICC_PMR_EL1(){ RegICC_PMR_EL1 res;__asm__ __volatile__("mrs %0," "s3_0_c4_c6_0" "\n\t":"=r"(res));return res;} __attribute__((always_inline)) inline void writeRegICC_PMR_EL1(RegICC_PMR_EL1 val){ __asm__ __volatile__("msr " "s3_0_c4_c6_0" ",%0 \n\t"::"r"(val));}

class RegICC_RPR_EL1{
public:
 uint32_t Priortiy:8;
 uint32_t RES0_0:24;
 void dump()const
 {
  kout << "RPR_EL1:"<<"," "Priortiy" " = " << Priortiy<<"\n";
 }
}__attribute__((packed));
__attribute__((always_inline)) inline RegICC_RPR_EL1 readRegICC_RPR_EL1(){ RegICC_RPR_EL1 res;__asm__ __volatile__("mrs %0," "s3_0_c12_c11_3" "\n\t":"=r"(res));return res;} __attribute__((always_inline)) inline void writeRegICC_RPR_EL1(RegICC_RPR_EL1 val){ __asm__ __volatile__("msr " "s3_0_c12_c11_3" ",%0 \n\t"::"r"(val));}




class RegICC_SGI0R_EL1{
public:
 uint64_t TargetList:16;
 uint64_t Aff1:8;
 uint64_t INTID:4;
 uint64_t RES0_0:4;
 uint64_t Aff2:8;
 uint64_t IRM:1;
 uint64_t RES0_1:3;
 uint64_t RS:4;
 uint64_t Aff3:8;
 uint64_t RES0_2:8;
 void dump()const
 {
  kout << "ICC_SGI0R_EL1:"
    << "," "TargetList" " = " << TargetList
    << "," "Aff1" " = " << Aff1
    << "," "INTID" " = " << INTID
    << "," "RES0_0" " = " << RES0_0
    << "," "Aff2" " = " << Aff2
    << "," "IRM" " = " << IRM
    << "," "RES0_1" " = " << RES0_1
    << "," "RS" " = " << RS
    << "," "Aff3" " = " << Aff3
    << "\n";

 }
}__attribute__((packed));


#define TEMP DEFINE_REG_WRITE(Reg ##ICC_SGI0R_EL1,ICC_SGI0R_EL1 ##_GCC_REPR)
__attribute__((always_inline)) inline void writeRegICC_SGI0R_EL1(RegICC_SGI0R_EL1 val){ __asm__ __volatile__("msr " "s3_0_c12_c11_7" ",%0 \n\t"::"r"(val));}
#undef TEMP


class RegICC_SGI1R_EL1{
public:
 uint64_t TargetList:16;
 uint64_t Aff1:8;
 uint64_t INTID:4;
 uint64_t RES0_0:4;
 uint64_t Aff2:8;
 uint64_t IRM:1;
 uint64_t RES0_1:3;
 uint64_t RS:4;
 uint64_t Aff3:8;
 uint64_t RES0_2:8;
 void dump()const
 {
  kout << "ICC_SGI1R_EL1:"
    << "," "TargetList" " = " << TargetList
    << "," "Aff1" " = " << Aff1
    << "," "INTID" " = " << INTID
    << "," "RES0_0" " = " << RES0_0
    << "," "Aff2" " = " << Aff2
    << "," "IRM" " = " << IRM
    << "," "RES0_1" " = " << RES0_1
    << "," "RS" " = " << RS
    << "," "Aff3" " = " << Aff3
    << "\n";
 }
}__attribute__((packed));


#define TEMP DEFINE_REG_WRITE(Reg ##ICC_SGI1R_EL1,ICC_SGI1R_EL1 ##_GCC_REPR)
__attribute__((always_inline)) inline void writeRegICC_SGI1R_EL1(RegICC_SGI1R_EL1 val){ __asm__ __volatile__("msr " "s3_0_c12_c11_5" ",%0 \n\t"::"r"(val));}
#undef TEMP



class RegICC_SRE_EL1{
public:
 uint32_t SRE:1;
 uint32_t DFB:1;
 uint32_t DIB:1;
 uint32_t RES0:29;
 void dump()const
 {
  kout << "ICC_SRE_EL1 :" << "," "SRE" " = " << SRE << "," "DFB" " = " << DFB << "," "DIB" " = " << DIB << "\n";
 }
}__attribute__((packed));
__attribute__((always_inline)) inline RegICC_SRE_EL1 readRegICC_SRE_EL1(){ RegICC_SRE_EL1 res;__asm__ __volatile__("mrs %0," "s3_0_c12_c12_5" "\n\t":"=r"(res));return res;} __attribute__((always_inline)) inline void writeRegICC_SRE_EL1(RegICC_SRE_EL1 val){ __asm__ __volatile__("msr " "s3_0_c12_c12_5" ",%0 \n\t"::"r"(val));}
# 7 "../src/arch/qemu_virt/main_aarch64_instructions.cpp" 2
# 1 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\include/arch/common_aarch64/system_common_registers.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\include/arch/common_aarch64/system_common_registers.h"
#define INCLUDE_ARCH_COMMON_AARCH64_SYSTEM_COMMON_REGISTERS_H_ 



class RegSPSel{
public:
 uint32_t SP:1;
 uint32_t RES0_0:31;
 void dump()const
 {
  kout << "SPSel:" << "," "SP" " = " << SP << "\n";
 }

}__attribute__((packed));
__attribute__((always_inline)) inline RegSPSel readRegSPSel(){ RegSPSel res;__asm__ __volatile__("mrs %0," "SPSel" "\n\t":"=r"(res));return res;} __attribute__((always_inline)) inline void writeRegSPSel(RegSPSel val){ __asm__ __volatile__("msr " "SPSel" ",%0 \n\t"::"r"(val));}

class RegCurrentEL{
public:
 uint32_t RES0_0:2;
 uint32_t EL:2;
 uint32_t RES0_1:28;
 void dump()const
 {
  kout << "CurrentEL:" <<"," "EL" " = " << EL << "\n";
 }

}__attribute__((packed));
__attribute__((always_inline)) inline RegCurrentEL readRegCurrentEL(){ RegCurrentEL res;__asm__ __volatile__("mrs %0," "CurrentEL" "\n\t":"=r"(res));return res;} __attribute__((always_inline)) inline void writeRegCurrentEL(RegCurrentEL val){ __asm__ __volatile__("msr " "CurrentEL" ",%0 \n\t"::"r"(val));}

class RegDAIF{
public:
 uint32_t res0_0:6;
 uint32_t F:1;
 uint32_t I:1;
 uint32_t A:1;
 uint32_t D:1;
 uint32_t res0_1:22;
 void dump()const
 {
  kout << "RegDAIF:"<<"F=" <<F<<",I="<<I<<",A="<<A<< ",D="<<D<<"\n";
 }
}__attribute__((packed));
__attribute__((always_inline)) inline RegDAIF readRegDAIF(){ RegDAIF res;__asm__ __volatile__("mrs %0," "DAIF" "\n\t":"=r"(res));return res;} __attribute__((always_inline)) inline void writeRegDAIF(RegDAIF val){ __asm__ __volatile__("msr " "DAIF" ",%0 \n\t"::"r"(val));}

class RegISR_EL1{
public:
 uint32_t res0_0:6 ;
 uint32_t F:1;
 uint32_t I:1;
 uint32_t A:1;
 uint32_t res0_1:23;
 void dump()const
 {
  kout <<"RegISR_EL1:"<< "F=" <<F<<",I="<<I<<",A="<<A<<"\n";
 }
}__attribute__((packed));
__attribute__((always_inline)) inline RegISR_EL1 readRegISR_EL1(){ RegISR_EL1 res;__asm__ __volatile__("mrs %0," "ISR_EL1" "\n\t":"=r"(res));return res;} __attribute__((always_inline)) inline void writeRegISR_EL1(RegISR_EL1 val){ __asm__ __volatile__("msr " "ISR_EL1" ",%0 \n\t"::"r"(val));}


class RegID_AA64PFR0_EL1{
public:
 uint64_t EL0:4;
 uint64_t EL1:4;
 uint64_t EL2:4;
 uint64_t EL3:4;
 uint64_t FP:4;
 uint64_t AdvSIMD:4;
 uint64_t GIC:4;
 uint64_t RAS:4;
 uint64_t SVE:4;
 uint64_t RES0:28;
 void dump()const{
  kout << "ID_AA64PFR0_EL1:" << "," "EL0" " = " << EL0 << "," "EL1" " = " << EL1 << "," "EL2" " = " << EL2 << "," "EL3" " = " << EL3 << "," "FP" " = " << FP <<"," "AdvSIMD" " = " << AdvSIMD <<"," "GIC" " = " << GIC << "," "RAS" " = " << RAS <<"," "SVE" " = " << SVE<<"\n";
 }
}__attribute__((packed));
__attribute__((always_inline)) inline RegID_AA64PFR0_EL1 readRegID_AA64PFR0_EL1(){ RegID_AA64PFR0_EL1 res;__asm__ __volatile__("mrs %0," "ID_AA64PFR0_EL1" "\n\t":"=r"(res));return res;} __attribute__((always_inline)) inline void writeRegID_AA64PFR0_EL1(RegID_AA64PFR0_EL1 val){ __asm__ __volatile__("msr " "ID_AA64PFR0_EL1" ",%0 \n\t"::"r"(val));}

class RegMPIDR_EL1{
public:
 uint64_t Aff0:8;
 uint64_t Aff1:8;
 uint64_t Aff2:8;
 uint64_t MT:1;
 uint64_t RES0_0:5;
 uint64_t U:1;
 uint64_t RES1_1:1;
 uint64_t Aff3:8;
 uint64_t RES0_2:24;

 void dump()const
 {
  kout << "MPIDR_EL1 : "
    << "," "Aff0" " = " << Aff0
    << "," "Aff1" " = " << Aff1
    << "," "Aff2" " = " << Aff2
    << "," "MT" " = " << MT
    << "," "RES0_0" " = " << RES0_0
    << "," "U" " = " << U
    << "," "RES1_1" " = " << RES1_1
    << "," "Aff3" " = " << Aff3
    << "," "RES0_2" " = " << RES0_2
    << "\n";
 }
};
__attribute__((always_inline)) inline RegMPIDR_EL1 readRegMPIDR_EL1(){ RegMPIDR_EL1 res;__asm__ __volatile__("mrs %0," "MPIDR_EL1" "\n\t":"=r"(res));return res;} __attribute__((always_inline)) inline void writeRegMPIDR_EL1(RegMPIDR_EL1 val){ __asm__ __volatile__("msr " "MPIDR_EL1" ",%0 \n\t"::"r"(val));}
# 8 "../src/arch/qemu_virt/main_aarch64_instructions.cpp" 2
# 1 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\include/arch/common_aarch64/register_classes.h" 1


#define INCLUDE_REGISTER_CLASSES_H__ 

# 1 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\include/arch/common_aarch64/gicv3_defines.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\include/arch/common_aarch64/gicv3_defines.h"
#define INCLUDE_ARCH_COMMON_AARCH64_GICV3_BASE_H_ 



#define GIC_DIST_BASE 0x08000000
#define GIC_CPU_BASE 0x08010000
#define GIC_V2M_BASE 0x08020000
#define GIC_ITS_BASE 0x08080000
#define GIC_REDIST_BASE 0x080A0000


#define GIC_REDIST_RD_BASE (GIC_REDIST_BASE)

#define GIC_REDIST_SGI_BASE (GIC_REDIST_RD_BASE + 1024*64)

#define GICD_CTLR_MEM_MAPPED_ADDR (GIC_DIST_BASE+0)
#define GICD_IIDR_MEM_MAPPED_ADDR (GIC_DIST_BASE+0x8)
#define GICD_ISENABLER_MEM_MAPPED_ADDR(n) (GIC_DIST_BASE + 0x100 + 4*(n))
#define GICD_ISPENDR_MEM_MAPPED_ADDR(n) (GIC_DIST_BASE + 0x200 + 4*(n))
#define GICD_ISACTIVER_MEM_MAPPED_ADDR(n) (GIC_DIST_BASE + 0x300 + 4*(n))
#define GICD_ISENABLER0_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(0)
#define GICD_ISENABLER1_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(1)
#define GICD_ISENABLER2_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(2)
#define GICD_ISENABLER3_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(3)
#define GICD_ISENABLER4_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(4)
#define GICD_ISENABLER5_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(5)
#define GICD_ISENABLER6_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(6)
#define GICD_ISENABLER7_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(7)
#define GICD_ISENABLER8_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(8)
#define GICD_ISENABLER9_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(9)
#define GICD_ISENABLER10_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(10)
#define GICD_ISENABLER11_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(11)
#define GICD_ISENABLER12_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(12)
#define GICD_ISENABLER13_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(13)
#define GICD_ISENABLER14_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(14)
#define GICD_ISENABLER15_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(15)
#define GICD_ISENABLER16_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(16)
#define GICD_ISENABLER17_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(17)
#define GICD_ISENABLER18_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(18)
#define GICD_ISENABLER19_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(19)
#define GICD_ISENABLER20_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(20)
#define GICD_ISENABLER21_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(21)
#define GICD_ISENABLER22_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(22)
#define GICD_ISENABLER23_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(23)
#define GICD_ISENABLER24_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(24)
#define GICD_ISENABLER25_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(25)
#define GICD_ISENABLER26_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(26)
#define GICD_ISENABLER27_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(27)
#define GICD_ISENABLER28_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(28)
#define GICD_ISENABLER29_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(29)
#define GICD_ISENABLER30_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(30)
#define GICD_ISENABLER31_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(31)

#define GICD_ISPENDR0_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(0)
#define GICD_ISPENDR1_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(1)
#define GICD_ISPENDR2_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(2)
#define GICD_ISPENDR3_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(3)
#define GICD_ISPENDR4_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(4)
#define GICD_ISPENDR5_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(5)
#define GICD_ISPENDR6_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(6)
#define GICD_ISPENDR7_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(7)
#define GICD_ISPENDR8_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(8)
#define GICD_ISPENDR9_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(9)
#define GICD_ISPENDR10_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(10)
#define GICD_ISPENDR11_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(11)
#define GICD_ISPENDR12_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(12)
#define GICD_ISPENDR13_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(13)
#define GICD_ISPENDR14_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(14)
#define GICD_ISPENDR15_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(15)
#define GICD_ISPENDR16_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(16)
#define GICD_ISPENDR17_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(17)
#define GICD_ISPENDR18_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(18)
#define GICD_ISPENDR19_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(19)
#define GICD_ISPENDR20_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(20)
#define GICD_ISPENDR21_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(21)
#define GICD_ISPENDR22_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(22)
#define GICD_ISPENDR23_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(23)
#define GICD_ISPENDR24_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(24)
#define GICD_ISPENDR25_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(25)
#define GICD_ISPENDR26_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(26)
#define GICD_ISPENDR27_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(27)
#define GICD_ISPENDR28_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(28)
#define GICD_ISPENDR29_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(29)
#define GICD_ISPENDR30_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(30)
#define GICD_ISPENDR31_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(31)


#define GICD_ISACTIVER0_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(0)
#define GICD_ISACTIVER1_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(1)
#define GICD_ISACTIVER2_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(2)
#define GICD_ISACTIVER3_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(3)
#define GICD_ISACTIVER4_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(4)
#define GICD_ISACTIVER5_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(5)
#define GICD_ISACTIVER6_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(6)
#define GICD_ISACTIVER7_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(7)
#define GICD_ISACTIVER8_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(8)
#define GICD_ISACTIVER9_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(9)
#define GICD_ISACTIVER10_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(10)
#define GICD_ISACTIVER11_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(11)
#define GICD_ISACTIVER12_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(12)
#define GICD_ISACTIVER13_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(13)
#define GICD_ISACTIVER14_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(14)
#define GICD_ISACTIVER15_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(15)
#define GICD_ISACTIVER16_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(16)
#define GICD_ISACTIVER17_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(17)
#define GICD_ISACTIVER18_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(18)
#define GICD_ISACTIVER19_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(19)
#define GICD_ISACTIVER20_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(20)
#define GICD_ISACTIVER21_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(21)
#define GICD_ISACTIVER22_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(22)
#define GICD_ISACTIVER23_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(23)
#define GICD_ISACTIVER24_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(24)
#define GICD_ISACTIVER25_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(25)
#define GICD_ISACTIVER26_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(26)
#define GICD_ISACTIVER27_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(27)
#define GICD_ISACTIVER28_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(28)
#define GICD_ISACTIVER29_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(29)
#define GICD_ISACTIVER30_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(30)
#define GICD_ISACTIVER31_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(31)

#define GICR_IPRIORITYR_MEM_MAPPED_ADDR(n) (GIC_REDIST_SGI_BASE + 0x400 + 4*(n))
#define GICR_IPRIORITYR0_MEM_MAPPED_ADDR GICR_IPRIORITYR_MEM_MAPPED_ADDR(0)
#define GICR_IPRIORITYR1_MEM_MAPPED_ADDR GICR_IPRIORITYR_MEM_MAPPED_ADDR(1)
#define GICR_IPRIORITYR2_MEM_MAPPED_ADDR GICR_IPRIORITYR_MEM_MAPPED_ADDR(2)
#define GICR_IPRIORITYR3_MEM_MAPPED_ADDR GICR_IPRIORITYR_MEM_MAPPED_ADDR(3)
#define GICR_IPRIORITYR4_MEM_MAPPED_ADDR GICR_IPRIORITYR_MEM_MAPPED_ADDR(4)
#define GICR_IPRIORITYR5_MEM_MAPPED_ADDR GICR_IPRIORITYR_MEM_MAPPED_ADDR(5)
#define GICR_IPRIORITYR6_MEM_MAPPED_ADDR GICR_IPRIORITYR_MEM_MAPPED_ADDR(6)
#define GICR_IPRIORITYR7_MEM_MAPPED_ADDR GICR_IPRIORITYR_MEM_MAPPED_ADDR(7)

#define GICR_CTLR_MEM_MAPPED_ADDR (GIC_REDIST_BASE+0)
#define GICR_WAKER_MEM_MAPPED_ADDR (GIC_REDIST_BASE+0x14)
#define GICR_IGROUPR0_MEM_MAPPED_ADDR (GIC_REDIST_SGI_BASE + 0x80)
#define GICR_ISACTIVER0_MEM_MAPPED_ADDR (GIC_REDIST_SGI_BASE + 0x300)
#define GICR_ISPENDR0_MEM_MAPPED_ADDR (GIC_REDIST_SGI_BASE+0x200)
#define GICR_ISENABLER0_MEM_MAPPED_ADDR (GIC_REDIST_SGI_BASE + 0x100)

#define GICR_ICENABLER0_MEM_MAPPED_ADDR (GIC_REDIST_SGI_BASE+0x180)
#define GICR_ICFGR0_MEM_MAPPED_ADDR (GIC_REDIST_SGI_BASE+0xc00)
#define GICR_ICFGR1_MEM_MAPPED_ADDR (GIC_REDIST_SGI_BASE+0xc04)
#define GICR_ICACTIVER0_MEM_MAPPED_ADDR (GIC_REDIST_SGI_BASE + 0x380)
# 6 "D:\\Pool\\eclipse-workspace_aarch64\\chap003\\include/arch/common_aarch64/register_classes.h" 2

class RegGICD_CTLR{
public:
    uint32_t EnableGrp0:1;
    uint32_t EnableGrp1NS:1;
    uint32_t EnableGrp1S:1;
    uint32_t RES0_0:1;
    uint32_t ARE_S:1;
    uint32_t ARE_NS:1;
    uint32_t DS:1;
    uint32_t E1NWF:1;
    uint32_t RES0_1:23;
    uint32_t RWP:1;

    void dump()const
    {
        kout << "GICD_CTLR:"
        << ",EnableGrp0 = " << EnableGrp0
        << ",EnableGrp1NS = " << EnableGrp1NS
        << ",EnableGrp1S = " << EnableGrp1S
        << ",RES0_0 = " << RES0_0
        << ",ARE_S = " << ARE_S
        << ",ARE_NS = " << ARE_NS
        << ",DS = " << DS
        << ",E1NWF = " << E1NWF
        << ",RES0_1 = " << RES0_1
        << ",RWP = " << RWP
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_CTLR readRegGICD_CTLR() { return *reinterpret_cast<RegGICD_CTLR*>((0x08000000 +0));} __attribute__((always_inline)) inline void writeRegGICD_CTLR(RegGICD_CTLR val) { *reinterpret_cast<RegGICD_CTLR*>((0x08000000 +0))=val;}


class RegGICR_CTLR{
public:
    uint32_t EnableLPIs:1;
    uint32_t RES0_0:2;
    uint32_t RWP:1;
    uint32_t RES0_1:20;
    uint32_t DPG0:1;
    uint32_t DPG1NS:1;
    uint32_t DPG1S:1;
    uint32_t RES0_2:4;
    uint32_t UWP:1;

    void dump()const
    {
        kout << "GICR_CTLR:"
        << ",EnableLPIs = " << EnableLPIs
        << ",RES0_0 = " << RES0_0
        << ",RWP = " << RWP
        << ",RES0_1 = " << RES0_1
        << ",DPG0 = " << DPG0
        << ",DPG1NS = " << DPG1NS
        << ",DPG1S = " << DPG1S
        << ",RES0_2 = " << RES0_2
        << ",UWP = " << UWP
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICR_CTLR readRegGICR_CTLR() { return *reinterpret_cast<RegGICR_CTLR*>((0x080A0000 +0));} __attribute__((always_inline)) inline void writeRegGICR_CTLR(RegGICR_CTLR val) { *reinterpret_cast<RegGICR_CTLR*>((0x080A0000 +0))=val;}


class RegGICR_WAKER{
public:
    uint32_t IMP_DEF_0:1;
    uint32_t ProcessorSleep:1;
    uint32_t ChildrenAsleep:1;
    uint32_t RES0_0:28;
    uint32_t IMP_DEF_1:1;

    void dump()const
    {
        kout << "GICR_WAKER:"
        << ",IMP_DEF_0 = " << IMP_DEF_0
        << ",ProcessorSleep = " << ProcessorSleep
        << ",ChildrenAsleep = " << ChildrenAsleep
        << ",RES0_0 = " << RES0_0
        << ",IMP_DEF_1 = " << IMP_DEF_1
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICR_WAKER readRegGICR_WAKER() { return *reinterpret_cast<RegGICR_WAKER*>((0x080A0000 +0x14));} __attribute__((always_inline)) inline void writeRegGICR_WAKER(RegGICR_WAKER val) { *reinterpret_cast<RegGICR_WAKER*>((0x080A0000 +0x14))=val;}


class RegGICR_IGROUPR0{
public:
    uint32_t InGrp:32;

    void dump()const
    {
        kout << "GICR_IGROUPR0:"
        << ",InGrp = " << InGrp
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICR_IGROUPR0 readRegGICR_IGROUPR0() { return *reinterpret_cast<RegGICR_IGROUPR0*>((((0x080A0000) + 1024*64) + 0x80));} __attribute__((always_inline)) inline void writeRegGICR_IGROUPR0(RegGICR_IGROUPR0 val) { *reinterpret_cast<RegGICR_IGROUPR0*>((((0x080A0000) + 1024*64) + 0x80))=val;}


class RegGICR_ISENABLER0{
public:
    uint32_t Enables:32;

    void dump()const
    {
        kout << "GICR_ISENABLER0:"
        << ",Enables = " << Hex(Enables)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICR_ISENABLER0 readRegGICR_ISENABLER0() { return *reinterpret_cast<RegGICR_ISENABLER0*>((((0x080A0000) + 1024*64) + 0x100));} __attribute__((always_inline)) inline void writeRegGICR_ISENABLER0(RegGICR_ISENABLER0 val) { *reinterpret_cast<RegGICR_ISENABLER0*>((((0x080A0000) + 1024*64) + 0x100))=val;}


class RegGICD_IIDR{
public:
    uint32_t Implementer:12;
    uint32_t Revision:4;
    uint32_t Variant:4;
    uint32_t RES0:4;
    uint32_t ProductID:8;

    void dump()const
    {
        kout << "GICD_IIDR:"
        << ",Implementer = " << Implementer
        << ",Revision = " << Revision
        << ",Variant = " << Variant
        << ",RES0 = " << RES0
        << ",ProductID = " << ProductID
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_IIDR readRegGICD_IIDR() { return *reinterpret_cast<RegGICD_IIDR*>((0x08000000 +0x8));} __attribute__((always_inline)) inline void writeRegGICD_IIDR(RegGICD_IIDR val) { *reinterpret_cast<RegGICD_IIDR*>((0x08000000 +0x8))=val;}


class RegGICR_ICENABLER0{
public:
    uint32_t ClearEnables:32;

    void dump()const
    {
        kout << "GICR_ICENABLER0:"
        << ",ClearEnables = " << Hex(ClearEnables)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICR_ICENABLER0 readRegGICR_ICENABLER0() { return *reinterpret_cast<RegGICR_ICENABLER0*>((((0x080A0000) + 1024*64)+0x180));} __attribute__((always_inline)) inline void writeRegGICR_ICENABLER0(RegGICR_ICENABLER0 val) { *reinterpret_cast<RegGICR_ICENABLER0*>((((0x080A0000) + 1024*64)+0x180))=val;}


class RegGICR_ISPENDR0{
public:
    uint32_t Pendings:32;

    void dump()const
    {
        kout << "GICR_ISPENDR0:"
        << ",Pendings = " << Hex(Pendings)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICR_ISPENDR0 readRegGICR_ISPENDR0() { return *reinterpret_cast<RegGICR_ISPENDR0*>((((0x080A0000) + 1024*64)+0x200));} __attribute__((always_inline)) inline void writeRegGICR_ISPENDR0(RegGICR_ISPENDR0 val) { *reinterpret_cast<RegGICR_ISPENDR0*>((((0x080A0000) + 1024*64)+0x200))=val;}


class RegGICR_ISACTIVER0{
public:
    uint32_t Actives:32;

    void dump()const
    {
        kout << "GICR_ISACTIVER0:"
        << ",Actives = " << Hex(Actives)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICR_ISACTIVER0 readRegGICR_ISACTIVER0() { return *reinterpret_cast<RegGICR_ISACTIVER0*>((((0x080A0000) + 1024*64) + 0x300));} __attribute__((always_inline)) inline void writeRegGICR_ISACTIVER0(RegGICR_ISACTIVER0 val) { *reinterpret_cast<RegGICR_ISACTIVER0*>((((0x080A0000) + 1024*64) + 0x300))=val;}


class RegGICR_ICFGR0{
public:
    uint32_t Configs:32;

    void dump()const
    {
        kout << "GICR_ICFGR0:"
        << ",Configs = " << Hex(Configs)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICR_ICFGR0 readRegGICR_ICFGR0() { return *reinterpret_cast<RegGICR_ICFGR0*>((((0x080A0000) + 1024*64)+0xc00));} __attribute__((always_inline)) inline void writeRegGICR_ICFGR0(RegGICR_ICFGR0 val) { *reinterpret_cast<RegGICR_ICFGR0*>((((0x080A0000) + 1024*64)+0xc00))=val;}


class RegGICR_ICFGR1{
public:
    uint32_t Configs:32;

    void dump()const
    {
        kout << "GICR_ICFGR1:"
        << ",Configs = " << Hex(Configs)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICR_ICFGR1 readRegGICR_ICFGR1() { return *reinterpret_cast<RegGICR_ICFGR1*>((((0x080A0000) + 1024*64)+0xc04));} __attribute__((always_inline)) inline void writeRegGICR_ICFGR1(RegGICR_ICFGR1 val) { *reinterpret_cast<RegGICR_ICFGR1*>((((0x080A0000) + 1024*64)+0xc04))=val;}


class RegGICR_ICACTIVER0{
public:
    uint32_t Actives:32;

    void dump()const
    {
        kout << "GICR_ICACTIVER0:"
        << ",Actives = " << Hex(Actives)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICR_ICACTIVER0 readRegGICR_ICACTIVER0() { return *reinterpret_cast<RegGICR_ICACTIVER0*>((((0x080A0000) + 1024*64) + 0x380));} __attribute__((always_inline)) inline void writeRegGICR_ICACTIVER0(RegGICR_ICACTIVER0 val) { *reinterpret_cast<RegGICR_ICACTIVER0*>((((0x080A0000) + 1024*64) + 0x380))=val;}


class RegGICR_IPRIORITYR0{
public:
    uint32_t p0:8;
    uint32_t p1:8;
    uint32_t p2:8;
    uint32_t p3:8;

    void dump()const
    {
        kout << "GICR_IPRIORITYR0:"
        << ",p0 = " << p0
        << ",p1 = " << p1
        << ",p2 = " << p2
        << ",p3 = " << p3
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICR_IPRIORITYR0 readRegGICR_IPRIORITYR0() { return *reinterpret_cast<RegGICR_IPRIORITYR0*>((((0x080A0000) + 1024*64) + 0x400 + 4*(0)));} __attribute__((always_inline)) inline void writeRegGICR_IPRIORITYR0(RegGICR_IPRIORITYR0 val) { *reinterpret_cast<RegGICR_IPRIORITYR0*>((((0x080A0000) + 1024*64) + 0x400 + 4*(0)))=val;}


class RegGICR_IPRIORITYR1{
public:
    uint32_t p4:8;
    uint32_t p5:8;
    uint32_t p6:8;
    uint32_t p7:8;

    void dump()const
    {
        kout << "GICR_IPRIORITYR1:"
        << ",p4 = " << p4
        << ",p5 = " << p5
        << ",p6 = " << p6
        << ",p7 = " << p7
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICR_IPRIORITYR1 readRegGICR_IPRIORITYR1() { return *reinterpret_cast<RegGICR_IPRIORITYR1*>((((0x080A0000) + 1024*64) + 0x400 + 4*(1)));} __attribute__((always_inline)) inline void writeRegGICR_IPRIORITYR1(RegGICR_IPRIORITYR1 val) { *reinterpret_cast<RegGICR_IPRIORITYR1*>((((0x080A0000) + 1024*64) + 0x400 + 4*(1)))=val;}


class RegGICR_IPRIORITYR2{
public:
    uint32_t p8:8;
    uint32_t p9:8;
    uint32_t p10:8;
    uint32_t p11:8;

    void dump()const
    {
        kout << "GICR_IPRIORITYR2:"
        << ",p8 = " << p8
        << ",p9 = " << p9
        << ",p10 = " << p10
        << ",p11 = " << p11
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICR_IPRIORITYR2 readRegGICR_IPRIORITYR2() { return *reinterpret_cast<RegGICR_IPRIORITYR2*>((((0x080A0000) + 1024*64) + 0x400 + 4*(2)));} __attribute__((always_inline)) inline void writeRegGICR_IPRIORITYR2(RegGICR_IPRIORITYR2 val) { *reinterpret_cast<RegGICR_IPRIORITYR2*>((((0x080A0000) + 1024*64) + 0x400 + 4*(2)))=val;}


class RegGICR_IPRIORITYR3{
public:
    uint32_t p12:8;
    uint32_t p13:8;
    uint32_t p14:8;
    uint32_t p15:8;

    void dump()const
    {
        kout << "GICR_IPRIORITYR3:"
        << ",p12 = " << p12
        << ",p13 = " << p13
        << ",p14 = " << p14
        << ",p15 = " << p15
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICR_IPRIORITYR3 readRegGICR_IPRIORITYR3() { return *reinterpret_cast<RegGICR_IPRIORITYR3*>((((0x080A0000) + 1024*64) + 0x400 + 4*(3)));} __attribute__((always_inline)) inline void writeRegGICR_IPRIORITYR3(RegGICR_IPRIORITYR3 val) { *reinterpret_cast<RegGICR_IPRIORITYR3*>((((0x080A0000) + 1024*64) + 0x400 + 4*(3)))=val;}


class RegGICR_IPRIORITYR4{
public:
    uint32_t p16:8;
    uint32_t p17:8;
    uint32_t p18:8;
    uint32_t p19:8;

    void dump()const
    {
        kout << "GICR_IPRIORITYR4:"
        << ",p16 = " << p16
        << ",p17 = " << p17
        << ",p18 = " << p18
        << ",p19 = " << p19
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICR_IPRIORITYR4 readRegGICR_IPRIORITYR4() { return *reinterpret_cast<RegGICR_IPRIORITYR4*>((((0x080A0000) + 1024*64) + 0x400 + 4*(4)));} __attribute__((always_inline)) inline void writeRegGICR_IPRIORITYR4(RegGICR_IPRIORITYR4 val) { *reinterpret_cast<RegGICR_IPRIORITYR4*>((((0x080A0000) + 1024*64) + 0x400 + 4*(4)))=val;}


class RegGICR_IPRIORITYR5{
public:
    uint32_t p20:8;
    uint32_t p21:8;
    uint32_t p22:8;
    uint32_t p23:8;

    void dump()const
    {
        kout << "GICR_IPRIORITYR5:"
        << ",p20 = " << p20
        << ",p21 = " << p21
        << ",p22 = " << p22
        << ",p23 = " << p23
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICR_IPRIORITYR5 readRegGICR_IPRIORITYR5() { return *reinterpret_cast<RegGICR_IPRIORITYR5*>((((0x080A0000) + 1024*64) + 0x400 + 4*(5)));} __attribute__((always_inline)) inline void writeRegGICR_IPRIORITYR5(RegGICR_IPRIORITYR5 val) { *reinterpret_cast<RegGICR_IPRIORITYR5*>((((0x080A0000) + 1024*64) + 0x400 + 4*(5)))=val;}


class RegGICR_IPRIORITYR6{
public:
    uint32_t p24:8;
    uint32_t p25:8;
    uint32_t p26:8;
    uint32_t p27:8;

    void dump()const
    {
        kout << "GICR_IPRIORITYR6:"
        << ",p24 = " << p24
        << ",p25 = " << p25
        << ",p26 = " << p26
        << ",p27 = " << p27
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICR_IPRIORITYR6 readRegGICR_IPRIORITYR6() { return *reinterpret_cast<RegGICR_IPRIORITYR6*>((((0x080A0000) + 1024*64) + 0x400 + 4*(6)));} __attribute__((always_inline)) inline void writeRegGICR_IPRIORITYR6(RegGICR_IPRIORITYR6 val) { *reinterpret_cast<RegGICR_IPRIORITYR6*>((((0x080A0000) + 1024*64) + 0x400 + 4*(6)))=val;}


class RegGICR_IPRIORITYR7{
public:
    uint32_t p28:8;
    uint32_t p29:8;
    uint32_t p30:8;
    uint32_t p31:8;

    void dump()const
    {
        kout << "GICR_IPRIORITYR7:"
        << ",p28 = " << p28
        << ",p29 = " << p29
        << ",p30 = " << p30
        << ",p31 = " << p31
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICR_IPRIORITYR7 readRegGICR_IPRIORITYR7() { return *reinterpret_cast<RegGICR_IPRIORITYR7*>((((0x080A0000) + 1024*64) + 0x400 + 4*(7)));} __attribute__((always_inline)) inline void writeRegGICR_IPRIORITYR7(RegGICR_IPRIORITYR7 val) { *reinterpret_cast<RegGICR_IPRIORITYR7*>((((0x080A0000) + 1024*64) + 0x400 + 4*(7)))=val;}


class RegGICD_ISENABLER0{
public:
    uint32_t Enables:32;

    void dump()const
    {
        kout << "GICD_ISENABLER0:"
        << ",Enables = " << Hex(Enables)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISENABLER0 readRegGICD_ISENABLER0() { return *reinterpret_cast<RegGICD_ISENABLER0*>((0x08000000 + 0x100 + 4*(0)));} __attribute__((always_inline)) inline void writeRegGICD_ISENABLER0(RegGICD_ISENABLER0 val) { *reinterpret_cast<RegGICD_ISENABLER0*>((0x08000000 + 0x100 + 4*(0)))=val;}


class RegGICD_ISENABLER1{
public:
    uint32_t Enables:32;

    void dump()const
    {
        kout << "GICD_ISENABLER1:"
        << ",Enables = " << Hex(Enables)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISENABLER1 readRegGICD_ISENABLER1() { return *reinterpret_cast<RegGICD_ISENABLER1*>((0x08000000 + 0x100 + 4*(1)));} __attribute__((always_inline)) inline void writeRegGICD_ISENABLER1(RegGICD_ISENABLER1 val) { *reinterpret_cast<RegGICD_ISENABLER1*>((0x08000000 + 0x100 + 4*(1)))=val;}


class RegGICD_ISENABLER2{
public:
    uint32_t Enables:32;

    void dump()const
    {
        kout << "GICD_ISENABLER2:"
        << ",Enables = " << Hex(Enables)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISENABLER2 readRegGICD_ISENABLER2() { return *reinterpret_cast<RegGICD_ISENABLER2*>((0x08000000 + 0x100 + 4*(2)));} __attribute__((always_inline)) inline void writeRegGICD_ISENABLER2(RegGICD_ISENABLER2 val) { *reinterpret_cast<RegGICD_ISENABLER2*>((0x08000000 + 0x100 + 4*(2)))=val;}


class RegGICD_ISENABLER3{
public:
    uint32_t Enables:32;

    void dump()const
    {
        kout << "GICD_ISENABLER3:"
        << ",Enables = " << Hex(Enables)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISENABLER3 readRegGICD_ISENABLER3() { return *reinterpret_cast<RegGICD_ISENABLER3*>((0x08000000 + 0x100 + 4*(3)));} __attribute__((always_inline)) inline void writeRegGICD_ISENABLER3(RegGICD_ISENABLER3 val) { *reinterpret_cast<RegGICD_ISENABLER3*>((0x08000000 + 0x100 + 4*(3)))=val;}


class RegGICD_ISENABLER4{
public:
    uint32_t Enables:32;

    void dump()const
    {
        kout << "GICD_ISENABLER4:"
        << ",Enables = " << Hex(Enables)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISENABLER4 readRegGICD_ISENABLER4() { return *reinterpret_cast<RegGICD_ISENABLER4*>((0x08000000 + 0x100 + 4*(4)));} __attribute__((always_inline)) inline void writeRegGICD_ISENABLER4(RegGICD_ISENABLER4 val) { *reinterpret_cast<RegGICD_ISENABLER4*>((0x08000000 + 0x100 + 4*(4)))=val;}


class RegGICD_ISENABLER5{
public:
    uint32_t Enables:32;

    void dump()const
    {
        kout << "GICD_ISENABLER5:"
        << ",Enables = " << Hex(Enables)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISENABLER5 readRegGICD_ISENABLER5() { return *reinterpret_cast<RegGICD_ISENABLER5*>((0x08000000 + 0x100 + 4*(5)));} __attribute__((always_inline)) inline void writeRegGICD_ISENABLER5(RegGICD_ISENABLER5 val) { *reinterpret_cast<RegGICD_ISENABLER5*>((0x08000000 + 0x100 + 4*(5)))=val;}


class RegGICD_ISENABLER6{
public:
    uint32_t Enables:32;

    void dump()const
    {
        kout << "GICD_ISENABLER6:"
        << ",Enables = " << Hex(Enables)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISENABLER6 readRegGICD_ISENABLER6() { return *reinterpret_cast<RegGICD_ISENABLER6*>((0x08000000 + 0x100 + 4*(6)));} __attribute__((always_inline)) inline void writeRegGICD_ISENABLER6(RegGICD_ISENABLER6 val) { *reinterpret_cast<RegGICD_ISENABLER6*>((0x08000000 + 0x100 + 4*(6)))=val;}


class RegGICD_ISENABLER7{
public:
    uint32_t Enables:32;

    void dump()const
    {
        kout << "GICD_ISENABLER7:"
        << ",Enables = " << Hex(Enables)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISENABLER7 readRegGICD_ISENABLER7() { return *reinterpret_cast<RegGICD_ISENABLER7*>((0x08000000 + 0x100 + 4*(7)));} __attribute__((always_inline)) inline void writeRegGICD_ISENABLER7(RegGICD_ISENABLER7 val) { *reinterpret_cast<RegGICD_ISENABLER7*>((0x08000000 + 0x100 + 4*(7)))=val;}


class RegGICD_ISENABLER8{
public:
    uint32_t Enables:32;

    void dump()const
    {
        kout << "GICD_ISENABLER8:"
        << ",Enables = " << Hex(Enables)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISENABLER8 readRegGICD_ISENABLER8() { return *reinterpret_cast<RegGICD_ISENABLER8*>((0x08000000 + 0x100 + 4*(8)));} __attribute__((always_inline)) inline void writeRegGICD_ISENABLER8(RegGICD_ISENABLER8 val) { *reinterpret_cast<RegGICD_ISENABLER8*>((0x08000000 + 0x100 + 4*(8)))=val;}


class RegGICD_ISENABLER9{
public:
    uint32_t Enables:32;

    void dump()const
    {
        kout << "GICD_ISENABLER9:"
        << ",Enables = " << Hex(Enables)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISENABLER9 readRegGICD_ISENABLER9() { return *reinterpret_cast<RegGICD_ISENABLER9*>((0x08000000 + 0x100 + 4*(9)));} __attribute__((always_inline)) inline void writeRegGICD_ISENABLER9(RegGICD_ISENABLER9 val) { *reinterpret_cast<RegGICD_ISENABLER9*>((0x08000000 + 0x100 + 4*(9)))=val;}


class RegGICD_ISENABLER10{
public:
    uint32_t Enables:32;

    void dump()const
    {
        kout << "GICD_ISENABLER10:"
        << ",Enables = " << Hex(Enables)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISENABLER10 readRegGICD_ISENABLER10() { return *reinterpret_cast<RegGICD_ISENABLER10*>((0x08000000 + 0x100 + 4*(10)));} __attribute__((always_inline)) inline void writeRegGICD_ISENABLER10(RegGICD_ISENABLER10 val) { *reinterpret_cast<RegGICD_ISENABLER10*>((0x08000000 + 0x100 + 4*(10)))=val;}


class RegGICD_ISENABLER11{
public:
    uint32_t Enables:32;

    void dump()const
    {
        kout << "GICD_ISENABLER11:"
        << ",Enables = " << Hex(Enables)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISENABLER11 readRegGICD_ISENABLER11() { return *reinterpret_cast<RegGICD_ISENABLER11*>((0x08000000 + 0x100 + 4*(11)));} __attribute__((always_inline)) inline void writeRegGICD_ISENABLER11(RegGICD_ISENABLER11 val) { *reinterpret_cast<RegGICD_ISENABLER11*>((0x08000000 + 0x100 + 4*(11)))=val;}


class RegGICD_ISENABLER12{
public:
    uint32_t Enables:32;

    void dump()const
    {
        kout << "GICD_ISENABLER12:"
        << ",Enables = " << Hex(Enables)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISENABLER12 readRegGICD_ISENABLER12() { return *reinterpret_cast<RegGICD_ISENABLER12*>((0x08000000 + 0x100 + 4*(12)));} __attribute__((always_inline)) inline void writeRegGICD_ISENABLER12(RegGICD_ISENABLER12 val) { *reinterpret_cast<RegGICD_ISENABLER12*>((0x08000000 + 0x100 + 4*(12)))=val;}


class RegGICD_ISENABLER13{
public:
    uint32_t Enables:32;

    void dump()const
    {
        kout << "GICD_ISENABLER13:"
        << ",Enables = " << Hex(Enables)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISENABLER13 readRegGICD_ISENABLER13() { return *reinterpret_cast<RegGICD_ISENABLER13*>((0x08000000 + 0x100 + 4*(13)));} __attribute__((always_inline)) inline void writeRegGICD_ISENABLER13(RegGICD_ISENABLER13 val) { *reinterpret_cast<RegGICD_ISENABLER13*>((0x08000000 + 0x100 + 4*(13)))=val;}


class RegGICD_ISENABLER14{
public:
    uint32_t Enables:32;

    void dump()const
    {
        kout << "GICD_ISENABLER14:"
        << ",Enables = " << Hex(Enables)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISENABLER14 readRegGICD_ISENABLER14() { return *reinterpret_cast<RegGICD_ISENABLER14*>((0x08000000 + 0x100 + 4*(14)));} __attribute__((always_inline)) inline void writeRegGICD_ISENABLER14(RegGICD_ISENABLER14 val) { *reinterpret_cast<RegGICD_ISENABLER14*>((0x08000000 + 0x100 + 4*(14)))=val;}


class RegGICD_ISENABLER15{
public:
    uint32_t Enables:32;

    void dump()const
    {
        kout << "GICD_ISENABLER15:"
        << ",Enables = " << Hex(Enables)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISENABLER15 readRegGICD_ISENABLER15() { return *reinterpret_cast<RegGICD_ISENABLER15*>((0x08000000 + 0x100 + 4*(15)));} __attribute__((always_inline)) inline void writeRegGICD_ISENABLER15(RegGICD_ISENABLER15 val) { *reinterpret_cast<RegGICD_ISENABLER15*>((0x08000000 + 0x100 + 4*(15)))=val;}


class RegGICD_ISENABLER16{
public:
    uint32_t Enables:32;

    void dump()const
    {
        kout << "GICD_ISENABLER16:"
        << ",Enables = " << Hex(Enables)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISENABLER16 readRegGICD_ISENABLER16() { return *reinterpret_cast<RegGICD_ISENABLER16*>((0x08000000 + 0x100 + 4*(16)));} __attribute__((always_inline)) inline void writeRegGICD_ISENABLER16(RegGICD_ISENABLER16 val) { *reinterpret_cast<RegGICD_ISENABLER16*>((0x08000000 + 0x100 + 4*(16)))=val;}


class RegGICD_ISENABLER17{
public:
    uint32_t Enables:32;

    void dump()const
    {
        kout << "GICD_ISENABLER17:"
        << ",Enables = " << Hex(Enables)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISENABLER17 readRegGICD_ISENABLER17() { return *reinterpret_cast<RegGICD_ISENABLER17*>((0x08000000 + 0x100 + 4*(17)));} __attribute__((always_inline)) inline void writeRegGICD_ISENABLER17(RegGICD_ISENABLER17 val) { *reinterpret_cast<RegGICD_ISENABLER17*>((0x08000000 + 0x100 + 4*(17)))=val;}


class RegGICD_ISENABLER18{
public:
    uint32_t Enables:32;

    void dump()const
    {
        kout << "GICD_ISENABLER18:"
        << ",Enables = " << Hex(Enables)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISENABLER18 readRegGICD_ISENABLER18() { return *reinterpret_cast<RegGICD_ISENABLER18*>((0x08000000 + 0x100 + 4*(18)));} __attribute__((always_inline)) inline void writeRegGICD_ISENABLER18(RegGICD_ISENABLER18 val) { *reinterpret_cast<RegGICD_ISENABLER18*>((0x08000000 + 0x100 + 4*(18)))=val;}


class RegGICD_ISENABLER19{
public:
    uint32_t Enables:32;

    void dump()const
    {
        kout << "GICD_ISENABLER19:"
        << ",Enables = " << Hex(Enables)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISENABLER19 readRegGICD_ISENABLER19() { return *reinterpret_cast<RegGICD_ISENABLER19*>((0x08000000 + 0x100 + 4*(19)));} __attribute__((always_inline)) inline void writeRegGICD_ISENABLER19(RegGICD_ISENABLER19 val) { *reinterpret_cast<RegGICD_ISENABLER19*>((0x08000000 + 0x100 + 4*(19)))=val;}


class RegGICD_ISENABLER20{
public:
    uint32_t Enables:32;

    void dump()const
    {
        kout << "GICD_ISENABLER20:"
        << ",Enables = " << Hex(Enables)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISENABLER20 readRegGICD_ISENABLER20() { return *reinterpret_cast<RegGICD_ISENABLER20*>((0x08000000 + 0x100 + 4*(20)));} __attribute__((always_inline)) inline void writeRegGICD_ISENABLER20(RegGICD_ISENABLER20 val) { *reinterpret_cast<RegGICD_ISENABLER20*>((0x08000000 + 0x100 + 4*(20)))=val;}


class RegGICD_ISENABLER21{
public:
    uint32_t Enables:32;

    void dump()const
    {
        kout << "GICD_ISENABLER21:"
        << ",Enables = " << Hex(Enables)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISENABLER21 readRegGICD_ISENABLER21() { return *reinterpret_cast<RegGICD_ISENABLER21*>((0x08000000 + 0x100 + 4*(21)));} __attribute__((always_inline)) inline void writeRegGICD_ISENABLER21(RegGICD_ISENABLER21 val) { *reinterpret_cast<RegGICD_ISENABLER21*>((0x08000000 + 0x100 + 4*(21)))=val;}


class RegGICD_ISENABLER22{
public:
    uint32_t Enables:32;

    void dump()const
    {
        kout << "GICD_ISENABLER22:"
        << ",Enables = " << Hex(Enables)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISENABLER22 readRegGICD_ISENABLER22() { return *reinterpret_cast<RegGICD_ISENABLER22*>((0x08000000 + 0x100 + 4*(22)));} __attribute__((always_inline)) inline void writeRegGICD_ISENABLER22(RegGICD_ISENABLER22 val) { *reinterpret_cast<RegGICD_ISENABLER22*>((0x08000000 + 0x100 + 4*(22)))=val;}


class RegGICD_ISENABLER23{
public:
    uint32_t Enables:32;

    void dump()const
    {
        kout << "GICD_ISENABLER23:"
        << ",Enables = " << Hex(Enables)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISENABLER23 readRegGICD_ISENABLER23() { return *reinterpret_cast<RegGICD_ISENABLER23*>((0x08000000 + 0x100 + 4*(23)));} __attribute__((always_inline)) inline void writeRegGICD_ISENABLER23(RegGICD_ISENABLER23 val) { *reinterpret_cast<RegGICD_ISENABLER23*>((0x08000000 + 0x100 + 4*(23)))=val;}


class RegGICD_ISENABLER24{
public:
    uint32_t Enables:32;

    void dump()const
    {
        kout << "GICD_ISENABLER24:"
        << ",Enables = " << Hex(Enables)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISENABLER24 readRegGICD_ISENABLER24() { return *reinterpret_cast<RegGICD_ISENABLER24*>((0x08000000 + 0x100 + 4*(24)));} __attribute__((always_inline)) inline void writeRegGICD_ISENABLER24(RegGICD_ISENABLER24 val) { *reinterpret_cast<RegGICD_ISENABLER24*>((0x08000000 + 0x100 + 4*(24)))=val;}


class RegGICD_ISENABLER25{
public:
    uint32_t Enables:32;

    void dump()const
    {
        kout << "GICD_ISENABLER25:"
        << ",Enables = " << Hex(Enables)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISENABLER25 readRegGICD_ISENABLER25() { return *reinterpret_cast<RegGICD_ISENABLER25*>((0x08000000 + 0x100 + 4*(25)));} __attribute__((always_inline)) inline void writeRegGICD_ISENABLER25(RegGICD_ISENABLER25 val) { *reinterpret_cast<RegGICD_ISENABLER25*>((0x08000000 + 0x100 + 4*(25)))=val;}


class RegGICD_ISENABLER26{
public:
    uint32_t Enables:32;

    void dump()const
    {
        kout << "GICD_ISENABLER26:"
        << ",Enables = " << Hex(Enables)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISENABLER26 readRegGICD_ISENABLER26() { return *reinterpret_cast<RegGICD_ISENABLER26*>((0x08000000 + 0x100 + 4*(26)));} __attribute__((always_inline)) inline void writeRegGICD_ISENABLER26(RegGICD_ISENABLER26 val) { *reinterpret_cast<RegGICD_ISENABLER26*>((0x08000000 + 0x100 + 4*(26)))=val;}


class RegGICD_ISENABLER27{
public:
    uint32_t Enables:32;

    void dump()const
    {
        kout << "GICD_ISENABLER27:"
        << ",Enables = " << Hex(Enables)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISENABLER27 readRegGICD_ISENABLER27() { return *reinterpret_cast<RegGICD_ISENABLER27*>((0x08000000 + 0x100 + 4*(27)));} __attribute__((always_inline)) inline void writeRegGICD_ISENABLER27(RegGICD_ISENABLER27 val) { *reinterpret_cast<RegGICD_ISENABLER27*>((0x08000000 + 0x100 + 4*(27)))=val;}


class RegGICD_ISENABLER28{
public:
    uint32_t Enables:32;

    void dump()const
    {
        kout << "GICD_ISENABLER28:"
        << ",Enables = " << Hex(Enables)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISENABLER28 readRegGICD_ISENABLER28() { return *reinterpret_cast<RegGICD_ISENABLER28*>((0x08000000 + 0x100 + 4*(28)));} __attribute__((always_inline)) inline void writeRegGICD_ISENABLER28(RegGICD_ISENABLER28 val) { *reinterpret_cast<RegGICD_ISENABLER28*>((0x08000000 + 0x100 + 4*(28)))=val;}


class RegGICD_ISENABLER29{
public:
    uint32_t Enables:32;

    void dump()const
    {
        kout << "GICD_ISENABLER29:"
        << ",Enables = " << Hex(Enables)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISENABLER29 readRegGICD_ISENABLER29() { return *reinterpret_cast<RegGICD_ISENABLER29*>((0x08000000 + 0x100 + 4*(29)));} __attribute__((always_inline)) inline void writeRegGICD_ISENABLER29(RegGICD_ISENABLER29 val) { *reinterpret_cast<RegGICD_ISENABLER29*>((0x08000000 + 0x100 + 4*(29)))=val;}


class RegGICD_ISENABLER30{
public:
    uint32_t Enables:32;

    void dump()const
    {
        kout << "GICD_ISENABLER30:"
        << ",Enables = " << Hex(Enables)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISENABLER30 readRegGICD_ISENABLER30() { return *reinterpret_cast<RegGICD_ISENABLER30*>((0x08000000 + 0x100 + 4*(30)));} __attribute__((always_inline)) inline void writeRegGICD_ISENABLER30(RegGICD_ISENABLER30 val) { *reinterpret_cast<RegGICD_ISENABLER30*>((0x08000000 + 0x100 + 4*(30)))=val;}


class RegGICD_ISENABLER31{
public:
    uint32_t Enables:32;

    void dump()const
    {
        kout << "GICD_ISENABLER31:"
        << ",Enables = " << Hex(Enables)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISENABLER31 readRegGICD_ISENABLER31() { return *reinterpret_cast<RegGICD_ISENABLER31*>((0x08000000 + 0x100 + 4*(31)));} __attribute__((always_inline)) inline void writeRegGICD_ISENABLER31(RegGICD_ISENABLER31 val) { *reinterpret_cast<RegGICD_ISENABLER31*>((0x08000000 + 0x100 + 4*(31)))=val;}


class RegGICD_ISPENDR0{
public:
    uint32_t Pendings:32;

    void dump()const
    {
        kout << "GICD_ISPENDR0:"
        << ",Pendings = " << Hex(Pendings)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISPENDR0 readRegGICD_ISPENDR0() { return *reinterpret_cast<RegGICD_ISPENDR0*>((0x08000000 + 0x200 + 4*(0)));} __attribute__((always_inline)) inline void writeRegGICD_ISPENDR0(RegGICD_ISPENDR0 val) { *reinterpret_cast<RegGICD_ISPENDR0*>((0x08000000 + 0x200 + 4*(0)))=val;}


class RegGICD_ISPENDR1{
public:
    uint32_t Pendings:32;

    void dump()const
    {
        kout << "GICD_ISPENDR1:"
        << ",Pendings = " << Hex(Pendings)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISPENDR1 readRegGICD_ISPENDR1() { return *reinterpret_cast<RegGICD_ISPENDR1*>((0x08000000 + 0x200 + 4*(1)));} __attribute__((always_inline)) inline void writeRegGICD_ISPENDR1(RegGICD_ISPENDR1 val) { *reinterpret_cast<RegGICD_ISPENDR1*>((0x08000000 + 0x200 + 4*(1)))=val;}


class RegGICD_ISPENDR2{
public:
    uint32_t Pendings:32;

    void dump()const
    {
        kout << "GICD_ISPENDR2:"
        << ",Pendings = " << Hex(Pendings)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISPENDR2 readRegGICD_ISPENDR2() { return *reinterpret_cast<RegGICD_ISPENDR2*>((0x08000000 + 0x200 + 4*(2)));} __attribute__((always_inline)) inline void writeRegGICD_ISPENDR2(RegGICD_ISPENDR2 val) { *reinterpret_cast<RegGICD_ISPENDR2*>((0x08000000 + 0x200 + 4*(2)))=val;}


class RegGICD_ISPENDR3{
public:
    uint32_t Pendings:32;

    void dump()const
    {
        kout << "GICD_ISPENDR3:"
        << ",Pendings = " << Hex(Pendings)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISPENDR3 readRegGICD_ISPENDR3() { return *reinterpret_cast<RegGICD_ISPENDR3*>((0x08000000 + 0x200 + 4*(3)));} __attribute__((always_inline)) inline void writeRegGICD_ISPENDR3(RegGICD_ISPENDR3 val) { *reinterpret_cast<RegGICD_ISPENDR3*>((0x08000000 + 0x200 + 4*(3)))=val;}


class RegGICD_ISPENDR4{
public:
    uint32_t Pendings:32;

    void dump()const
    {
        kout << "GICD_ISPENDR4:"
        << ",Pendings = " << Hex(Pendings)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISPENDR4 readRegGICD_ISPENDR4() { return *reinterpret_cast<RegGICD_ISPENDR4*>((0x08000000 + 0x200 + 4*(4)));} __attribute__((always_inline)) inline void writeRegGICD_ISPENDR4(RegGICD_ISPENDR4 val) { *reinterpret_cast<RegGICD_ISPENDR4*>((0x08000000 + 0x200 + 4*(4)))=val;}


class RegGICD_ISPENDR5{
public:
    uint32_t Pendings:32;

    void dump()const
    {
        kout << "GICD_ISPENDR5:"
        << ",Pendings = " << Hex(Pendings)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISPENDR5 readRegGICD_ISPENDR5() { return *reinterpret_cast<RegGICD_ISPENDR5*>((0x08000000 + 0x200 + 4*(5)));} __attribute__((always_inline)) inline void writeRegGICD_ISPENDR5(RegGICD_ISPENDR5 val) { *reinterpret_cast<RegGICD_ISPENDR5*>((0x08000000 + 0x200 + 4*(5)))=val;}


class RegGICD_ISPENDR6{
public:
    uint32_t Pendings:32;

    void dump()const
    {
        kout << "GICD_ISPENDR6:"
        << ",Pendings = " << Hex(Pendings)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISPENDR6 readRegGICD_ISPENDR6() { return *reinterpret_cast<RegGICD_ISPENDR6*>((0x08000000 + 0x200 + 4*(6)));} __attribute__((always_inline)) inline void writeRegGICD_ISPENDR6(RegGICD_ISPENDR6 val) { *reinterpret_cast<RegGICD_ISPENDR6*>((0x08000000 + 0x200 + 4*(6)))=val;}


class RegGICD_ISPENDR7{
public:
    uint32_t Pendings:32;

    void dump()const
    {
        kout << "GICD_ISPENDR7:"
        << ",Pendings = " << Hex(Pendings)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISPENDR7 readRegGICD_ISPENDR7() { return *reinterpret_cast<RegGICD_ISPENDR7*>((0x08000000 + 0x200 + 4*(7)));} __attribute__((always_inline)) inline void writeRegGICD_ISPENDR7(RegGICD_ISPENDR7 val) { *reinterpret_cast<RegGICD_ISPENDR7*>((0x08000000 + 0x200 + 4*(7)))=val;}


class RegGICD_ISPENDR8{
public:
    uint32_t Pendings:32;

    void dump()const
    {
        kout << "GICD_ISPENDR8:"
        << ",Pendings = " << Hex(Pendings)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISPENDR8 readRegGICD_ISPENDR8() { return *reinterpret_cast<RegGICD_ISPENDR8*>((0x08000000 + 0x200 + 4*(8)));} __attribute__((always_inline)) inline void writeRegGICD_ISPENDR8(RegGICD_ISPENDR8 val) { *reinterpret_cast<RegGICD_ISPENDR8*>((0x08000000 + 0x200 + 4*(8)))=val;}


class RegGICD_ISPENDR9{
public:
    uint32_t Pendings:32;

    void dump()const
    {
        kout << "GICD_ISPENDR9:"
        << ",Pendings = " << Hex(Pendings)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISPENDR9 readRegGICD_ISPENDR9() { return *reinterpret_cast<RegGICD_ISPENDR9*>((0x08000000 + 0x200 + 4*(9)));} __attribute__((always_inline)) inline void writeRegGICD_ISPENDR9(RegGICD_ISPENDR9 val) { *reinterpret_cast<RegGICD_ISPENDR9*>((0x08000000 + 0x200 + 4*(9)))=val;}


class RegGICD_ISPENDR10{
public:
    uint32_t Pendings:32;

    void dump()const
    {
        kout << "GICD_ISPENDR10:"
        << ",Pendings = " << Hex(Pendings)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISPENDR10 readRegGICD_ISPENDR10() { return *reinterpret_cast<RegGICD_ISPENDR10*>((0x08000000 + 0x200 + 4*(10)));} __attribute__((always_inline)) inline void writeRegGICD_ISPENDR10(RegGICD_ISPENDR10 val) { *reinterpret_cast<RegGICD_ISPENDR10*>((0x08000000 + 0x200 + 4*(10)))=val;}


class RegGICD_ISPENDR11{
public:
    uint32_t Pendings:32;

    void dump()const
    {
        kout << "GICD_ISPENDR11:"
        << ",Pendings = " << Hex(Pendings)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISPENDR11 readRegGICD_ISPENDR11() { return *reinterpret_cast<RegGICD_ISPENDR11*>((0x08000000 + 0x200 + 4*(11)));} __attribute__((always_inline)) inline void writeRegGICD_ISPENDR11(RegGICD_ISPENDR11 val) { *reinterpret_cast<RegGICD_ISPENDR11*>((0x08000000 + 0x200 + 4*(11)))=val;}


class RegGICD_ISPENDR12{
public:
    uint32_t Pendings:32;

    void dump()const
    {
        kout << "GICD_ISPENDR12:"
        << ",Pendings = " << Hex(Pendings)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISPENDR12 readRegGICD_ISPENDR12() { return *reinterpret_cast<RegGICD_ISPENDR12*>((0x08000000 + 0x200 + 4*(12)));} __attribute__((always_inline)) inline void writeRegGICD_ISPENDR12(RegGICD_ISPENDR12 val) { *reinterpret_cast<RegGICD_ISPENDR12*>((0x08000000 + 0x200 + 4*(12)))=val;}


class RegGICD_ISPENDR13{
public:
    uint32_t Pendings:32;

    void dump()const
    {
        kout << "GICD_ISPENDR13:"
        << ",Pendings = " << Hex(Pendings)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISPENDR13 readRegGICD_ISPENDR13() { return *reinterpret_cast<RegGICD_ISPENDR13*>((0x08000000 + 0x200 + 4*(13)));} __attribute__((always_inline)) inline void writeRegGICD_ISPENDR13(RegGICD_ISPENDR13 val) { *reinterpret_cast<RegGICD_ISPENDR13*>((0x08000000 + 0x200 + 4*(13)))=val;}


class RegGICD_ISPENDR14{
public:
    uint32_t Pendings:32;

    void dump()const
    {
        kout << "GICD_ISPENDR14:"
        << ",Pendings = " << Hex(Pendings)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISPENDR14 readRegGICD_ISPENDR14() { return *reinterpret_cast<RegGICD_ISPENDR14*>((0x08000000 + 0x200 + 4*(14)));} __attribute__((always_inline)) inline void writeRegGICD_ISPENDR14(RegGICD_ISPENDR14 val) { *reinterpret_cast<RegGICD_ISPENDR14*>((0x08000000 + 0x200 + 4*(14)))=val;}


class RegGICD_ISPENDR15{
public:
    uint32_t Pendings:32;

    void dump()const
    {
        kout << "GICD_ISPENDR15:"
        << ",Pendings = " << Hex(Pendings)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISPENDR15 readRegGICD_ISPENDR15() { return *reinterpret_cast<RegGICD_ISPENDR15*>((0x08000000 + 0x200 + 4*(15)));} __attribute__((always_inline)) inline void writeRegGICD_ISPENDR15(RegGICD_ISPENDR15 val) { *reinterpret_cast<RegGICD_ISPENDR15*>((0x08000000 + 0x200 + 4*(15)))=val;}


class RegGICD_ISPENDR16{
public:
    uint32_t Pendings:32;

    void dump()const
    {
        kout << "GICD_ISPENDR16:"
        << ",Pendings = " << Hex(Pendings)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISPENDR16 readRegGICD_ISPENDR16() { return *reinterpret_cast<RegGICD_ISPENDR16*>((0x08000000 + 0x200 + 4*(16)));} __attribute__((always_inline)) inline void writeRegGICD_ISPENDR16(RegGICD_ISPENDR16 val) { *reinterpret_cast<RegGICD_ISPENDR16*>((0x08000000 + 0x200 + 4*(16)))=val;}


class RegGICD_ISPENDR17{
public:
    uint32_t Pendings:32;

    void dump()const
    {
        kout << "GICD_ISPENDR17:"
        << ",Pendings = " << Hex(Pendings)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISPENDR17 readRegGICD_ISPENDR17() { return *reinterpret_cast<RegGICD_ISPENDR17*>((0x08000000 + 0x200 + 4*(17)));} __attribute__((always_inline)) inline void writeRegGICD_ISPENDR17(RegGICD_ISPENDR17 val) { *reinterpret_cast<RegGICD_ISPENDR17*>((0x08000000 + 0x200 + 4*(17)))=val;}


class RegGICD_ISPENDR18{
public:
    uint32_t Pendings:32;

    void dump()const
    {
        kout << "GICD_ISPENDR18:"
        << ",Pendings = " << Hex(Pendings)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISPENDR18 readRegGICD_ISPENDR18() { return *reinterpret_cast<RegGICD_ISPENDR18*>((0x08000000 + 0x200 + 4*(18)));} __attribute__((always_inline)) inline void writeRegGICD_ISPENDR18(RegGICD_ISPENDR18 val) { *reinterpret_cast<RegGICD_ISPENDR18*>((0x08000000 + 0x200 + 4*(18)))=val;}


class RegGICD_ISPENDR19{
public:
    uint32_t Pendings:32;

    void dump()const
    {
        kout << "GICD_ISPENDR19:"
        << ",Pendings = " << Hex(Pendings)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISPENDR19 readRegGICD_ISPENDR19() { return *reinterpret_cast<RegGICD_ISPENDR19*>((0x08000000 + 0x200 + 4*(19)));} __attribute__((always_inline)) inline void writeRegGICD_ISPENDR19(RegGICD_ISPENDR19 val) { *reinterpret_cast<RegGICD_ISPENDR19*>((0x08000000 + 0x200 + 4*(19)))=val;}


class RegGICD_ISPENDR20{
public:
    uint32_t Pendings:32;

    void dump()const
    {
        kout << "GICD_ISPENDR20:"
        << ",Pendings = " << Hex(Pendings)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISPENDR20 readRegGICD_ISPENDR20() { return *reinterpret_cast<RegGICD_ISPENDR20*>((0x08000000 + 0x200 + 4*(20)));} __attribute__((always_inline)) inline void writeRegGICD_ISPENDR20(RegGICD_ISPENDR20 val) { *reinterpret_cast<RegGICD_ISPENDR20*>((0x08000000 + 0x200 + 4*(20)))=val;}


class RegGICD_ISPENDR21{
public:
    uint32_t Pendings:32;

    void dump()const
    {
        kout << "GICD_ISPENDR21:"
        << ",Pendings = " << Hex(Pendings)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISPENDR21 readRegGICD_ISPENDR21() { return *reinterpret_cast<RegGICD_ISPENDR21*>((0x08000000 + 0x200 + 4*(21)));} __attribute__((always_inline)) inline void writeRegGICD_ISPENDR21(RegGICD_ISPENDR21 val) { *reinterpret_cast<RegGICD_ISPENDR21*>((0x08000000 + 0x200 + 4*(21)))=val;}


class RegGICD_ISPENDR22{
public:
    uint32_t Pendings:32;

    void dump()const
    {
        kout << "GICD_ISPENDR22:"
        << ",Pendings = " << Hex(Pendings)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISPENDR22 readRegGICD_ISPENDR22() { return *reinterpret_cast<RegGICD_ISPENDR22*>((0x08000000 + 0x200 + 4*(22)));} __attribute__((always_inline)) inline void writeRegGICD_ISPENDR22(RegGICD_ISPENDR22 val) { *reinterpret_cast<RegGICD_ISPENDR22*>((0x08000000 + 0x200 + 4*(22)))=val;}


class RegGICD_ISPENDR23{
public:
    uint32_t Pendings:32;

    void dump()const
    {
        kout << "GICD_ISPENDR23:"
        << ",Pendings = " << Hex(Pendings)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISPENDR23 readRegGICD_ISPENDR23() { return *reinterpret_cast<RegGICD_ISPENDR23*>((0x08000000 + 0x200 + 4*(23)));} __attribute__((always_inline)) inline void writeRegGICD_ISPENDR23(RegGICD_ISPENDR23 val) { *reinterpret_cast<RegGICD_ISPENDR23*>((0x08000000 + 0x200 + 4*(23)))=val;}


class RegGICD_ISPENDR24{
public:
    uint32_t Pendings:32;

    void dump()const
    {
        kout << "GICD_ISPENDR24:"
        << ",Pendings = " << Hex(Pendings)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISPENDR24 readRegGICD_ISPENDR24() { return *reinterpret_cast<RegGICD_ISPENDR24*>((0x08000000 + 0x200 + 4*(24)));} __attribute__((always_inline)) inline void writeRegGICD_ISPENDR24(RegGICD_ISPENDR24 val) { *reinterpret_cast<RegGICD_ISPENDR24*>((0x08000000 + 0x200 + 4*(24)))=val;}


class RegGICD_ISPENDR25{
public:
    uint32_t Pendings:32;

    void dump()const
    {
        kout << "GICD_ISPENDR25:"
        << ",Pendings = " << Hex(Pendings)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISPENDR25 readRegGICD_ISPENDR25() { return *reinterpret_cast<RegGICD_ISPENDR25*>((0x08000000 + 0x200 + 4*(25)));} __attribute__((always_inline)) inline void writeRegGICD_ISPENDR25(RegGICD_ISPENDR25 val) { *reinterpret_cast<RegGICD_ISPENDR25*>((0x08000000 + 0x200 + 4*(25)))=val;}


class RegGICD_ISPENDR26{
public:
    uint32_t Pendings:32;

    void dump()const
    {
        kout << "GICD_ISPENDR26:"
        << ",Pendings = " << Hex(Pendings)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISPENDR26 readRegGICD_ISPENDR26() { return *reinterpret_cast<RegGICD_ISPENDR26*>((0x08000000 + 0x200 + 4*(26)));} __attribute__((always_inline)) inline void writeRegGICD_ISPENDR26(RegGICD_ISPENDR26 val) { *reinterpret_cast<RegGICD_ISPENDR26*>((0x08000000 + 0x200 + 4*(26)))=val;}


class RegGICD_ISPENDR27{
public:
    uint32_t Pendings:32;

    void dump()const
    {
        kout << "GICD_ISPENDR27:"
        << ",Pendings = " << Hex(Pendings)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISPENDR27 readRegGICD_ISPENDR27() { return *reinterpret_cast<RegGICD_ISPENDR27*>((0x08000000 + 0x200 + 4*(27)));} __attribute__((always_inline)) inline void writeRegGICD_ISPENDR27(RegGICD_ISPENDR27 val) { *reinterpret_cast<RegGICD_ISPENDR27*>((0x08000000 + 0x200 + 4*(27)))=val;}


class RegGICD_ISPENDR28{
public:
    uint32_t Pendings:32;

    void dump()const
    {
        kout << "GICD_ISPENDR28:"
        << ",Pendings = " << Hex(Pendings)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISPENDR28 readRegGICD_ISPENDR28() { return *reinterpret_cast<RegGICD_ISPENDR28*>((0x08000000 + 0x200 + 4*(28)));} __attribute__((always_inline)) inline void writeRegGICD_ISPENDR28(RegGICD_ISPENDR28 val) { *reinterpret_cast<RegGICD_ISPENDR28*>((0x08000000 + 0x200 + 4*(28)))=val;}


class RegGICD_ISPENDR29{
public:
    uint32_t Pendings:32;

    void dump()const
    {
        kout << "GICD_ISPENDR29:"
        << ",Pendings = " << Hex(Pendings)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISPENDR29 readRegGICD_ISPENDR29() { return *reinterpret_cast<RegGICD_ISPENDR29*>((0x08000000 + 0x200 + 4*(29)));} __attribute__((always_inline)) inline void writeRegGICD_ISPENDR29(RegGICD_ISPENDR29 val) { *reinterpret_cast<RegGICD_ISPENDR29*>((0x08000000 + 0x200 + 4*(29)))=val;}


class RegGICD_ISPENDR30{
public:
    uint32_t Pendings:32;

    void dump()const
    {
        kout << "GICD_ISPENDR30:"
        << ",Pendings = " << Hex(Pendings)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISPENDR30 readRegGICD_ISPENDR30() { return *reinterpret_cast<RegGICD_ISPENDR30*>((0x08000000 + 0x200 + 4*(30)));} __attribute__((always_inline)) inline void writeRegGICD_ISPENDR30(RegGICD_ISPENDR30 val) { *reinterpret_cast<RegGICD_ISPENDR30*>((0x08000000 + 0x200 + 4*(30)))=val;}


class RegGICD_ISPENDR31{
public:
    uint32_t Pendings:32;

    void dump()const
    {
        kout << "GICD_ISPENDR31:"
        << ",Pendings = " << Hex(Pendings)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISPENDR31 readRegGICD_ISPENDR31() { return *reinterpret_cast<RegGICD_ISPENDR31*>((0x08000000 + 0x200 + 4*(31)));} __attribute__((always_inline)) inline void writeRegGICD_ISPENDR31(RegGICD_ISPENDR31 val) { *reinterpret_cast<RegGICD_ISPENDR31*>((0x08000000 + 0x200 + 4*(31)))=val;}


class RegGICD_ISACTIVER0{
public:
    uint32_t Actives:32;

    void dump()const
    {
        kout << "GICD_ISACTIVER0:"
        << ",Actives = " << Hex(Actives)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISACTIVER0 readRegGICD_ISACTIVER0() { return *reinterpret_cast<RegGICD_ISACTIVER0*>((0x08000000 + 0x300 + 4*(0)));} __attribute__((always_inline)) inline void writeRegGICD_ISACTIVER0(RegGICD_ISACTIVER0 val) { *reinterpret_cast<RegGICD_ISACTIVER0*>((0x08000000 + 0x300 + 4*(0)))=val;}


class RegGICD_ISACTIVER1{
public:
    uint32_t Actives:32;

    void dump()const
    {
        kout << "GICD_ISACTIVER1:"
        << ",Actives = " << Hex(Actives)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISACTIVER1 readRegGICD_ISACTIVER1() { return *reinterpret_cast<RegGICD_ISACTIVER1*>((0x08000000 + 0x300 + 4*(1)));} __attribute__((always_inline)) inline void writeRegGICD_ISACTIVER1(RegGICD_ISACTIVER1 val) { *reinterpret_cast<RegGICD_ISACTIVER1*>((0x08000000 + 0x300 + 4*(1)))=val;}


class RegGICD_ISACTIVER2{
public:
    uint32_t Actives:32;

    void dump()const
    {
        kout << "GICD_ISACTIVER2:"
        << ",Actives = " << Hex(Actives)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISACTIVER2 readRegGICD_ISACTIVER2() { return *reinterpret_cast<RegGICD_ISACTIVER2*>((0x08000000 + 0x300 + 4*(2)));} __attribute__((always_inline)) inline void writeRegGICD_ISACTIVER2(RegGICD_ISACTIVER2 val) { *reinterpret_cast<RegGICD_ISACTIVER2*>((0x08000000 + 0x300 + 4*(2)))=val;}


class RegGICD_ISACTIVER3{
public:
    uint32_t Actives:32;

    void dump()const
    {
        kout << "GICD_ISACTIVER3:"
        << ",Actives = " << Hex(Actives)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISACTIVER3 readRegGICD_ISACTIVER3() { return *reinterpret_cast<RegGICD_ISACTIVER3*>((0x08000000 + 0x300 + 4*(3)));} __attribute__((always_inline)) inline void writeRegGICD_ISACTIVER3(RegGICD_ISACTIVER3 val) { *reinterpret_cast<RegGICD_ISACTIVER3*>((0x08000000 + 0x300 + 4*(3)))=val;}


class RegGICD_ISACTIVER4{
public:
    uint32_t Actives:32;

    void dump()const
    {
        kout << "GICD_ISACTIVER4:"
        << ",Actives = " << Hex(Actives)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISACTIVER4 readRegGICD_ISACTIVER4() { return *reinterpret_cast<RegGICD_ISACTIVER4*>((0x08000000 + 0x300 + 4*(4)));} __attribute__((always_inline)) inline void writeRegGICD_ISACTIVER4(RegGICD_ISACTIVER4 val) { *reinterpret_cast<RegGICD_ISACTIVER4*>((0x08000000 + 0x300 + 4*(4)))=val;}


class RegGICD_ISACTIVER5{
public:
    uint32_t Actives:32;

    void dump()const
    {
        kout << "GICD_ISACTIVER5:"
        << ",Actives = " << Hex(Actives)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISACTIVER5 readRegGICD_ISACTIVER5() { return *reinterpret_cast<RegGICD_ISACTIVER5*>((0x08000000 + 0x300 + 4*(5)));} __attribute__((always_inline)) inline void writeRegGICD_ISACTIVER5(RegGICD_ISACTIVER5 val) { *reinterpret_cast<RegGICD_ISACTIVER5*>((0x08000000 + 0x300 + 4*(5)))=val;}


class RegGICD_ISACTIVER6{
public:
    uint32_t Actives:32;

    void dump()const
    {
        kout << "GICD_ISACTIVER6:"
        << ",Actives = " << Hex(Actives)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISACTIVER6 readRegGICD_ISACTIVER6() { return *reinterpret_cast<RegGICD_ISACTIVER6*>((0x08000000 + 0x300 + 4*(6)));} __attribute__((always_inline)) inline void writeRegGICD_ISACTIVER6(RegGICD_ISACTIVER6 val) { *reinterpret_cast<RegGICD_ISACTIVER6*>((0x08000000 + 0x300 + 4*(6)))=val;}


class RegGICD_ISACTIVER7{
public:
    uint32_t Actives:32;

    void dump()const
    {
        kout << "GICD_ISACTIVER7:"
        << ",Actives = " << Hex(Actives)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISACTIVER7 readRegGICD_ISACTIVER7() { return *reinterpret_cast<RegGICD_ISACTIVER7*>((0x08000000 + 0x300 + 4*(7)));} __attribute__((always_inline)) inline void writeRegGICD_ISACTIVER7(RegGICD_ISACTIVER7 val) { *reinterpret_cast<RegGICD_ISACTIVER7*>((0x08000000 + 0x300 + 4*(7)))=val;}


class RegGICD_ISACTIVER8{
public:
    uint32_t Actives:32;

    void dump()const
    {
        kout << "GICD_ISACTIVER8:"
        << ",Actives = " << Hex(Actives)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISACTIVER8 readRegGICD_ISACTIVER8() { return *reinterpret_cast<RegGICD_ISACTIVER8*>((0x08000000 + 0x300 + 4*(8)));} __attribute__((always_inline)) inline void writeRegGICD_ISACTIVER8(RegGICD_ISACTIVER8 val) { *reinterpret_cast<RegGICD_ISACTIVER8*>((0x08000000 + 0x300 + 4*(8)))=val;}


class RegGICD_ISACTIVER9{
public:
    uint32_t Actives:32;

    void dump()const
    {
        kout << "GICD_ISACTIVER9:"
        << ",Actives = " << Hex(Actives)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISACTIVER9 readRegGICD_ISACTIVER9() { return *reinterpret_cast<RegGICD_ISACTIVER9*>((0x08000000 + 0x300 + 4*(9)));} __attribute__((always_inline)) inline void writeRegGICD_ISACTIVER9(RegGICD_ISACTIVER9 val) { *reinterpret_cast<RegGICD_ISACTIVER9*>((0x08000000 + 0x300 + 4*(9)))=val;}


class RegGICD_ISACTIVER10{
public:
    uint32_t Actives:32;

    void dump()const
    {
        kout << "GICD_ISACTIVER10:"
        << ",Actives = " << Hex(Actives)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISACTIVER10 readRegGICD_ISACTIVER10() { return *reinterpret_cast<RegGICD_ISACTIVER10*>((0x08000000 + 0x300 + 4*(10)));} __attribute__((always_inline)) inline void writeRegGICD_ISACTIVER10(RegGICD_ISACTIVER10 val) { *reinterpret_cast<RegGICD_ISACTIVER10*>((0x08000000 + 0x300 + 4*(10)))=val;}


class RegGICD_ISACTIVER11{
public:
    uint32_t Actives:32;

    void dump()const
    {
        kout << "GICD_ISACTIVER11:"
        << ",Actives = " << Hex(Actives)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISACTIVER11 readRegGICD_ISACTIVER11() { return *reinterpret_cast<RegGICD_ISACTIVER11*>((0x08000000 + 0x300 + 4*(11)));} __attribute__((always_inline)) inline void writeRegGICD_ISACTIVER11(RegGICD_ISACTIVER11 val) { *reinterpret_cast<RegGICD_ISACTIVER11*>((0x08000000 + 0x300 + 4*(11)))=val;}


class RegGICD_ISACTIVER12{
public:
    uint32_t Actives:32;

    void dump()const
    {
        kout << "GICD_ISACTIVER12:"
        << ",Actives = " << Hex(Actives)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISACTIVER12 readRegGICD_ISACTIVER12() { return *reinterpret_cast<RegGICD_ISACTIVER12*>((0x08000000 + 0x300 + 4*(12)));} __attribute__((always_inline)) inline void writeRegGICD_ISACTIVER12(RegGICD_ISACTIVER12 val) { *reinterpret_cast<RegGICD_ISACTIVER12*>((0x08000000 + 0x300 + 4*(12)))=val;}


class RegGICD_ISACTIVER13{
public:
    uint32_t Actives:32;

    void dump()const
    {
        kout << "GICD_ISACTIVER13:"
        << ",Actives = " << Hex(Actives)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISACTIVER13 readRegGICD_ISACTIVER13() { return *reinterpret_cast<RegGICD_ISACTIVER13*>((0x08000000 + 0x300 + 4*(13)));} __attribute__((always_inline)) inline void writeRegGICD_ISACTIVER13(RegGICD_ISACTIVER13 val) { *reinterpret_cast<RegGICD_ISACTIVER13*>((0x08000000 + 0x300 + 4*(13)))=val;}


class RegGICD_ISACTIVER14{
public:
    uint32_t Actives:32;

    void dump()const
    {
        kout << "GICD_ISACTIVER14:"
        << ",Actives = " << Hex(Actives)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISACTIVER14 readRegGICD_ISACTIVER14() { return *reinterpret_cast<RegGICD_ISACTIVER14*>((0x08000000 + 0x300 + 4*(14)));} __attribute__((always_inline)) inline void writeRegGICD_ISACTIVER14(RegGICD_ISACTIVER14 val) { *reinterpret_cast<RegGICD_ISACTIVER14*>((0x08000000 + 0x300 + 4*(14)))=val;}


class RegGICD_ISACTIVER15{
public:
    uint32_t Actives:32;

    void dump()const
    {
        kout << "GICD_ISACTIVER15:"
        << ",Actives = " << Hex(Actives)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISACTIVER15 readRegGICD_ISACTIVER15() { return *reinterpret_cast<RegGICD_ISACTIVER15*>((0x08000000 + 0x300 + 4*(15)));} __attribute__((always_inline)) inline void writeRegGICD_ISACTIVER15(RegGICD_ISACTIVER15 val) { *reinterpret_cast<RegGICD_ISACTIVER15*>((0x08000000 + 0x300 + 4*(15)))=val;}


class RegGICD_ISACTIVER16{
public:
    uint32_t Actives:32;

    void dump()const
    {
        kout << "GICD_ISACTIVER16:"
        << ",Actives = " << Hex(Actives)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISACTIVER16 readRegGICD_ISACTIVER16() { return *reinterpret_cast<RegGICD_ISACTIVER16*>((0x08000000 + 0x300 + 4*(16)));} __attribute__((always_inline)) inline void writeRegGICD_ISACTIVER16(RegGICD_ISACTIVER16 val) { *reinterpret_cast<RegGICD_ISACTIVER16*>((0x08000000 + 0x300 + 4*(16)))=val;}


class RegGICD_ISACTIVER17{
public:
    uint32_t Actives:32;

    void dump()const
    {
        kout << "GICD_ISACTIVER17:"
        << ",Actives = " << Hex(Actives)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISACTIVER17 readRegGICD_ISACTIVER17() { return *reinterpret_cast<RegGICD_ISACTIVER17*>((0x08000000 + 0x300 + 4*(17)));} __attribute__((always_inline)) inline void writeRegGICD_ISACTIVER17(RegGICD_ISACTIVER17 val) { *reinterpret_cast<RegGICD_ISACTIVER17*>((0x08000000 + 0x300 + 4*(17)))=val;}


class RegGICD_ISACTIVER18{
public:
    uint32_t Actives:32;

    void dump()const
    {
        kout << "GICD_ISACTIVER18:"
        << ",Actives = " << Hex(Actives)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISACTIVER18 readRegGICD_ISACTIVER18() { return *reinterpret_cast<RegGICD_ISACTIVER18*>((0x08000000 + 0x300 + 4*(18)));} __attribute__((always_inline)) inline void writeRegGICD_ISACTIVER18(RegGICD_ISACTIVER18 val) { *reinterpret_cast<RegGICD_ISACTIVER18*>((0x08000000 + 0x300 + 4*(18)))=val;}


class RegGICD_ISACTIVER19{
public:
    uint32_t Actives:32;

    void dump()const
    {
        kout << "GICD_ISACTIVER19:"
        << ",Actives = " << Hex(Actives)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISACTIVER19 readRegGICD_ISACTIVER19() { return *reinterpret_cast<RegGICD_ISACTIVER19*>((0x08000000 + 0x300 + 4*(19)));} __attribute__((always_inline)) inline void writeRegGICD_ISACTIVER19(RegGICD_ISACTIVER19 val) { *reinterpret_cast<RegGICD_ISACTIVER19*>((0x08000000 + 0x300 + 4*(19)))=val;}


class RegGICD_ISACTIVER20{
public:
    uint32_t Actives:32;

    void dump()const
    {
        kout << "GICD_ISACTIVER20:"
        << ",Actives = " << Hex(Actives)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISACTIVER20 readRegGICD_ISACTIVER20() { return *reinterpret_cast<RegGICD_ISACTIVER20*>((0x08000000 + 0x300 + 4*(20)));} __attribute__((always_inline)) inline void writeRegGICD_ISACTIVER20(RegGICD_ISACTIVER20 val) { *reinterpret_cast<RegGICD_ISACTIVER20*>((0x08000000 + 0x300 + 4*(20)))=val;}


class RegGICD_ISACTIVER21{
public:
    uint32_t Actives:32;

    void dump()const
    {
        kout << "GICD_ISACTIVER21:"
        << ",Actives = " << Hex(Actives)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISACTIVER21 readRegGICD_ISACTIVER21() { return *reinterpret_cast<RegGICD_ISACTIVER21*>((0x08000000 + 0x300 + 4*(21)));} __attribute__((always_inline)) inline void writeRegGICD_ISACTIVER21(RegGICD_ISACTIVER21 val) { *reinterpret_cast<RegGICD_ISACTIVER21*>((0x08000000 + 0x300 + 4*(21)))=val;}


class RegGICD_ISACTIVER22{
public:
    uint32_t Actives:32;

    void dump()const
    {
        kout << "GICD_ISACTIVER22:"
        << ",Actives = " << Hex(Actives)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISACTIVER22 readRegGICD_ISACTIVER22() { return *reinterpret_cast<RegGICD_ISACTIVER22*>((0x08000000 + 0x300 + 4*(22)));} __attribute__((always_inline)) inline void writeRegGICD_ISACTIVER22(RegGICD_ISACTIVER22 val) { *reinterpret_cast<RegGICD_ISACTIVER22*>((0x08000000 + 0x300 + 4*(22)))=val;}


class RegGICD_ISACTIVER23{
public:
    uint32_t Actives:32;

    void dump()const
    {
        kout << "GICD_ISACTIVER23:"
        << ",Actives = " << Hex(Actives)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISACTIVER23 readRegGICD_ISACTIVER23() { return *reinterpret_cast<RegGICD_ISACTIVER23*>((0x08000000 + 0x300 + 4*(23)));} __attribute__((always_inline)) inline void writeRegGICD_ISACTIVER23(RegGICD_ISACTIVER23 val) { *reinterpret_cast<RegGICD_ISACTIVER23*>((0x08000000 + 0x300 + 4*(23)))=val;}


class RegGICD_ISACTIVER24{
public:
    uint32_t Actives:32;

    void dump()const
    {
        kout << "GICD_ISACTIVER24:"
        << ",Actives = " << Hex(Actives)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISACTIVER24 readRegGICD_ISACTIVER24() { return *reinterpret_cast<RegGICD_ISACTIVER24*>((0x08000000 + 0x300 + 4*(24)));} __attribute__((always_inline)) inline void writeRegGICD_ISACTIVER24(RegGICD_ISACTIVER24 val) { *reinterpret_cast<RegGICD_ISACTIVER24*>((0x08000000 + 0x300 + 4*(24)))=val;}


class RegGICD_ISACTIVER25{
public:
    uint32_t Actives:32;

    void dump()const
    {
        kout << "GICD_ISACTIVER25:"
        << ",Actives = " << Hex(Actives)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISACTIVER25 readRegGICD_ISACTIVER25() { return *reinterpret_cast<RegGICD_ISACTIVER25*>((0x08000000 + 0x300 + 4*(25)));} __attribute__((always_inline)) inline void writeRegGICD_ISACTIVER25(RegGICD_ISACTIVER25 val) { *reinterpret_cast<RegGICD_ISACTIVER25*>((0x08000000 + 0x300 + 4*(25)))=val;}


class RegGICD_ISACTIVER26{
public:
    uint32_t Actives:32;

    void dump()const
    {
        kout << "GICD_ISACTIVER26:"
        << ",Actives = " << Hex(Actives)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISACTIVER26 readRegGICD_ISACTIVER26() { return *reinterpret_cast<RegGICD_ISACTIVER26*>((0x08000000 + 0x300 + 4*(26)));} __attribute__((always_inline)) inline void writeRegGICD_ISACTIVER26(RegGICD_ISACTIVER26 val) { *reinterpret_cast<RegGICD_ISACTIVER26*>((0x08000000 + 0x300 + 4*(26)))=val;}


class RegGICD_ISACTIVER27{
public:
    uint32_t Actives:32;

    void dump()const
    {
        kout << "GICD_ISACTIVER27:"
        << ",Actives = " << Hex(Actives)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISACTIVER27 readRegGICD_ISACTIVER27() { return *reinterpret_cast<RegGICD_ISACTIVER27*>((0x08000000 + 0x300 + 4*(27)));} __attribute__((always_inline)) inline void writeRegGICD_ISACTIVER27(RegGICD_ISACTIVER27 val) { *reinterpret_cast<RegGICD_ISACTIVER27*>((0x08000000 + 0x300 + 4*(27)))=val;}


class RegGICD_ISACTIVER28{
public:
    uint32_t Actives:32;

    void dump()const
    {
        kout << "GICD_ISACTIVER28:"
        << ",Actives = " << Hex(Actives)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISACTIVER28 readRegGICD_ISACTIVER28() { return *reinterpret_cast<RegGICD_ISACTIVER28*>((0x08000000 + 0x300 + 4*(28)));} __attribute__((always_inline)) inline void writeRegGICD_ISACTIVER28(RegGICD_ISACTIVER28 val) { *reinterpret_cast<RegGICD_ISACTIVER28*>((0x08000000 + 0x300 + 4*(28)))=val;}


class RegGICD_ISACTIVER29{
public:
    uint32_t Actives:32;

    void dump()const
    {
        kout << "GICD_ISACTIVER29:"
        << ",Actives = " << Hex(Actives)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISACTIVER29 readRegGICD_ISACTIVER29() { return *reinterpret_cast<RegGICD_ISACTIVER29*>((0x08000000 + 0x300 + 4*(29)));} __attribute__((always_inline)) inline void writeRegGICD_ISACTIVER29(RegGICD_ISACTIVER29 val) { *reinterpret_cast<RegGICD_ISACTIVER29*>((0x08000000 + 0x300 + 4*(29)))=val;}


class RegGICD_ISACTIVER30{
public:
    uint32_t Actives:32;

    void dump()const
    {
        kout << "GICD_ISACTIVER30:"
        << ",Actives = " << Hex(Actives)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISACTIVER30 readRegGICD_ISACTIVER30() { return *reinterpret_cast<RegGICD_ISACTIVER30*>((0x08000000 + 0x300 + 4*(30)));} __attribute__((always_inline)) inline void writeRegGICD_ISACTIVER30(RegGICD_ISACTIVER30 val) { *reinterpret_cast<RegGICD_ISACTIVER30*>((0x08000000 + 0x300 + 4*(30)))=val;}


class RegGICD_ISACTIVER31{
public:
    uint32_t Actives:32;

    void dump()const
    {
        kout << "GICD_ISACTIVER31:"
        << ",Actives = " << Hex(Actives)
        << "\n";
    }
}__attribute__((packed));
__attribute__((always_inline)) inline RegGICD_ISACTIVER31 readRegGICD_ISACTIVER31() { return *reinterpret_cast<RegGICD_ISACTIVER31*>((0x08000000 + 0x300 + 4*(31)));} __attribute__((always_inline)) inline void writeRegGICD_ISACTIVER31(RegGICD_ISACTIVER31 val) { *reinterpret_cast<RegGICD_ISACTIVER31*>((0x08000000 + 0x300 + 4*(31)))=val;}
# 9 "../src/arch/qemu_virt/main_aarch64_instructions.cpp" 2
# 28 "../src/arch/qemu_virt/main_aarch64_instructions.cpp"
int main()
{

 auto curEl = readRegCurrentEL();
 curEl.dump();
 if(curEl.EL != 1)
 {
  kout << "[FATAL] " << "This program is designed to run at EL1\n";
  return 1;
 }


 auto info0=readRegID_AA64PFR0_EL1();
 info0.dump();
 if(info0.GIC!=1)
 {
  kout << "[FATAL] " << "Not supporting GICv3/v4\n";
  return 1;
 }


 auto spsel = readRegSPSel();
 spsel.dump();
 spsel.SP=1;
 writeRegSPSel(spsel);


 __asm__(
   "ldr x0,=ExceptionVectorEL1 \n\t"
   "msr vbar_el1,x0 \n\t");







 kout << "[INFO] " << "Redistributor setting\n";
 auto redistr = readRegGICR_WAKER();
 redistr.dump();
 redistr.ProcessorSleep=0;
 writeRegGICR_WAKER(redistr);
 while(readRegGICR_WAKER().ChildrenAsleep)
  ;
 readRegGICR_WAKER().dump();




 kout << "[INFO] " << "CPU interface setting\n";
 auto sre1=readRegICC_SRE_EL1();
 sre1.dump();
 if(sre1.SRE != 1)
 {
  kout << "[INFO] " << "System register is not enabled,enable it\n";
  sre1.SRE=1;
  writeRegICC_SRE_EL1(sre1);
 }
 readRegICC_SRE_EL1().dump();

 auto gicCtrl = readRegICC_CTLR_EL1();
 gicCtrl.dump();
 gicCtrl.A3V=1;
 gicCtrl.EOImode=0;
 writeRegICC_CTLR_EL1(gicCtrl);


 RegICC_IGRPEN0_EL1 grp0en = readRegICC_IGRPEN0_EL1();

 writeRegICC_IGRPEN0_EL1(grp0en);
 RegICC_IGRPEN1_EL1 grp1en = readRegICC_IGRPEN1_EL1();
 grp1en.Enable=1;
 writeRegICC_IGRPEN1_EL1(grp1en);
 readRegICC_IGRPEN0_EL1().dump();
 readRegICC_IGRPEN1_EL1().dump();

 auto b0p = readRegICC_BPR0_EL1();
 auto b1p = readRegICC_BPR1_EL1();
 b0p.dump();
 b1p.dump();


 auto sgi0p = readRegGICR_IPRIORITYR0();
 sgi0p.dump();


 auto igrpr0 = readRegGICR_IGROUPR0();
 auto sgiEn = readRegGICR_ISENABLER0();
 igrpr0.dump();
 sgiEn.dump();
 igrpr0.InGrp = 0xFFFFFFFF;
 sgiEn.Enables = 0xFFFFFFFF;
 writeRegGICR_IGROUPR0(igrpr0);
 writeRegGICR_ISENABLER0(sgiEn);
 readRegGICR_ICFGR0().dump();
 readRegGICR_ICFGR1().dump();
 RegGICR_ICFGR1 redistrCfg1 { 0 };
 redistrCfg1.Configs = 0xaaaaaaaa;
 writeRegGICR_ICFGR1(redistrCfg1);
 readRegGICR_ICFGR1().dump();
 readRegGICR_ICENABLER0().dump();
 RegGICR_ISENABLER0 redistrEn0 {0};


 redistrEn0.Enables = 0xffffffff;

 writeRegGICR_ISENABLER0(redistrEn0);
 readRegGICR_ISENABLER0().dump();
 readRegGICR_ICENABLER0().dump();




 auto maskPrty = readRegICC_PMR_EL1();
 maskPrty.dump();
 maskPrty.Priortiy = 0xFE;
 writeRegICC_PMR_EL1(maskPrty);
 readRegICC_PMR_EL1().dump();
 auto runningPrty = readRegICC_RPR_EL1();
 runningPrty.dump();

 auto int3prty = readRegGICR_IPRIORITYR0();
 int3prty.p3 = 0xF0;
 writeRegGICR_IPRIORITYR0(int3prty);
 readRegGICR_IPRIORITYR0().dump();
 auto ppi3prty = readRegGICR_IPRIORITYR7();
 ppi3prty.dump();

 ppi3prty.p28 = 0xF0;
 ppi3prty.p29 = 0xF0;
 ppi3prty.p30 = 0xF0;
 ppi3prty.p31 = 0xF0;
 writeRegGICR_IPRIORITYR7(ppi3prty);
 readRegGICR_IPRIORITYR7().dump();



 kout << "[INFO] " <<"Enabling DAIF \n";
 auto daif= readRegDAIF();
 daif.dump();

 daif.I=0;
 daif.F=0;
 daif.A=0;
 writeRegDAIF(daif);
 readRegDAIF().dump();


 kout << "[INFO] " << "Distributor setting\n";
 auto distr = readRegGICD_CTLR();
 distr.dump();
 distr.EnableGrp0=1;
 distr.EnableGrp1S=1;
 distr.EnableGrp1NS=1;
 writeRegGICD_CTLR(distr);
 readRegGICD_CTLR().dump();
 RegGICD_ISENABLER0 distrEn0{0};
 distrEn0.Enables = 0xffffffff;
 writeRegGICD_ISENABLER0(distrEn0);
 readRegGICD_ISENABLER0().dump();

 readRegGICD_IIDR().dump();

 readRegGICR_IPRIORITYR0().dump();





 auto mpid = readRegMPIDR_EL1();
 mpid.dump();
 kout << "[INFO] " << "Generating SGI \n";
 RegICC_SGI1R_EL1 sgi1 { 0 };
 sgi1.Aff3= mpid.Aff3;
 sgi1.Aff2= mpid.Aff2;
 sgi1.Aff1= mpid.Aff1;
 sgi1.TargetList = (0x1 << mpid.Aff0);
 sgi1.INTID=3;
 sgi1.IRM=0;
 writeRegICC_SGI1R_EL1(sgi1);
 kout << "[INFO] " << "Generate again \n";
 writeRegICC_SGI1R_EL1(sgi1);
# 226 "../src/arch/qemu_virt/main_aarch64_instructions.cpp"
 auto freq = readRegCNTFRQ_EL0();
 freq.dump();
# 250 "../src/arch/qemu_virt/main_aarch64_instructions.cpp"
 auto cmpvPhy1 = readRegCNTP_CVAL_EL0();
 cmpvPhy1.dump();

 cmpvPhy1.CompareValue = 0x3a4a5a;
 writeRegCNTP_CVAL_EL0(cmpvPhy1);


 auto ctlPyh1=readRegCNTP_CTL_EL0();
 ctlPyh1.dump();
 ctlPyh1.ENABLE = 1;
 ctlPyh1.IMASK = 0;
 writeRegCNTP_CTL_EL0(ctlPyh1);







 kout << "[INFO] " << "end main.\n";






 return 0;
}
