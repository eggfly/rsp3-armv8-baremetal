# 1 "D:/Pool/eclipse-workspace_aarch64/newspace/raspiOS/src/arch/qemu_virt/main_run_process.cpp"
# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\subprojects\\qemu_virt\\Debug//"
# 1 "<built-in>"
#define __STDC__ 1
#define __cplusplus 201402L
#define __STDC_UTF_16__ 1
#define __STDC_UTF_32__ 1
#define __STDC_HOSTED__ 0
#define __GNUC__ 7
#define __GNUC_MINOR__ 2
#define __GNUC_PATCHLEVEL__ 1
#define __VERSION__ "7.2.1 20171011"
#define __LINARO_RELEASE__ 201711
#define __LINARO_SPIN__ 0
#define __ATOMIC_RELAXED 0
#define __ATOMIC_SEQ_CST 5
#define __ATOMIC_ACQUIRE 2
#define __ATOMIC_RELEASE 3
#define __ATOMIC_ACQ_REL 4
#define __ATOMIC_CONSUME 1
#define __FINITE_MATH_ONLY__ 0
#define _LP64 1
#define __LP64__ 1
#define __SIZEOF_INT__ 4
#define __SIZEOF_LONG__ 8
#define __SIZEOF_LONG_LONG__ 8
#define __SIZEOF_SHORT__ 2
#define __SIZEOF_FLOAT__ 4
#define __SIZEOF_DOUBLE__ 8
#define __SIZEOF_LONG_DOUBLE__ 16
#define __SIZEOF_SIZE_T__ 8
#define __CHAR_BIT__ 8
#define __BIGGEST_ALIGNMENT__ 16
#define __ORDER_LITTLE_ENDIAN__ 1234
#define __ORDER_BIG_ENDIAN__ 4321
#define __ORDER_PDP_ENDIAN__ 3412
#define __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __FLOAT_WORD_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __SIZEOF_POINTER__ 8
#define __GNUG__ 7
#define __SIZE_TYPE__ long unsigned int
#define __PTRDIFF_TYPE__ long int
#define __WCHAR_TYPE__ unsigned int
#define __WINT_TYPE__ unsigned int
#define __INTMAX_TYPE__ long int
#define __UINTMAX_TYPE__ long unsigned int
#define __CHAR16_TYPE__ short unsigned int
#define __CHAR32_TYPE__ unsigned int
#define __SIG_ATOMIC_TYPE__ int
#define __INT8_TYPE__ signed char
#define __INT16_TYPE__ short int
#define __INT32_TYPE__ int
#define __INT64_TYPE__ long int
#define __UINT8_TYPE__ unsigned char
#define __UINT16_TYPE__ short unsigned int
#define __UINT32_TYPE__ unsigned int
#define __UINT64_TYPE__ long unsigned int
#define __INT_LEAST8_TYPE__ signed char
#define __INT_LEAST16_TYPE__ short int
#define __INT_LEAST32_TYPE__ int
#define __INT_LEAST64_TYPE__ long int
#define __UINT_LEAST8_TYPE__ unsigned char
#define __UINT_LEAST16_TYPE__ short unsigned int
#define __UINT_LEAST32_TYPE__ unsigned int
#define __UINT_LEAST64_TYPE__ long unsigned int
#define __INT_FAST8_TYPE__ int
#define __INT_FAST16_TYPE__ int
#define __INT_FAST32_TYPE__ int
#define __INT_FAST64_TYPE__ long int
#define __UINT_FAST8_TYPE__ unsigned int
#define __UINT_FAST16_TYPE__ unsigned int
#define __UINT_FAST32_TYPE__ unsigned int
#define __UINT_FAST64_TYPE__ long unsigned int
#define __INTPTR_TYPE__ long int
#define __UINTPTR_TYPE__ long unsigned int
#define __has_include(STR) __has_include__(STR)
#define __has_include_next(STR) __has_include_next__(STR)
#define __GXX_WEAK__ 1
#define __DEPRECATED 1
#define __GXX_EXPERIMENTAL_CXX0X__ 1
#define __cpp_binary_literals 201304
#define __cpp_unicode_characters 200704
#define __cpp_raw_strings 200710
#define __cpp_unicode_literals 200710
#define __cpp_user_defined_literals 200809
#define __cpp_lambdas 200907
#define __cpp_range_based_for 200907
#define __cpp_static_assert 200410
#define __cpp_decltype 200707
#define __cpp_attributes 200809
#define __cpp_rvalue_reference 200610
#define __cpp_rvalue_references 200610
#define __cpp_variadic_templates 200704
#define __cpp_initializer_lists 200806
#define __cpp_delegating_constructors 200604
#define __cpp_nsdmi 200809
#define __cpp_inheriting_constructors 201511
#define __cpp_ref_qualifiers 200710
#define __cpp_alias_templates 200704
#define __cpp_return_type_deduction 201304
#define __cpp_init_captures 201304
#define __cpp_generic_lambdas 201304
#define __cpp_constexpr 201304
#define __cpp_decltype_auto 201304
#define __cpp_aggregate_nsdmi 201304
#define __cpp_variable_templates 201304
#define __cpp_digit_separators 201309
#define __cpp_sized_deallocation 201309
#define __cpp_threadsafe_static_init 200806
#define __GXX_ABI_VERSION 1011
#define __SCHAR_MAX__ 0x7f
#define __SHRT_MAX__ 0x7fff
#define __INT_MAX__ 0x7fffffff
#define __LONG_MAX__ 0x7fffffffffffffffL
#define __LONG_LONG_MAX__ 0x7fffffffffffffffLL
#define __WCHAR_MAX__ 0xffffffffU
#define __WCHAR_MIN__ 0U
#define __WINT_MAX__ 0xffffffffU
#define __WINT_MIN__ 0U
#define __PTRDIFF_MAX__ 0x7fffffffffffffffL
#define __SIZE_MAX__ 0xffffffffffffffffUL
#define __SCHAR_WIDTH__ 8
#define __SHRT_WIDTH__ 16
#define __INT_WIDTH__ 32
#define __LONG_WIDTH__ 64
#define __LONG_LONG_WIDTH__ 64
#define __WCHAR_WIDTH__ 32
#define __WINT_WIDTH__ 32
#define __PTRDIFF_WIDTH__ 64
#define __SIZE_WIDTH__ 64
#define __INTMAX_MAX__ 0x7fffffffffffffffL
#define __INTMAX_C(c) c ## L
#define __UINTMAX_MAX__ 0xffffffffffffffffUL
#define __UINTMAX_C(c) c ## UL
#define __INTMAX_WIDTH__ 64
#define __SIG_ATOMIC_MAX__ 0x7fffffff
#define __SIG_ATOMIC_MIN__ (-__SIG_ATOMIC_MAX__ - 1)
#define __SIG_ATOMIC_WIDTH__ 32
#define __INT8_MAX__ 0x7f
#define __INT16_MAX__ 0x7fff
#define __INT32_MAX__ 0x7fffffff
#define __INT64_MAX__ 0x7fffffffffffffffL
#define __UINT8_MAX__ 0xff
#define __UINT16_MAX__ 0xffff
#define __UINT32_MAX__ 0xffffffffU
#define __UINT64_MAX__ 0xffffffffffffffffUL
#define __INT_LEAST8_MAX__ 0x7f
#define __INT8_C(c) c
#define __INT_LEAST8_WIDTH__ 8
#define __INT_LEAST16_MAX__ 0x7fff
#define __INT16_C(c) c
#define __INT_LEAST16_WIDTH__ 16
#define __INT_LEAST32_MAX__ 0x7fffffff
#define __INT32_C(c) c
#define __INT_LEAST32_WIDTH__ 32
#define __INT_LEAST64_MAX__ 0x7fffffffffffffffL
#define __INT64_C(c) c ## L
#define __INT_LEAST64_WIDTH__ 64
#define __UINT_LEAST8_MAX__ 0xff
#define __UINT8_C(c) c
#define __UINT_LEAST16_MAX__ 0xffff
#define __UINT16_C(c) c
#define __UINT_LEAST32_MAX__ 0xffffffffU
#define __UINT32_C(c) c ## U
#define __UINT_LEAST64_MAX__ 0xffffffffffffffffUL
#define __UINT64_C(c) c ## UL
#define __INT_FAST8_MAX__ 0x7fffffff
#define __INT_FAST8_WIDTH__ 32
#define __INT_FAST16_MAX__ 0x7fffffff
#define __INT_FAST16_WIDTH__ 32
#define __INT_FAST32_MAX__ 0x7fffffff
#define __INT_FAST32_WIDTH__ 32
#define __INT_FAST64_MAX__ 0x7fffffffffffffffL
#define __INT_FAST64_WIDTH__ 64
#define __UINT_FAST8_MAX__ 0xffffffffU
#define __UINT_FAST16_MAX__ 0xffffffffU
#define __UINT_FAST32_MAX__ 0xffffffffU
#define __UINT_FAST64_MAX__ 0xffffffffffffffffUL
#define __INTPTR_MAX__ 0x7fffffffffffffffL
#define __INTPTR_WIDTH__ 64
#define __UINTPTR_MAX__ 0xffffffffffffffffUL
#define __GCC_IEC_559 2
#define __GCC_IEC_559_COMPLEX 2
#define __FLT_EVAL_METHOD__ 0
#define __FLT_EVAL_METHOD_TS_18661_3__ 0
#define __DEC_EVAL_METHOD__ 2
#define __FLT_RADIX__ 2
#define __FLT_MANT_DIG__ 24
#define __FLT_DIG__ 6
#define __FLT_MIN_EXP__ (-125)
#define __FLT_MIN_10_EXP__ (-37)
#define __FLT_MAX_EXP__ 128
#define __FLT_MAX_10_EXP__ 38
#define __FLT_DECIMAL_DIG__ 9
#define __FLT_MAX__ 3.40282346638528859811704183484516925e+38F
#define __FLT_MIN__ 1.17549435082228750796873653722224568e-38F
#define __FLT_EPSILON__ 1.19209289550781250000000000000000000e-7F
#define __FLT_DENORM_MIN__ 1.40129846432481707092372958328991613e-45F
#define __FLT_HAS_DENORM__ 1
#define __FLT_HAS_INFINITY__ 1
#define __FLT_HAS_QUIET_NAN__ 1
#define __FP_FAST_FMAF 1
#define __DBL_MANT_DIG__ 53
#define __DBL_DIG__ 15
#define __DBL_MIN_EXP__ (-1021)
#define __DBL_MIN_10_EXP__ (-307)
#define __DBL_MAX_EXP__ 1024
#define __DBL_MAX_10_EXP__ 308
#define __DBL_DECIMAL_DIG__ 17
#define __DBL_MAX__ double(1.79769313486231570814527423731704357e+308L)
#define __DBL_MIN__ double(2.22507385850720138309023271733240406e-308L)
#define __DBL_EPSILON__ double(2.22044604925031308084726333618164062e-16L)
#define __DBL_DENORM_MIN__ double(4.94065645841246544176568792868221372e-324L)
#define __DBL_HAS_DENORM__ 1
#define __DBL_HAS_INFINITY__ 1
#define __DBL_HAS_QUIET_NAN__ 1
#define __FP_FAST_FMA 1
#define __LDBL_MANT_DIG__ 113
#define __LDBL_DIG__ 33
#define __LDBL_MIN_EXP__ (-16381)
#define __LDBL_MIN_10_EXP__ (-4931)
#define __LDBL_MAX_EXP__ 16384
#define __LDBL_MAX_10_EXP__ 4932
#define __DECIMAL_DIG__ 36
#define __LDBL_DECIMAL_DIG__ 36
#define __LDBL_MAX__ 1.18973149535723176508575932662800702e+4932L
#define __LDBL_MIN__ 3.36210314311209350626267781732175260e-4932L
#define __LDBL_EPSILON__ 1.92592994438723585305597794258492732e-34L
#define __LDBL_DENORM_MIN__ 6.47517511943802511092443895822764655e-4966L
#define __LDBL_HAS_DENORM__ 1
#define __LDBL_HAS_INFINITY__ 1
#define __LDBL_HAS_QUIET_NAN__ 1
#define __FLT16_MANT_DIG__ 11
#define __FLT16_DIG__ 3
#define __FLT16_MIN_EXP__ (-13)
#define __FLT16_MIN_10_EXP__ (-4)
#define __FLT16_MAX_EXP__ 16
#define __FLT16_MAX_10_EXP__ 4
#define __FLT16_DECIMAL_DIG__ 5
#define __FLT16_MAX__ 6.55040000000000000000000000000000000e+4F16
#define __FLT16_MIN__ 6.10351562500000000000000000000000000e-5F16
#define __FLT16_EPSILON__ 9.76562500000000000000000000000000000e-4F16
#define __FLT16_DENORM_MIN__ 5.96046447753906250000000000000000000e-8F16
#define __FLT16_HAS_DENORM__ 1
#define __FLT16_HAS_INFINITY__ 1
#define __FLT16_HAS_QUIET_NAN__ 1
#define __FLT32_MANT_DIG__ 24
#define __FLT32_DIG__ 6
#define __FLT32_MIN_EXP__ (-125)
#define __FLT32_MIN_10_EXP__ (-37)
#define __FLT32_MAX_EXP__ 128
#define __FLT32_MAX_10_EXP__ 38
#define __FLT32_DECIMAL_DIG__ 9
#define __FLT32_MAX__ 3.40282346638528859811704183484516925e+38F32
#define __FLT32_MIN__ 1.17549435082228750796873653722224568e-38F32
#define __FLT32_EPSILON__ 1.19209289550781250000000000000000000e-7F32
#define __FLT32_DENORM_MIN__ 1.40129846432481707092372958328991613e-45F32
#define __FLT32_HAS_DENORM__ 1
#define __FLT32_HAS_INFINITY__ 1
#define __FLT32_HAS_QUIET_NAN__ 1
#define __FLT64_MANT_DIG__ 53
#define __FLT64_DIG__ 15
#define __FLT64_MIN_EXP__ (-1021)
#define __FLT64_MIN_10_EXP__ (-307)
#define __FLT64_MAX_EXP__ 1024
#define __FLT64_MAX_10_EXP__ 308
#define __FLT64_DECIMAL_DIG__ 17
#define __FLT64_MAX__ 1.79769313486231570814527423731704357e+308F64
#define __FLT64_MIN__ 2.22507385850720138309023271733240406e-308F64
#define __FLT64_EPSILON__ 2.22044604925031308084726333618164062e-16F64
#define __FLT64_DENORM_MIN__ 4.94065645841246544176568792868221372e-324F64
#define __FLT64_HAS_DENORM__ 1
#define __FLT64_HAS_INFINITY__ 1
#define __FLT64_HAS_QUIET_NAN__ 1
#define __FLT128_MANT_DIG__ 113
#define __FLT128_DIG__ 33
#define __FLT128_MIN_EXP__ (-16381)
#define __FLT128_MIN_10_EXP__ (-4931)
#define __FLT128_MAX_EXP__ 16384
#define __FLT128_MAX_10_EXP__ 4932
#define __FLT128_DECIMAL_DIG__ 36
#define __FLT128_MAX__ 1.18973149535723176508575932662800702e+4932F128
#define __FLT128_MIN__ 3.36210314311209350626267781732175260e-4932F128
#define __FLT128_EPSILON__ 1.92592994438723585305597794258492732e-34F128
#define __FLT128_DENORM_MIN__ 6.47517511943802511092443895822764655e-4966F128
#define __FLT128_HAS_DENORM__ 1
#define __FLT128_HAS_INFINITY__ 1
#define __FLT128_HAS_QUIET_NAN__ 1
#define __FLT32X_MANT_DIG__ 53
#define __FLT32X_DIG__ 15
#define __FLT32X_MIN_EXP__ (-1021)
#define __FLT32X_MIN_10_EXP__ (-307)
#define __FLT32X_MAX_EXP__ 1024
#define __FLT32X_MAX_10_EXP__ 308
#define __FLT32X_DECIMAL_DIG__ 17
#define __FLT32X_MAX__ 1.79769313486231570814527423731704357e+308F32x
#define __FLT32X_MIN__ 2.22507385850720138309023271733240406e-308F32x
#define __FLT32X_EPSILON__ 2.22044604925031308084726333618164062e-16F32x
#define __FLT32X_DENORM_MIN__ 4.94065645841246544176568792868221372e-324F32x
#define __FLT32X_HAS_DENORM__ 1
#define __FLT32X_HAS_INFINITY__ 1
#define __FLT32X_HAS_QUIET_NAN__ 1
#define __FLT64X_MANT_DIG__ 113
#define __FLT64X_DIG__ 33
#define __FLT64X_MIN_EXP__ (-16381)
#define __FLT64X_MIN_10_EXP__ (-4931)
#define __FLT64X_MAX_EXP__ 16384
#define __FLT64X_MAX_10_EXP__ 4932
#define __FLT64X_DECIMAL_DIG__ 36
#define __FLT64X_MAX__ 1.18973149535723176508575932662800702e+4932F64x
#define __FLT64X_MIN__ 3.36210314311209350626267781732175260e-4932F64x
#define __FLT64X_EPSILON__ 1.92592994438723585305597794258492732e-34F64x
#define __FLT64X_DENORM_MIN__ 6.47517511943802511092443895822764655e-4966F64x
#define __FLT64X_HAS_DENORM__ 1
#define __FLT64X_HAS_INFINITY__ 1
#define __FLT64X_HAS_QUIET_NAN__ 1
#define __DEC32_MANT_DIG__ 7
#define __DEC32_MIN_EXP__ (-94)
#define __DEC32_MAX_EXP__ 97
#define __DEC32_MIN__ 1E-95DF
#define __DEC32_MAX__ 9.999999E96DF
#define __DEC32_EPSILON__ 1E-6DF
#define __DEC32_SUBNORMAL_MIN__ 0.000001E-95DF
#define __DEC64_MANT_DIG__ 16
#define __DEC64_MIN_EXP__ (-382)
#define __DEC64_MAX_EXP__ 385
#define __DEC64_MIN__ 1E-383DD
#define __DEC64_MAX__ 9.999999999999999E384DD
#define __DEC64_EPSILON__ 1E-15DD
#define __DEC64_SUBNORMAL_MIN__ 0.000000000000001E-383DD
#define __DEC128_MANT_DIG__ 34
#define __DEC128_MIN_EXP__ (-6142)
#define __DEC128_MAX_EXP__ 6145
#define __DEC128_MIN__ 1E-6143DL
#define __DEC128_MAX__ 9.999999999999999999999999999999999E6144DL
#define __DEC128_EPSILON__ 1E-33DL
#define __DEC128_SUBNORMAL_MIN__ 0.000000000000000000000000000000001E-6143DL
#define __REGISTER_PREFIX__ 
#define __USER_LABEL_PREFIX__ 
#define __GNUC_STDC_INLINE__ 1
#define __NO_INLINE__ 1
#define __STRICT_ANSI__ 1
#define __WCHAR_UNSIGNED__ 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 1
#define __GCC_ATOMIC_BOOL_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR16_T_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR32_T_LOCK_FREE 2
#define __GCC_ATOMIC_WCHAR_T_LOCK_FREE 2
#define __GCC_ATOMIC_SHORT_LOCK_FREE 2
#define __GCC_ATOMIC_INT_LOCK_FREE 2
#define __GCC_ATOMIC_LONG_LOCK_FREE 2
#define __GCC_ATOMIC_LLONG_LOCK_FREE 2
#define __GCC_ATOMIC_TEST_AND_SET_TRUEVAL 1
#define __GCC_ATOMIC_POINTER_LOCK_FREE 2
#define __GCC_HAVE_DWARF2_CFI_ASM 1
#define __PRAGMA_REDEFINE_EXTNAME 1
#define __SIZEOF_INT128__ 16
#define __SIZEOF_WCHAR_T__ 4
#define __SIZEOF_WINT_T__ 4
#define __SIZEOF_PTRDIFF_T__ 8
#define __aarch64__ 1
#define __ARM_64BIT_STATE 1
#define __ARM_ARCH_ISA_A64 1
#define __ARM_ALIGN_MAX_PWR 28
#define __ARM_ALIGN_MAX_STACK_PWR 16
#define __ARM_ARCH_8A 1
#define __ARM_ARCH_PROFILE 65
#define __ARM_FEATURE_CLZ 1
#define __ARM_FEATURE_IDIV 1
#define __ARM_FEATURE_UNALIGNED 1
#define __ARM_PCS_AAPCS64 1
#define __ARM_SIZEOF_WCHAR_T 4
#undef __ARM_FP_FAST
# 1 "<built-in>"
#define __ARM_ARCH 8
#define __ARM_SIZEOF_MINIMAL_ENUM 4
#undef __AARCH64EB__
# 1 "<built-in>"
#undef __ARM_BIG_ENDIAN
# 1 "<built-in>"
#define __AARCH64EL__ 1
#define __ARM_FEATURE_FMA 1
#define __ARM_FP 14
#define __ARM_FP16_FORMAT_IEEE 1
#define __ARM_FP16_ARGS 1
#undef __ARM_FEATURE_FP16_SCALAR_ARITHMETIC
# 1 "<built-in>"
#undef __ARM_FEATURE_FP16_VECTOR_ARITHMETIC
# 1 "<built-in>"
#define __ARM_FEATURE_NUMERIC_MAXMIN 1
#define __ARM_NEON 1
#define __ARM_FEATURE_CRC32 1
#undef __AARCH64_CMODEL_TINY__
# 1 "<built-in>"
#undef __AARCH64_CMODEL_SMALL__
# 1 "<built-in>"
#undef __AARCH64_CMODEL_LARGE__
# 1 "<built-in>"
#define __AARCH64_CMODEL_SMALL__ 1
#undef _ILP32
# 1 "<built-in>"
#undef __ILP32__
# 1 "<built-in>"
#undef __ARM_FEATURE_CRYPTO
# 1 "<built-in>"
#define __ARM_FEATURE_QRDMX 1
#undef __FLT_EVAL_METHOD__
# 1 "<built-in>"
#define __FLT_EVAL_METHOD__ 0
#undef __FLT_EVAL_METHOD_C99__
# 1 "<built-in>"
#define __FLT_EVAL_METHOD_C99__ 0
#define __ELF__ 1
# 1 "<command-line>"
# 31 "<command-line>"
# 1 "./cxx_macros.h" 1


#define CXX_MACROS_H__ 

#define USER_SPACE_START 524288
#define USER_SPACE_SIZE 20480
#define KERNEL_ADDRESS 0
#define UART_BASE 0x09000000
#define CONFIG_RAM_START 0x40000000
#define CONFIG_RAM_SIZE 0x40000000
#define ARCH_IS_qemu_virt 
#define PERIPHBASE 0x08000000
# 32 "<command-line>" 2
# 1 "D:/Pool/eclipse-workspace_aarch64/newspace/raspiOS/src/arch/qemu_virt/main_run_process.cpp"

# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/asm_instructions.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/asm_instructions.h"
#define INCLUDE_ASM_INSTRUCTIONS_H_ 

# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/def.h" 1


#define DEF_H__ 




# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstddef" 1 3
# 40 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstddef" 3
#define _GLIBCXX_CSTDDEF 1

       
# 43 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstddef" 3

#undef __need_wchar_t
#undef __need_ptrdiff_t
#undef __need_size_t
#undef __need_NULL
#undef __need_wint_t
# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 1 3
# 31 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_CXX_CONFIG_H 1


#define _GLIBCXX_RELEASE 7


#define __GLIBCXX__ 20171011
# 46 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_PURE __attribute__ ((__pure__))



#define _GLIBCXX_CONST __attribute__ ((__const__))



#define _GLIBCXX_NORETURN __attribute__ ((__noreturn__))
# 67 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY 1


#define _GLIBCXX_VISIBILITY(V) __attribute__ ((__visibility__ (#V)))
# 81 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_USE_DEPRECATED 1



#define _GLIBCXX_DEPRECATED __attribute__ ((__deprecated__))






#define _GLIBCXX_ABI_TAG_CXX11 __attribute ((__abi_tag__ ("cxx11")))
# 101 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_CONSTEXPR constexpr
#define _GLIBCXX_USE_CONSTEXPR constexpr
# 111 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX14_CONSTEXPR constexpr
# 121 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX17_CONSTEXPR 







#define _GLIBCXX17_INLINE 






#define _GLIBCXX_NOEXCEPT noexcept
#define _GLIBCXX_NOEXCEPT_IF(_COND) noexcept(_COND)
#define _GLIBCXX_USE_NOEXCEPT noexcept
#define _GLIBCXX_THROW(_EXC) 
# 149 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_NOTHROW _GLIBCXX_USE_NOEXCEPT






#define _GLIBCXX_THROW_OR_ABORT(_EXC) (__builtin_abort())







#define _GLIBCXX_NOEXCEPT_PARM 
#define _GLIBCXX_NOEXCEPT_QUAL 
# 178 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_EXTERN_TEMPLATE 1
# 229 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3

# 229 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}

#define _GLIBCXX_USE_DUAL_ABI 1







#define _GLIBCXX_USE_CXX11_ABI 1



namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
#define _GLIBCXX_NAMESPACE_CXX11 __cxx11::
#define _GLIBCXX_BEGIN_NAMESPACE_CXX11 namespace __cxx11 {
#define _GLIBCXX_END_NAMESPACE_CXX11 }
#define _GLIBCXX_DEFAULT_ABI_TAG _GLIBCXX_ABI_TAG_CXX11
# 272 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_INLINE_VERSION 0
# 330 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_BEGIN_NAMESPACE_VERSION 
#define _GLIBCXX_END_NAMESPACE_VERSION 
# 403 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_STD_C std
#define _GLIBCXX_BEGIN_NAMESPACE_CONTAINER _GLIBCXX_BEGIN_NAMESPACE_VERSION
#define _GLIBCXX_END_NAMESPACE_CONTAINER _GLIBCXX_END_NAMESPACE_VERSION
# 415 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_STD_A std
#define _GLIBCXX_BEGIN_NAMESPACE_ALGO _GLIBCXX_BEGIN_NAMESPACE_VERSION
#define _GLIBCXX_END_NAMESPACE_ALGO _GLIBCXX_END_NAMESPACE_VERSION




#undef _GLIBCXX_LONG_DOUBLE_COMPAT
# 434 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_NAMESPACE_LDBL 
#define _GLIBCXX_BEGIN_NAMESPACE_LDBL 
#define _GLIBCXX_END_NAMESPACE_LDBL 


#define _GLIBCXX_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_NAMESPACE_CXX11
#define _GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_BEGIN_NAMESPACE_CXX11
#define _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_END_NAMESPACE_CXX11
# 487 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define __glibcxx_assert(_Condition) 
# 512 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(A) 


#define _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(A) 



#define _GLIBCXX_BEGIN_EXTERN_C extern "C" {
#define _GLIBCXX_END_EXTERN_C }

#define _GLIBCXX_USE_ALLOCATOR_NEW 1
# 533 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\os_defines.h" 1 3
# 31 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\os_defines.h" 3
#define _GLIBCXX_OS_DEFINES 1
# 534 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 2 3


# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\cpu_defines.h" 1 3
# 31 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\cpu_defines.h" 3
#define _GLIBCXX_CPU_DEFINES 1
# 537 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 2 3




#define _GLIBCXX_PSEUDO_VISIBILITY(V) 






#define _GLIBCXX_WEAK_DEFINITION 







#define _GLIBCXX_USE_WEAK_REF __GXX_WEAK__
# 569 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_TXN_SAFE 
#define _GLIBCXX_TXN_SAFE_DYN 
# 588 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_FAST_MATH 0






#define __N(msgid) (msgid)


#undef min
#undef max





#define _GLIBCXX_USE_C99_MATH _GLIBCXX11_USE_C99_MATH


#define _GLIBCXX_USE_C99_COMPLEX _GLIBCXX11_USE_C99_COMPLEX


#define _GLIBCXX_USE_C99_STDIO _GLIBCXX11_USE_C99_STDIO


#define _GLIBCXX_USE_C99_STDLIB _GLIBCXX11_USE_C99_STDLIB


#define _GLIBCXX_USE_C99_WCHAR _GLIBCXX11_USE_C99_WCHAR
# 642 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_ACOSF 1
# 651 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_ASINF 1





#define _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE 1


#define _GLIBCXX_HAVE_ATAN2F 1





#define _GLIBCXX_HAVE_ATANF 1
# 678 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_CEILF 1





#define _GLIBCXX_HAVE_COMPLEX_H 1


#define _GLIBCXX_HAVE_COSF 1


#define _GLIBCXX_HAVE_COSHF 1
# 705 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_EBADMSG 1


#define _GLIBCXX_HAVE_ECANCELED 1


#define _GLIBCXX_HAVE_ECHILD 1


#define _GLIBCXX_HAVE_EIDRM 1





#define _GLIBCXX_HAVE_ENODATA 1


#define _GLIBCXX_HAVE_ENOLINK 1


#define _GLIBCXX_HAVE_ENOSPC 1


#define _GLIBCXX_HAVE_ENOSR 1


#define _GLIBCXX_HAVE_ENOSTR 1


#define _GLIBCXX_HAVE_ENOTRECOVERABLE 1


#define _GLIBCXX_HAVE_ENOTSUP 1


#define _GLIBCXX_HAVE_EOVERFLOW 1


#define _GLIBCXX_HAVE_EOWNERDEAD 1


#define _GLIBCXX_HAVE_EPERM 1


#define _GLIBCXX_HAVE_EPROTO 1


#define _GLIBCXX_HAVE_ETIME 1


#define _GLIBCXX_HAVE_ETIMEDOUT 1


#define _GLIBCXX_HAVE_ETXTBSY 1


#define _GLIBCXX_HAVE_EWOULDBLOCK 1
# 771 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_EXPF 1





#define _GLIBCXX_HAVE_FABSF 1





#define _GLIBCXX_HAVE_FCNTL_H 1
# 798 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_FLOAT_H 1


#define _GLIBCXX_HAVE_FLOORF 1





#define _GLIBCXX_HAVE_FMODF 1
# 819 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_FREXPF 1





#define _GLIBCXX_HAVE_GETIPINFO 1


#define _GLIBCXX_HAVE_GETS 1


#define _GLIBCXX_HAVE_HYPOT 1
# 840 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_ICONV 1


#define _GLIBCXX_HAVE_IEEEFP_H 1


#define _GLIBCXX_HAVE_INT64_T 1


#define _GLIBCXX_HAVE_INT64_T_LONG 1





#define _GLIBCXX_HAVE_INTTYPES_H 1
# 876 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_ISWBLANK 1


#define _GLIBCXX_HAVE_LC_MESSAGES 1


#define _GLIBCXX_HAVE_LDEXPF 1
# 891 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_LIMIT_AS 0


#define _GLIBCXX_HAVE_LIMIT_DATA 0


#define _GLIBCXX_HAVE_LIMIT_FSIZE 0


#define _GLIBCXX_HAVE_LIMIT_RSS 0


#define _GLIBCXX_HAVE_LIMIT_VMEM 0





#define _GLIBCXX_HAVE_LOCALE_H 1


#define _GLIBCXX_HAVE_LOG10F 1





#define _GLIBCXX_HAVE_LOGF 1





#define _GLIBCXX_HAVE_MACHINE_ENDIAN_H 1


#define _GLIBCXX_HAVE_MACHINE_PARAM_H 1


#define _GLIBCXX_HAVE_MBSTATE_T 1


#define _GLIBCXX_HAVE_MEMALIGN 1


#define _GLIBCXX_HAVE_MEMORY_H 1





#define _GLIBCXX_HAVE_MODFF 1
# 963 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_POWF 1
# 987 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_SINF 1


#define _GLIBCXX_HAVE_SINHF 1
# 999 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_SLEEP 1


#define _GLIBCXX_HAVE_SQRTF 1





#define _GLIBCXX_HAVE_STDALIGN_H 1


#define _GLIBCXX_HAVE_STDBOOL_H 1


#define _GLIBCXX_HAVE_STDINT_H 1


#define _GLIBCXX_HAVE_STDLIB_H 1





#define _GLIBCXX_HAVE_STRERROR_R 1


#define _GLIBCXX_HAVE_STRINGS_H 1


#define _GLIBCXX_HAVE_STRING_H 1


#define _GLIBCXX_HAVE_STRTOF 1
# 1063 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_SYS_PARAM_H 1


#define _GLIBCXX_HAVE_SYS_RESOURCE_H 1
# 1078 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_SYS_STAT_H 1





#define _GLIBCXX_HAVE_SYS_TIME_H 1


#define _GLIBCXX_HAVE_SYS_TYPES_H 1
# 1096 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_S_ISREG 1


#define _GLIBCXX_HAVE_TANF 1


#define _GLIBCXX_HAVE_TANHF 1
# 1111 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_TGMATH_H 1
# 1120 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_UNISTD_H 1


#define _GLIBCXX_HAVE_USLEEP 1


#define _GLIBCXX_HAVE_UTIME_H 1


#define _GLIBCXX_HAVE_VFWSCANF 1


#define _GLIBCXX_HAVE_VSWSCANF 1


#define _GLIBCXX_HAVE_VWSCANF 1


#define _GLIBCXX_HAVE_WCHAR_H 1


#define _GLIBCXX_HAVE_WCSTOF 1


#define _GLIBCXX_HAVE_WCTYPE_H 1
# 1352 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define LT_OBJDIR ".libs/"





#define _GLIBCXX_PACKAGE_BUGREPORT ""


#define _GLIBCXX_PACKAGE_NAME "package-unused"


#define _GLIBCXX_PACKAGE_STRING "package-unused version-unused"


#define _GLIBCXX_PACKAGE_TARNAME "libstdc++"


#define _GLIBCXX_PACKAGE_URL ""


#define _GLIBCXX_PACKAGE__GLIBCXX_VERSION "version-unused"
# 1391 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define STDC_HEADERS 1
# 1403 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX11_USE_C99_MATH 1



#define _GLIBCXX11_USE_C99_STDIO 1



#define _GLIBCXX11_USE_C99_STDLIB 1



#define _GLIBCXX11_USE_C99_WCHAR 1
# 1424 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX98_USE_C99_MATH 1



#define _GLIBCXX98_USE_C99_STDIO 1



#define _GLIBCXX98_USE_C99_STDLIB 1



#define _GLIBCXX98_USE_C99_WCHAR 1


#define _GLIBCXX_ATOMIC_BUILTINS 1






#define _GLIBCXX_FULLY_DYNAMIC_STRING 0





#define _GLIBCXX_HOSTED 1




#define _GLIBCXX_MANGLE_SIZE_T m
# 1472 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_STDIO_EOF -1


#define _GLIBCXX_STDIO_SEEK_CUR 1


#define _GLIBCXX_STDIO_SEEK_END 2
# 1510 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_USE_C99_CTYPE_TR1 1







#define _GLIBCXX_USE_C99_INTTYPES_TR1 1



#define _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1 1







#define _GLIBCXX_USE_C99_STDINT_TR1 1
# 1547 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_USE_FCHMOD 1


#define _GLIBCXX_USE_FCHMODAT 1





#define _GLIBCXX_USE_GETTIMEOFDAY 1





#define _GLIBCXX_USE_INT128 1





#define _GLIBCXX_USE_LONG_LONG 1
# 1593 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_USE_SC_NPROCESSORS_ONLN 1
# 1608 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_USE_TMPNAM 1






#define _GLIBCXX_USE_WCHAR_T 1


#define _GLIBCXX_VERBOSE 1





#define _GTHREAD_USE_MUTEX_TIMEDLOCK 1
# 50 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstddef" 2 3
# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 1 3 4
# 39 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#define _STDDEF_H 
#define _STDDEF_H_ 

#define _ANSI_STDDEF_H 
# 137 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#define _PTRDIFF_T 
#define _T_PTRDIFF_ 
#define _T_PTRDIFF 
#define __PTRDIFF_T 
#define _PTRDIFF_T_ 
#define _BSD_PTRDIFF_T_ 
#define ___int_ptrdiff_t_h 
#define _GCC_PTRDIFF_T 
#define _PTRDIFF_T_DECLARED 



typedef long int ptrdiff_t;
# 161 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#undef __need_ptrdiff_t
# 187 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#define __size_t__ 
#define __SIZE_T__ 
#define _SIZE_T 
#define _SYS_SIZE_T_H 
#define _T_SIZE_ 
#define _T_SIZE 
#define __SIZE_T 
#define _SIZE_T_ 
#define _BSD_SIZE_T_ 
#define _SIZE_T_DEFINED_ 
#define _SIZE_T_DEFINED 
#define _BSD_SIZE_T_DEFINED_ 
#define _SIZE_T_DECLARED 
#define ___int_size_t_h 
#define _GCC_SIZE_T 
#define _SIZET_ 







#define __size_t 





typedef long unsigned int size_t;
# 238 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#undef __need_size_t
# 267 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#define __wchar_t__ 
#define __WCHAR_T__ 
#define _WCHAR_T 
#define _T_WCHAR_ 
#define _T_WCHAR 
#define __WCHAR_T 
#define _WCHAR_T_ 
#define _BSD_WCHAR_T_ 
#define _WCHAR_T_DEFINED_ 
#define _WCHAR_T_DEFINED 
#define _WCHAR_T_H 
#define ___int_wchar_t_h 
#define __INT_WCHAR_T_H 
#define _GCC_WCHAR_T 
#define _WCHAR_T_DECLARED 
# 294 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#undef _BSD_WCHAR_T_
# 347 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#undef __need_wchar_t
# 401 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#undef NULL

#define NULL __null
# 412 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)




#define _GCC_MAX_ALIGN_T 



typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
# 437 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
} max_align_t;





#define _GXX_NULLPTR_T 
  typedef decltype(nullptr) nullptr_t;
# 51 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstddef" 2 3


namespace std
{

  using ::max_align_t;
}
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/def.h" 2
# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstdint" 1 3
# 30 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstdint" 3
#define _GLIBCXX_CSTDINT 1

       
# 33 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstdint" 3
# 41 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstdint" 3
# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stdint.h" 1 3 4
# 11 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stdint.h" 3 4
# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stdint-gcc.h" 1 3 4
# 29 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stdint-gcc.h" 3 4
#define _GCC_STDINT_H 




typedef signed char int8_t;


typedef short int int16_t;


typedef int int32_t;


typedef long int int64_t;


typedef unsigned char uint8_t;


typedef short unsigned int uint16_t;


typedef unsigned int uint32_t;


typedef long unsigned int uint64_t;




typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;
typedef long int int_least64_t;
typedef unsigned char uint_least8_t;
typedef short unsigned int uint_least16_t;
typedef unsigned int uint_least32_t;
typedef long unsigned int uint_least64_t;



typedef int int_fast8_t;
typedef int int_fast16_t;
typedef int int_fast32_t;
typedef long int int_fast64_t;
typedef unsigned int uint_fast8_t;
typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
typedef long unsigned int uint_fast64_t;




typedef long int intptr_t;


typedef long unsigned int uintptr_t;




typedef long int intmax_t;
typedef long unsigned int uintmax_t;







#undef INT8_MAX
#define INT8_MAX __INT8_MAX__
#undef INT8_MIN
#define INT8_MIN (-INT8_MAX - 1)


#undef UINT8_MAX
#define UINT8_MAX __UINT8_MAX__


#undef INT16_MAX
#define INT16_MAX __INT16_MAX__
#undef INT16_MIN
#define INT16_MIN (-INT16_MAX - 1)


#undef UINT16_MAX
#define UINT16_MAX __UINT16_MAX__


#undef INT32_MAX
#define INT32_MAX __INT32_MAX__
#undef INT32_MIN
#define INT32_MIN (-INT32_MAX - 1)


#undef UINT32_MAX
#define UINT32_MAX __UINT32_MAX__


#undef INT64_MAX
#define INT64_MAX __INT64_MAX__
#undef INT64_MIN
#define INT64_MIN (-INT64_MAX - 1)


#undef UINT64_MAX
#define UINT64_MAX __UINT64_MAX__


#undef INT_LEAST8_MAX
#define INT_LEAST8_MAX __INT_LEAST8_MAX__
#undef INT_LEAST8_MIN
#define INT_LEAST8_MIN (-INT_LEAST8_MAX - 1)
#undef UINT_LEAST8_MAX
#define UINT_LEAST8_MAX __UINT_LEAST8_MAX__
#undef INT_LEAST16_MAX
#define INT_LEAST16_MAX __INT_LEAST16_MAX__
#undef INT_LEAST16_MIN
#define INT_LEAST16_MIN (-INT_LEAST16_MAX - 1)
#undef UINT_LEAST16_MAX
#define UINT_LEAST16_MAX __UINT_LEAST16_MAX__
#undef INT_LEAST32_MAX
#define INT_LEAST32_MAX __INT_LEAST32_MAX__
#undef INT_LEAST32_MIN
#define INT_LEAST32_MIN (-INT_LEAST32_MAX - 1)
#undef UINT_LEAST32_MAX
#define UINT_LEAST32_MAX __UINT_LEAST32_MAX__
#undef INT_LEAST64_MAX
#define INT_LEAST64_MAX __INT_LEAST64_MAX__
#undef INT_LEAST64_MIN
#define INT_LEAST64_MIN (-INT_LEAST64_MAX - 1)
#undef UINT_LEAST64_MAX
#define UINT_LEAST64_MAX __UINT_LEAST64_MAX__

#undef INT_FAST8_MAX
#define INT_FAST8_MAX __INT_FAST8_MAX__
#undef INT_FAST8_MIN
#define INT_FAST8_MIN (-INT_FAST8_MAX - 1)
#undef UINT_FAST8_MAX
#define UINT_FAST8_MAX __UINT_FAST8_MAX__
#undef INT_FAST16_MAX
#define INT_FAST16_MAX __INT_FAST16_MAX__
#undef INT_FAST16_MIN
#define INT_FAST16_MIN (-INT_FAST16_MAX - 1)
#undef UINT_FAST16_MAX
#define UINT_FAST16_MAX __UINT_FAST16_MAX__
#undef INT_FAST32_MAX
#define INT_FAST32_MAX __INT_FAST32_MAX__
#undef INT_FAST32_MIN
#define INT_FAST32_MIN (-INT_FAST32_MAX - 1)
#undef UINT_FAST32_MAX
#define UINT_FAST32_MAX __UINT_FAST32_MAX__
#undef INT_FAST64_MAX
#define INT_FAST64_MAX __INT_FAST64_MAX__
#undef INT_FAST64_MIN
#define INT_FAST64_MIN (-INT_FAST64_MAX - 1)
#undef UINT_FAST64_MAX
#define UINT_FAST64_MAX __UINT_FAST64_MAX__


#undef INTPTR_MAX
#define INTPTR_MAX __INTPTR_MAX__
#undef INTPTR_MIN
#define INTPTR_MIN (-INTPTR_MAX - 1)


#undef UINTPTR_MAX
#define UINTPTR_MAX __UINTPTR_MAX__


#undef INTMAX_MAX
#define INTMAX_MAX __INTMAX_MAX__
#undef INTMAX_MIN
#define INTMAX_MIN (-INTMAX_MAX - 1)
#undef UINTMAX_MAX
#define UINTMAX_MAX __UINTMAX_MAX__



#undef PTRDIFF_MAX
#define PTRDIFF_MAX __PTRDIFF_MAX__
#undef PTRDIFF_MIN
#define PTRDIFF_MIN (-PTRDIFF_MAX - 1)

#undef SIG_ATOMIC_MAX
#define SIG_ATOMIC_MAX __SIG_ATOMIC_MAX__
#undef SIG_ATOMIC_MIN
#define SIG_ATOMIC_MIN __SIG_ATOMIC_MIN__

#undef SIZE_MAX
#define SIZE_MAX __SIZE_MAX__

#undef WCHAR_MAX
#define WCHAR_MAX __WCHAR_MAX__
#undef WCHAR_MIN
#define WCHAR_MIN __WCHAR_MIN__

#undef WINT_MAX
#define WINT_MAX __WINT_MAX__
#undef WINT_MIN
#define WINT_MIN __WINT_MIN__







#undef INT8_C
#define INT8_C(c) __INT8_C(c)
#undef INT16_C
#define INT16_C(c) __INT16_C(c)
#undef INT32_C
#define INT32_C(c) __INT32_C(c)
#undef INT64_C
#define INT64_C(c) __INT64_C(c)
#undef UINT8_C
#define UINT8_C(c) __UINT8_C(c)
#undef UINT16_C
#define UINT16_C(c) __UINT16_C(c)
#undef UINT32_C
#define UINT32_C(c) __UINT32_C(c)
#undef UINT64_C
#define UINT64_C(c) __UINT64_C(c)
#undef INTMAX_C
#define INTMAX_C(c) __INTMAX_C(c)
#undef UINTMAX_C
#define UINTMAX_C(c) __UINTMAX_C(c)
# 12 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stdint.h" 2 3 4

#define _GCC_WRAP_STDINT_H 
# 42 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstdint" 2 3




namespace std
{
  using ::int8_t;
  using ::int16_t;
  using ::int32_t;
  using ::int64_t;

  using ::int_fast8_t;
  using ::int_fast16_t;
  using ::int_fast32_t;
  using ::int_fast64_t;

  using ::int_least8_t;
  using ::int_least16_t;
  using ::int_least32_t;
  using ::int_least64_t;

  using ::intmax_t;
  using ::intptr_t;

  using ::uint8_t;
  using ::uint16_t;
  using ::uint32_t;
  using ::uint64_t;

  using ::uint_fast8_t;
  using ::uint_fast16_t;
  using ::uint_fast32_t;
  using ::uint_fast64_t;

  using ::uint_least8_t;
  using ::uint_least16_t;
  using ::uint_least32_t;
  using ::uint_least64_t;

  using ::uintmax_t;
  using ::uintptr_t;
}
# 10 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/def.h" 2

#define AS_MACRO __attribute__((always_inline)) inline
#define arrsizeof(arr) (sizeof(arr)/sizeof(arr[0]))
#define NULL_CHAR '\0'


#define INFO "[INFO] "
#define WARNING "[WARNING] "
#define FATAL "[FATAL] "




# 22 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/def.h"
extern const char EMPTY_STR[1];



constexpr int UNIT_K=1024;
constexpr int KiB = UNIT_K;
constexpr int MiB = UNIT_K * KiB;
constexpr int GiB = UNIT_K * MiB;


#define TIE2(t1,v1,t2,v2) t1 v1;t2 v2;std::tie((v1),(v2))


#define __stringify_1(x) #x
#define __stringify(x) __stringify_1(x)




#define HEX32(a,b) 0x ##a ##b
#define HEX64(a,b,c,d) 0x ##a ##b ##c ##d


#define BIN32(a,bb,c,d) 0b ##a ##bb ##c ##d
#define BIN64(a,bb,c,d,e,f,g,h) 0b ##a ##bb ##c ##d ##e ##f ##g ##h
# 12 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/asm_instructions.h" 2
# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/system_common_registers.h" 1



#define _________INCLUDE_ARCH_COMMON_AARCH64_SYSTEM_COMMON_REGISTERS_H__ 

# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/registers_defines.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/registers_defines.h"
#define INCLUDE_ARCH_COMMON_AARCH64_SYSTEM_REGISTERS_BASE_H_ 



# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/kernel.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/kernel.h"
#define INCLUDE_KERNEL_H_ 
# 14 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/registers_defines.h" 2
# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/IntegerFormatter.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/IntegerFormatter.h"
#define INCLUDE_INTEGERINTEGERFORMATTER_H_ 


# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/io/Output.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/io/Output.h"
#define INCLUDE_IO_OUTPUT_H_ 

# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/io/printk.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/io/printk.h"
#define INCLUDE_IO_PRINTK_H_ 




size_t printk(char ch);


size_t printk(const char *s);

size_t printk(const char *s,size_t n);


void flush();




# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/templates_implementation/printk.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/templates_implementation/printk.h"
#define INCLUDE_TEMPLATES_IMPLEMENTATION_PRINTK_H_ 

# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/io/printk.h" 1
# 12 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/templates_implementation/printk.h" 2
# 28 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/io/printk.h" 2
# 12 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/io/Output.h" 2

class Output{
public:
 size_t print(const char *s,size_t len);
 size_t print(const char *s);
 Output & operator<<(char ch);

 Output & operator<<(uint8_t u);
 Output & operator<<(uint16_t u);
 Output & operator<<(uint32_t u);
 Output & operator<<(bool i);
 Output & operator<<(short i);
 Output & operator<<(int i);
 Output & operator<<(double d);
 Output & operator<<(const char *s);
 Output & operator<<(size_t i);
 Output & operator<<(const void *p);
 Output & operator<<(const volatile void *p);
 Output & flush();
};


extern Output kout;


constexpr size_t koutBufSize = 65;
extern char koutBuf[koutBufSize];
# 13 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/IntegerFormatter.h" 2


template <int Base>
class IntegerFormatter{
public:
 IntegerFormatter(size_t num);
 IntegerFormatter(const void *p);
 char *format()const;
private:
 size_t num;
};


using Hex=IntegerFormatter<16>;
using Dec=IntegerFormatter<10>;
using Bin=IntegerFormatter<2>;

template <int Base>
Output & operator<<(Output & out,const IntegerFormatter<Base> &hf);



# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/templates_implementation/IntegerFormatter.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/templates_implementation/IntegerFormatter.h"
#define INCLUDE_TEMPLATES_IMPLEMENTATION_INTEGERFORMATTER_H_ 

# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/IntegerFormatter.h" 1
# 12 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/templates_implementation/IntegerFormatter.h" 2
# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/generic_util.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/generic_util.h"
#define INCLUDE_GENERIC_UTIL_H_ 




void delayCPU(size_t i);
void delayCPU(size_t i,size_t j);
void haltCPU();





extern const char digitsMap[];



size_t itob(size_t i,char *dst,size_t size);
size_t itod(size_t i,char *dst,size_t size);
size_t itox(size_t i,char *dst,size_t size);

size_t itos(size_t i,unsigned int base,char *dst,size_t size);


uint64_t alignNext(uint64_t d,uint64_t alignment);
uint64_t alignPrevious(uint64_t d,uint64_t alignment);





void reverse(char *str,size_t size);



const char *strOffset(const char *p,size_t offset);







__attribute__((always_inline)) inline uint64_t upperMaskBits(uint64_t i)
{
 return 0xffffffffffffffff >> (64-i) << (64-i);
}

__attribute__((always_inline)) inline uint64_t lowerMaskBits(uint64_t i)
{
 return 0xffffffffffffffff << (64-i) >> (64-i);
}
__attribute__((always_inline)) inline uint64_t middleMaskBits(uint64_t lowerBound,uint64_t upperBound)
{

 return 0xffffffffffffffff >> lowerBound << (64 - upperBound - 1 + lowerBound) >> (64-upperBound -1);
}


template <class Type,class ValueType>
__attribute__((always_inline)) inline void setBits(Type & i, uint8_t lowerBound,uint8_t upperBound,ValueType v)
{

 i = (i & (~middleMaskBits(lowerBound, upperBound))) |((v & lowerMaskBits(upperBound - lowerBound + 1))<<lowerBound );
}
__attribute__((always_inline)) inline uint64_t getBits(uint64_t i, uint8_t lowerBound,uint8_t upperBound)
{
 return (i>>lowerBound)&lowerMaskBits(upperBound - lowerBound + 1);
}
template <class Type,class ValueType>
__attribute__((always_inline)) inline void setBit(Type & i,uint8_t index,ValueType v)
{
 setBits(i,index,index,v);
}
__attribute__((always_inline)) inline uint64_t getBit(uint64_t i,uint8_t index)
{
 return getBits(i,index,index);
}
# 13 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/templates_implementation/IntegerFormatter.h" 2


template <int Base>
IntegerFormatter<Base>::IntegerFormatter(size_t num)
 :num(num){}

template <int Base>
IntegerFormatter<Base>::IntegerFormatter(const void *p)
 :num(reinterpret_cast<size_t>(p)){}

template <int Base>
char *IntegerFormatter<Base>::format()const
{
 itos(num, Base, koutBuf, koutBufSize);
 return koutBuf;
}

template <int Base>
Output & operator<<(Output &out,const IntegerFormatter<Base> &hf)
{
 out << hf.format();
 return out;
}
# 36 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/IntegerFormatter.h" 2
# 15 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/registers_defines.h" 2
# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/gicv3_defines.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/gicv3_defines.h"
#define INCLUDE_ARCH_COMMON_AARCH64_GICV3_BASE_H_ 


#define GIC_DIST_BASE 0x08000000
#define GIC_CPU_BASE 0x08010000
#define GIC_V2M_BASE 0x08020000
#define GIC_ITS_BASE 0x08080000
#define GIC_REDIST_BASE 0x080A0000


#define GIC_REDIST_RD_BASE (GIC_REDIST_BASE)

#define GIC_REDIST_SGI_BASE (GIC_REDIST_RD_BASE + 1024*64)

#define GICD_CTLR_MEM_MAPPED_ADDR (GIC_DIST_BASE+0)
#define GICD_IIDR_MEM_MAPPED_ADDR (GIC_DIST_BASE+0x8)
#define GICD_ISENABLER_MEM_MAPPED_ADDR(n) (GIC_DIST_BASE + 0x100 + 4*(n))
#define GICD_ISPENDR_MEM_MAPPED_ADDR(n) (GIC_DIST_BASE + 0x200 + 4*(n))
#define GICD_ISACTIVER_MEM_MAPPED_ADDR(n) (GIC_DIST_BASE + 0x300 + 4*(n))
#define GICD_ISENABLER0_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(0)
#define GICD_ISENABLER1_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(1)
#define GICD_ISENABLER2_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(2)
#define GICD_ISENABLER3_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(3)
#define GICD_ISENABLER4_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(4)
#define GICD_ISENABLER5_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(5)
#define GICD_ISENABLER6_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(6)
#define GICD_ISENABLER7_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(7)
#define GICD_ISENABLER8_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(8)
#define GICD_ISENABLER9_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(9)
#define GICD_ISENABLER10_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(10)
#define GICD_ISENABLER11_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(11)
#define GICD_ISENABLER12_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(12)
#define GICD_ISENABLER13_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(13)
#define GICD_ISENABLER14_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(14)
#define GICD_ISENABLER15_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(15)
#define GICD_ISENABLER16_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(16)
#define GICD_ISENABLER17_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(17)
#define GICD_ISENABLER18_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(18)
#define GICD_ISENABLER19_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(19)
#define GICD_ISENABLER20_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(20)
#define GICD_ISENABLER21_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(21)
#define GICD_ISENABLER22_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(22)
#define GICD_ISENABLER23_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(23)
#define GICD_ISENABLER24_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(24)
#define GICD_ISENABLER25_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(25)
#define GICD_ISENABLER26_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(26)
#define GICD_ISENABLER27_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(27)
#define GICD_ISENABLER28_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(28)
#define GICD_ISENABLER29_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(29)
#define GICD_ISENABLER30_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(30)
#define GICD_ISENABLER31_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(31)

#define GICD_ISPENDR0_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(0)
#define GICD_ISPENDR1_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(1)
#define GICD_ISPENDR2_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(2)
#define GICD_ISPENDR3_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(3)
#define GICD_ISPENDR4_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(4)
#define GICD_ISPENDR5_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(5)
#define GICD_ISPENDR6_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(6)
#define GICD_ISPENDR7_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(7)
#define GICD_ISPENDR8_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(8)
#define GICD_ISPENDR9_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(9)
#define GICD_ISPENDR10_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(10)
#define GICD_ISPENDR11_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(11)
#define GICD_ISPENDR12_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(12)
#define GICD_ISPENDR13_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(13)
#define GICD_ISPENDR14_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(14)
#define GICD_ISPENDR15_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(15)
#define GICD_ISPENDR16_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(16)
#define GICD_ISPENDR17_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(17)
#define GICD_ISPENDR18_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(18)
#define GICD_ISPENDR19_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(19)
#define GICD_ISPENDR20_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(20)
#define GICD_ISPENDR21_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(21)
#define GICD_ISPENDR22_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(22)
#define GICD_ISPENDR23_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(23)
#define GICD_ISPENDR24_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(24)
#define GICD_ISPENDR25_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(25)
#define GICD_ISPENDR26_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(26)
#define GICD_ISPENDR27_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(27)
#define GICD_ISPENDR28_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(28)
#define GICD_ISPENDR29_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(29)
#define GICD_ISPENDR30_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(30)
#define GICD_ISPENDR31_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(31)


#define GICD_ISACTIVER0_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(0)
#define GICD_ISACTIVER1_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(1)
#define GICD_ISACTIVER2_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(2)
#define GICD_ISACTIVER3_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(3)
#define GICD_ISACTIVER4_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(4)
#define GICD_ISACTIVER5_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(5)
#define GICD_ISACTIVER6_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(6)
#define GICD_ISACTIVER7_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(7)
#define GICD_ISACTIVER8_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(8)
#define GICD_ISACTIVER9_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(9)
#define GICD_ISACTIVER10_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(10)
#define GICD_ISACTIVER11_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(11)
#define GICD_ISACTIVER12_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(12)
#define GICD_ISACTIVER13_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(13)
#define GICD_ISACTIVER14_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(14)
#define GICD_ISACTIVER15_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(15)
#define GICD_ISACTIVER16_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(16)
#define GICD_ISACTIVER17_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(17)
#define GICD_ISACTIVER18_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(18)
#define GICD_ISACTIVER19_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(19)
#define GICD_ISACTIVER20_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(20)
#define GICD_ISACTIVER21_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(21)
#define GICD_ISACTIVER22_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(22)
#define GICD_ISACTIVER23_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(23)
#define GICD_ISACTIVER24_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(24)
#define GICD_ISACTIVER25_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(25)
#define GICD_ISACTIVER26_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(26)
#define GICD_ISACTIVER27_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(27)
#define GICD_ISACTIVER28_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(28)
#define GICD_ISACTIVER29_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(29)
#define GICD_ISACTIVER30_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(30)
#define GICD_ISACTIVER31_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(31)

#define GICR_IPRIORITYR_MEM_MAPPED_ADDR(n) (GIC_REDIST_SGI_BASE + 0x400 + 4*(n))
#define GICR_IPRIORITYR0_MEM_MAPPED_ADDR GICR_IPRIORITYR_MEM_MAPPED_ADDR(0)
#define GICR_IPRIORITYR1_MEM_MAPPED_ADDR GICR_IPRIORITYR_MEM_MAPPED_ADDR(1)
#define GICR_IPRIORITYR2_MEM_MAPPED_ADDR GICR_IPRIORITYR_MEM_MAPPED_ADDR(2)
#define GICR_IPRIORITYR3_MEM_MAPPED_ADDR GICR_IPRIORITYR_MEM_MAPPED_ADDR(3)
#define GICR_IPRIORITYR4_MEM_MAPPED_ADDR GICR_IPRIORITYR_MEM_MAPPED_ADDR(4)
#define GICR_IPRIORITYR5_MEM_MAPPED_ADDR GICR_IPRIORITYR_MEM_MAPPED_ADDR(5)
#define GICR_IPRIORITYR6_MEM_MAPPED_ADDR GICR_IPRIORITYR_MEM_MAPPED_ADDR(6)
#define GICR_IPRIORITYR7_MEM_MAPPED_ADDR GICR_IPRIORITYR_MEM_MAPPED_ADDR(7)

#define GICR_CTLR_MEM_MAPPED_ADDR (GIC_REDIST_BASE+0)
#define GICR_WAKER_MEM_MAPPED_ADDR (GIC_REDIST_BASE+0x14)
#define GICR_IGROUPR0_MEM_MAPPED_ADDR (GIC_REDIST_SGI_BASE + 0x80)
#define GICR_ISACTIVER0_MEM_MAPPED_ADDR (GIC_REDIST_SGI_BASE + 0x300)
#define GICR_ISPENDR0_MEM_MAPPED_ADDR (GIC_REDIST_SGI_BASE+0x200)
#define GICR_ISENABLER0_MEM_MAPPED_ADDR (GIC_REDIST_SGI_BASE + 0x100)

#define GICR_ICENABLER0_MEM_MAPPED_ADDR (GIC_REDIST_SGI_BASE+0x180)
#define GICR_ICFGR0_MEM_MAPPED_ADDR (GIC_REDIST_SGI_BASE+0xc00)
#define GICR_ICFGR1_MEM_MAPPED_ADDR (GIC_REDIST_SGI_BASE+0xc04)
#define GICR_ICACTIVER0_MEM_MAPPED_ADDR (GIC_REDIST_SGI_BASE + 0x380)
# 16 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/registers_defines.h" 2


#define DEFINE_REG_READ(regTypeInCXX,regNameInAsm) regTypeInCXX regTypeInCXX::read(){ regTypeInCXX res;__asm__ __volatile__("mrs %0," __stringify(regNameInAsm) "\n\t":"=r"(res));return res;}
#define DEFINE_REG_UPDATE_READ(regTypeInCXX,regNameInAsm) regTypeInCXX regTypeInCXX::updateRead(){ __asm__ __volatile__("mrs %0," __stringify(regNameInAsm) "\n\t":"=r"(*this));return *this;}
#define DEFINE_REG_WRITE(regTypeInCXX,regNameInAsm) void regTypeInCXX::write() const { __asm__ __volatile__("msr " __stringify(regNameInAsm) ",%0 \n\t"::"r"(*this));}


#define SETUP_REG_STD_READ(regname) DEFINE_REG_READ(Reg ##regname,regname)
#define SETUP_REG_STD_UPDATE_READ(regname) DEFINE_REG_UPDATE_READ(Reg ##regname,regname)
#define SETUP_REG_STD_WRITE(regname) DEFINE_REG_WRITE(Reg ##regname,regname)



#define SYS_REG_GCC_REPR(op0,op1,crn,crm,op2) s ##op0 ##_ ##op1 ##_ ##c ##crn ##_ ##c ##crm ##_ ##op2


#define PAN_GCC_REPR SYS_REG_GCC_REPR(3,0,4,2,3)
#define ICC_BPR0_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,8,3)
#define ICC_BPR1_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,12,3)
#define ICC_CTLR_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,12,4)
#define ICC_CTLR_EL3_GCC_REPR SYS_REG_GCC_REPR(3,6,12,12,4)
#define ICC_DIR_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,11,1)
#define ICC_EOIR0_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,8,1)
#define ICC_EOIR1_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,12,1)
#define ICC_HPPIR0_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,8,2)
#define ICC_HPPIR1_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,12,2)
#define ICC_IAR0_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,8,0)
#define ICC_IAR1_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,12,0)
#define ICC_IGRPEN0_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,12,6)
#define ICC_IGRPEN1_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,12,7)
#define ICC_IGRPEN1_EL3_GCC_REPR SYS_REG_GCC_REPR(3,6,12,12,7)
#define ICC_PMR_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,4,6,0)
#define ICC_RPR_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,11,3)
#define ICC_SGI0R_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,11,7)
#define ICC_SGI1R_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,11,5)
#define ICC_SRE_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,12,5)
#define ICC_SRE_EL2_GCC_REPR SYS_REG_GCC_REPR(3,4,12,9,5)
#define ICC_SRE_EL3_GCC_REPR SYS_REG_GCC_REPR(3,6,12,12,5)

#define SETUP_REG_GCC_REPR_READ(name) DEFINE_REG_READ(Reg ##name,name ##_GCC_REPR)
#define SETUP_REG_GCC_REPR_UPDATE_READ(name) DEFINE_REG_UPDATE_READ(Reg ##name,name ##_GCC_REPR)
#define SETUP_REG_GCC_REPR_WRITE(name) DEFINE_REG_WRITE(Reg ##name,name ##_GCC_REPR)




#define ENCODE_MSR 11010101000


#define ENCODE_MRS 11010101001
#define ENCODE_ICC_IGRPEN0_EL1 1100011001100110
#define ENCODE_X0 00000


#define SETUP_REG_HARD_CODED_READ(name) Reg ##name Reg ##name::read() { Reg ##name res; __asm__ __volatile__( ".4byte 0b" __stringify(ENCODE_MRS) __stringify(ENCODE_ ##name) __stringify(ENCODE_X0) "\n\t" "mov %0,x0 \n\t" :"=r"(res)); return res; }
# 81 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/registers_defines.h"
#define SETUP_REG_HARD_CODED_UPDATE_READ(name) Reg ##name Reg ##name::updateRead() { __asm__ __volatile__( ".4byte 0b" __stringify(ENCODE_MRS) __stringify(ENCODE_ ##name) __stringify(ENCODE_X0) "\n\t" "mov %0,x0 \n\t" :"=r"(*this)); return *this;}
# 91 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/registers_defines.h"
#define SETUP_REG_HARD_CODED_WRITE(name) void Reg ##name::write() const{ __asm__ __volatile( "mov x0,%0 \n\t" ".4byte 0b" __stringify(ENCODE_MSR) __stringify(ENCODE_ ##name) __stringify(ENCODE_X0) "\n\t" : :"r"(*this) ); }
# 108 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/registers_defines.h"
#define SETUP_REG_MEM_MAPPED_READ(name) Reg ##name Reg ##name::read() { return *reinterpret_cast<Reg ##name*>(name ##_MEM_MAPPED_ADDR);}





#define SETUP_REG_MEM_MAPPED_UPDATE_READ(name) Reg ##name Reg ##name::updateRead() { return *this=*reinterpret_cast<Reg ##name*>(name ##_MEM_MAPPED_ADDR);}





#define SETUP_REG_MEM_MAPPED_WRITE(name) void Reg ##name::write() const{ *reinterpret_cast<Reg ##name*>(name ##_MEM_MAPPED_ADDR)=*this;}







#define SETUP_REG_PC_READ(name) Reg ##name Reg ##name::read() { Reg ##name res; __asm__ __volatile__("adr %0,#0\n\t":"=r"(res)); return res; }






#define SETUP_REG_PC_UPDATE_READ(name) Reg ##name Reg ##name::updateRead() { __asm__ __volatile__("adr %0,#0\n\t":"=r"(*this)); return *this; }





#define SETUP_REG_PC_WRITE(name) void Reg ##name::write()const { __asm__ __volatile__("br %0\n\t"::"r"(*this)); }







#define SETUP_REG_ANY_MEM_READ(name) Reg ##name Reg ##name::read(void *p) { return *reinterpret_cast<Reg ##name*>(p);}Reg ##name Reg ##name::read(size_t p){ return *reinterpret_cast<Reg ##name*>(p);}
# 159 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/registers_defines.h"
#define SETUP_REG_ANY_MEM_WRITE(name) void Reg ##name::write(void *p)const { *reinterpret_cast<Reg ##name*>(p)=*this; }void Reg ##name::write(size_t p)const{ *reinterpret_cast<Reg ##name*>(p)=*this;}
# 170 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/registers_defines.h"
#define SETUP_REG_LOAD_STORE_READ(name) Reg ##name Reg ##name::read() { Reg ##name res{0}; __asm__ __volatile__("str " __stringify(name)",%0 \n\t"::"m"(res)); return res; }






#define SETUP_REG_LOAD_STORE_UPDATE_READ(name) Reg ##name Reg ##name::updateRead() { __asm__ __volatile__("str " __stringify(name)",%0 \n\t"::"m"(*this)); return *this; }





#define SETUP_REG_LOAD_STORE_WRITE(name) void Reg ##name::write()const { __asm__ __volatile__("ldr " __stringify(name) ",%0 \n\t"::"m"(*this)); }
# 7 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/system_common_registers.h" 2

class RegCurrentEL{
public:
        uint32_t RES0_0:2;
        uint32_t EL:2;
        uint32_t RES0_1:28;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "CurrentEL : "
                <<"RES0_0 = "<< RES0_0 << ","
                <<"EL = "<< EL << ","
                <<"RES0_1 = "<< RES0_1
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegCurrentEL read();
        __attribute__((always_inline)) inline RegCurrentEL updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegCurrentEL RegCurrentEL::read(){ RegCurrentEL res;__asm__ __volatile__("mrs %0," "CurrentEL" "\n\t":"=r"(res));return res;}
RegCurrentEL RegCurrentEL::updateRead(){ __asm__ __volatile__("mrs %0," "CurrentEL" "\n\t":"=r"(*this));return *this;}
void RegCurrentEL::write() const { __asm__ __volatile__("msr " "CurrentEL" ",%0 \n\t"::"r"(*this));}



class RegDAIF{
public:
        uint32_t RES0_0:6;
        uint32_t F:1;
        uint32_t I:1;
        uint32_t A:1;
        uint32_t D:1;
        uint32_t RES0_1:22;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "DAIF : "
                <<"RES0_0 = "<< RES0_0 << ","
                <<"F = "<< F << ","
                <<"I = "<< I << ","
                <<"A = "<< A << ","
                <<"D = "<< D << ","
                <<"RES0_1 = "<< RES0_1
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegDAIF read();
        __attribute__((always_inline)) inline RegDAIF updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegDAIF RegDAIF::read(){ RegDAIF res;__asm__ __volatile__("mrs %0," "DAIF" "\n\t":"=r"(res));return res;}
RegDAIF RegDAIF::updateRead(){ __asm__ __volatile__("mrs %0," "DAIF" "\n\t":"=r"(*this));return *this;}
void RegDAIF::write() const { __asm__ __volatile__("msr " "DAIF" ",%0 \n\t"::"r"(*this));}



class RegVBAR_EL1{
public:
        uint64_t Addr:64;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "VBAR_EL1 : "
                <<"Addr = "<< Hex(Addr)
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegVBAR_EL1 read();
        __attribute__((always_inline)) inline RegVBAR_EL1 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegVBAR_EL1 RegVBAR_EL1::read(){ RegVBAR_EL1 res;__asm__ __volatile__("mrs %0," "VBAR_EL1" "\n\t":"=r"(res));return res;}
RegVBAR_EL1 RegVBAR_EL1::updateRead(){ __asm__ __volatile__("mrs %0," "VBAR_EL1" "\n\t":"=r"(*this));return *this;}
void RegVBAR_EL1::write() const { __asm__ __volatile__("msr " "VBAR_EL1" ",%0 \n\t"::"r"(*this));}



class RegELR_EL1{
public:
        uint64_t returnAddr:64;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "ELR_EL1 : "
                <<"returnAddr = "<< Hex(returnAddr)
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegELR_EL1 read();
        __attribute__((always_inline)) inline RegELR_EL1 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegELR_EL1 RegELR_EL1::read(){ RegELR_EL1 res;__asm__ __volatile__("mrs %0," "ELR_EL1" "\n\t":"=r"(res));return res;}
RegELR_EL1 RegELR_EL1::updateRead(){ __asm__ __volatile__("mrs %0," "ELR_EL1" "\n\t":"=r"(*this));return *this;}
void RegELR_EL1::write() const { __asm__ __volatile__("msr " "ELR_EL1" ",%0 \n\t"::"r"(*this));}



class RegELR_EL2{
public:
        uint64_t returnAddr:64;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "ELR_EL2 : "
                <<"returnAddr = "<< Hex(returnAddr)
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegELR_EL2 read();
        __attribute__((always_inline)) inline RegELR_EL2 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegELR_EL2 RegELR_EL2::read(){ RegELR_EL2 res;__asm__ __volatile__("mrs %0," "ELR_EL2" "\n\t":"=r"(res));return res;}
RegELR_EL2 RegELR_EL2::updateRead(){ __asm__ __volatile__("mrs %0," "ELR_EL2" "\n\t":"=r"(*this));return *this;}
void RegELR_EL2::write() const { __asm__ __volatile__("msr " "ELR_EL2" ",%0 \n\t"::"r"(*this));}



class RegELR_EL3{
public:
        uint64_t returnAddr:64;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "ELR_EL3 : "
                <<"returnAddr = "<< Hex(returnAddr)
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegELR_EL3 read();
        __attribute__((always_inline)) inline RegELR_EL3 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegELR_EL3 RegELR_EL3::read(){ RegELR_EL3 res;__asm__ __volatile__("mrs %0," "ELR_EL3" "\n\t":"=r"(res));return res;}
RegELR_EL3 RegELR_EL3::updateRead(){ __asm__ __volatile__("mrs %0," "ELR_EL3" "\n\t":"=r"(*this));return *this;}
void RegELR_EL3::write() const { __asm__ __volatile__("msr " "ELR_EL3" ",%0 \n\t"::"r"(*this));}



class RegESR_EL1{
public:
        uint32_t ISS:25;
        uint32_t IL:1;
        uint32_t EC:6;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "ESR_EL1 : "
                <<"ISS = "<< Hex(ISS) << ","
                <<"IL = "<< IL << ","
                <<"EC = "<< Hex(EC)
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegESR_EL1 read();
        __attribute__((always_inline)) inline RegESR_EL1 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegESR_EL1 RegESR_EL1::read(){ RegESR_EL1 res;__asm__ __volatile__("mrs %0," "ESR_EL1" "\n\t":"=r"(res));return res;}
RegESR_EL1 RegESR_EL1::updateRead(){ __asm__ __volatile__("mrs %0," "ESR_EL1" "\n\t":"=r"(*this));return *this;}
void RegESR_EL1::write() const { __asm__ __volatile__("msr " "ESR_EL1" ",%0 \n\t"::"r"(*this));}



class RegESR_EL2{
public:
        uint32_t ISS:25;
        uint32_t IL:1;
        uint32_t EC:6;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "ESR_EL2 : "
                <<"ISS = "<< Hex(ISS) << ","
                <<"IL = "<< IL << ","
                <<"EC = "<< Hex(EC)
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegESR_EL2 read();
        __attribute__((always_inline)) inline RegESR_EL2 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegESR_EL2 RegESR_EL2::read(){ RegESR_EL2 res;__asm__ __volatile__("mrs %0," "ESR_EL2" "\n\t":"=r"(res));return res;}
RegESR_EL2 RegESR_EL2::updateRead(){ __asm__ __volatile__("mrs %0," "ESR_EL2" "\n\t":"=r"(*this));return *this;}
void RegESR_EL2::write() const { __asm__ __volatile__("msr " "ESR_EL2" ",%0 \n\t"::"r"(*this));}



class RegESR_EL3{
public:
        uint32_t ISS:25;
        uint32_t IL:1;
        uint32_t EC:6;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "ESR_EL3 : "
                <<"ISS = "<< Hex(ISS) << ","
                <<"IL = "<< IL << ","
                <<"EC = "<< Hex(EC)
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegESR_EL3 read();
        __attribute__((always_inline)) inline RegESR_EL3 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegESR_EL3 RegESR_EL3::read(){ RegESR_EL3 res;__asm__ __volatile__("mrs %0," "ESR_EL3" "\n\t":"=r"(res));return res;}
RegESR_EL3 RegESR_EL3::updateRead(){ __asm__ __volatile__("mrs %0," "ESR_EL3" "\n\t":"=r"(*this));return *this;}
void RegESR_EL3::write() const { __asm__ __volatile__("msr " "ESR_EL3" ",%0 \n\t"::"r"(*this));}



class RegFAR_EL1{
public:
        uint64_t faultAddr:64;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "FAR_EL1 : "
                <<"faultAddr = "<< Hex(faultAddr)
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegFAR_EL1 read();
        __attribute__((always_inline)) inline RegFAR_EL1 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegFAR_EL1 RegFAR_EL1::read(){ RegFAR_EL1 res;__asm__ __volatile__("mrs %0," "FAR_EL1" "\n\t":"=r"(res));return res;}
RegFAR_EL1 RegFAR_EL1::updateRead(){ __asm__ __volatile__("mrs %0," "FAR_EL1" "\n\t":"=r"(*this));return *this;}
void RegFAR_EL1::write() const { __asm__ __volatile__("msr " "FAR_EL1" ",%0 \n\t"::"r"(*this));}



class RegFAR_EL2{
public:
        uint64_t faultAddr:64;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "FAR_EL2 : "
                <<"faultAddr = "<< Hex(faultAddr)
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegFAR_EL2 read();
        __attribute__((always_inline)) inline RegFAR_EL2 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegFAR_EL2 RegFAR_EL2::read(){ RegFAR_EL2 res;__asm__ __volatile__("mrs %0," "FAR_EL2" "\n\t":"=r"(res));return res;}
RegFAR_EL2 RegFAR_EL2::updateRead(){ __asm__ __volatile__("mrs %0," "FAR_EL2" "\n\t":"=r"(*this));return *this;}
void RegFAR_EL2::write() const { __asm__ __volatile__("msr " "FAR_EL2" ",%0 \n\t"::"r"(*this));}



class RegFAR_EL3{
public:
        uint64_t faultAddr:64;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "FAR_EL3 : "
                <<"faultAddr = "<< Hex(faultAddr)
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegFAR_EL3 read();
        __attribute__((always_inline)) inline RegFAR_EL3 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegFAR_EL3 RegFAR_EL3::read(){ RegFAR_EL3 res;__asm__ __volatile__("mrs %0," "FAR_EL3" "\n\t":"=r"(res));return res;}
RegFAR_EL3 RegFAR_EL3::updateRead(){ __asm__ __volatile__("mrs %0," "FAR_EL3" "\n\t":"=r"(*this));return *this;}
void RegFAR_EL3::write() const { __asm__ __volatile__("msr " "FAR_EL3" ",%0 \n\t"::"r"(*this));}



class RegSPSR_EL1{
public:
        uint32_t SPSel:1;
        uint32_t RES0_0:1;
        uint32_t EL:2;
        uint32_t ExeState:1;
        uint32_t RES0_1:1;
        uint32_t FIQMask:1;
        uint32_t IRQMask:1;
        uint32_t SErrorMask:1;
        uint32_t DebugMask:1;
        uint32_t RES0_2:10;
        uint32_t IL:1;
        uint32_t SoftwareStep:1;
        uint32_t PAN:1;
        uint32_t UAO:1;
        uint32_t RES0_3:4;
        uint32_t V:1;
        uint32_t C:1;
        uint32_t Z:1;
        uint32_t N:1;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "SPSR_EL1 : "
                <<"SPSel = "<< SPSel << ","
                <<"RES0_0 = "<< RES0_0 << ","
                <<"EL = "<< EL << ","
                <<"ExeState = "<< ExeState << ","
                <<"RES0_1 = "<< RES0_1 << ","
                <<"FIQMask = "<< FIQMask << ","
                <<"IRQMask = "<< IRQMask << ","
                <<"SErrorMask = "<< SErrorMask << ","
                <<"DebugMask = "<< DebugMask << ","
                <<"RES0_2 = "<< RES0_2 << ","
                <<"IL = "<< IL << ","
                <<"SoftwareStep = "<< SoftwareStep << ","
                <<"PAN = "<< PAN << ","
                <<"UAO = "<< UAO << ","
                <<"RES0_3 = "<< RES0_3 << ","
                <<"V = "<< V << ","
                <<"C = "<< C << ","
                <<"Z = "<< Z << ","
                <<"N = "<< N
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegSPSR_EL1 read();
        __attribute__((always_inline)) inline RegSPSR_EL1 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegSPSR_EL1 RegSPSR_EL1::read(){ RegSPSR_EL1 res;__asm__ __volatile__("mrs %0," "SPSR_EL1" "\n\t":"=r"(res));return res;}
RegSPSR_EL1 RegSPSR_EL1::updateRead(){ __asm__ __volatile__("mrs %0," "SPSR_EL1" "\n\t":"=r"(*this));return *this;}
void RegSPSR_EL1::write() const { __asm__ __volatile__("msr " "SPSR_EL1" ",%0 \n\t"::"r"(*this));}



class RegSPSR_EL2{
public:
        uint32_t SPSel:1;
        uint32_t RES0_0:1;
        uint32_t EL:2;
        uint32_t ExeState:1;
        uint32_t RES0_1:1;
        uint32_t FIQMask:1;
        uint32_t IRQMask:1;
        uint32_t SErrorMask:1;
        uint32_t DebugMask:1;
        uint32_t RES0_2:10;
        uint32_t IL:1;
        uint32_t SoftwareStep:1;
        uint32_t PAN:1;
        uint32_t UAO:1;
        uint32_t RES0_3:4;
        uint32_t V:1;
        uint32_t C:1;
        uint32_t Z:1;
        uint32_t N:1;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "SPSR_EL2 : "
                <<"SPSel = "<< SPSel << ","
                <<"RES0_0 = "<< RES0_0 << ","
                <<"EL = "<< EL << ","
                <<"ExeState = "<< ExeState << ","
                <<"RES0_1 = "<< RES0_1 << ","
                <<"FIQMask = "<< FIQMask << ","
                <<"IRQMask = "<< IRQMask << ","
                <<"SErrorMask = "<< SErrorMask << ","
                <<"DebugMask = "<< DebugMask << ","
                <<"RES0_2 = "<< RES0_2 << ","
                <<"IL = "<< IL << ","
                <<"SoftwareStep = "<< SoftwareStep << ","
                <<"PAN = "<< PAN << ","
                <<"UAO = "<< UAO << ","
                <<"RES0_3 = "<< RES0_3 << ","
                <<"V = "<< V << ","
                <<"C = "<< C << ","
                <<"Z = "<< Z << ","
                <<"N = "<< N
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegSPSR_EL2 read();
        __attribute__((always_inline)) inline RegSPSR_EL2 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegSPSR_EL2 RegSPSR_EL2::read(){ RegSPSR_EL2 res;__asm__ __volatile__("mrs %0," "SPSR_EL2" "\n\t":"=r"(res));return res;}
RegSPSR_EL2 RegSPSR_EL2::updateRead(){ __asm__ __volatile__("mrs %0," "SPSR_EL2" "\n\t":"=r"(*this));return *this;}
void RegSPSR_EL2::write() const { __asm__ __volatile__("msr " "SPSR_EL2" ",%0 \n\t"::"r"(*this));}



class RegSPSR_EL3{
public:
        uint32_t SPSel:1;
        uint32_t RES0_0:1;
        uint32_t EL:2;
        uint32_t ExeState:1;
        uint32_t RES0_1:1;
        uint32_t FIQMask:1;
        uint32_t IRQMask:1;
        uint32_t SErrorMask:1;
        uint32_t DebugMask:1;
        uint32_t RES0_2:10;
        uint32_t IL:1;
        uint32_t SoftwareStep:1;
        uint32_t PAN:1;
        uint32_t UAO:1;
        uint32_t RES0_3:4;
        uint32_t V:1;
        uint32_t C:1;
        uint32_t Z:1;
        uint32_t N:1;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "SPSR_EL3 : "
                <<"SPSel = "<< SPSel << ","
                <<"RES0_0 = "<< RES0_0 << ","
                <<"EL = "<< EL << ","
                <<"ExeState = "<< ExeState << ","
                <<"RES0_1 = "<< RES0_1 << ","
                <<"FIQMask = "<< FIQMask << ","
                <<"IRQMask = "<< IRQMask << ","
                <<"SErrorMask = "<< SErrorMask << ","
                <<"DebugMask = "<< DebugMask << ","
                <<"RES0_2 = "<< RES0_2 << ","
                <<"IL = "<< IL << ","
                <<"SoftwareStep = "<< SoftwareStep << ","
                <<"PAN = "<< PAN << ","
                <<"UAO = "<< UAO << ","
                <<"RES0_3 = "<< RES0_3 << ","
                <<"V = "<< V << ","
                <<"C = "<< C << ","
                <<"Z = "<< Z << ","
                <<"N = "<< N
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegSPSR_EL3 read();
        __attribute__((always_inline)) inline RegSPSR_EL3 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegSPSR_EL3 RegSPSR_EL3::read(){ RegSPSR_EL3 res;__asm__ __volatile__("mrs %0," "SPSR_EL3" "\n\t":"=r"(res));return res;}
RegSPSR_EL3 RegSPSR_EL3::updateRead(){ __asm__ __volatile__("mrs %0," "SPSR_EL3" "\n\t":"=r"(*this));return *this;}
void RegSPSR_EL3::write() const { __asm__ __volatile__("msr " "SPSR_EL3" ",%0 \n\t"::"r"(*this));}



class RegSP{
public:
        uint64_t SP:64;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "SP : "
                <<"SP = "<< SP
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegSP read();
        __attribute__((always_inline)) inline RegSP updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegSP RegSP::read(){ RegSP res;__asm__ __volatile__("mrs %0," "SP" "\n\t":"=r"(res));return res;}
RegSP RegSP::updateRead(){ __asm__ __volatile__("mrs %0," "SP" "\n\t":"=r"(*this));return *this;}
void RegSP::write() const { __asm__ __volatile__("msr " "SP" ",%0 \n\t"::"r"(*this));}



class RegSP_EL0{
public:
        uint64_t SP:64;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "SP_EL0 : "
                <<"SP = "<< SP
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegSP_EL0 read();
        __attribute__((always_inline)) inline RegSP_EL0 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegSP_EL0 RegSP_EL0::read(){ RegSP_EL0 res;__asm__ __volatile__("mrs %0," "SP_EL0" "\n\t":"=r"(res));return res;}
RegSP_EL0 RegSP_EL0::updateRead(){ __asm__ __volatile__("mrs %0," "SP_EL0" "\n\t":"=r"(*this));return *this;}
void RegSP_EL0::write() const { __asm__ __volatile__("msr " "SP_EL0" ",%0 \n\t"::"r"(*this));}



class RegSP_EL1{
public:
        uint64_t SP:64;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "SP_EL1 : "
                <<"SP = "<< SP
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegSP_EL1 read();
        __attribute__((always_inline)) inline RegSP_EL1 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegSP_EL1 RegSP_EL1::read(){ RegSP_EL1 res;__asm__ __volatile__("mrs %0," "SP_EL1" "\n\t":"=r"(res));return res;}
RegSP_EL1 RegSP_EL1::updateRead(){ __asm__ __volatile__("mrs %0," "SP_EL1" "\n\t":"=r"(*this));return *this;}
void RegSP_EL1::write() const { __asm__ __volatile__("msr " "SP_EL1" ",%0 \n\t"::"r"(*this));}



class RegSP_EL2{
public:
        uint64_t SP:64;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "SP_EL2 : "
                <<"SP = "<< SP
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegSP_EL2 read();
        __attribute__((always_inline)) inline RegSP_EL2 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegSP_EL2 RegSP_EL2::read(){ RegSP_EL2 res;__asm__ __volatile__("mrs %0," "SP_EL2" "\n\t":"=r"(res));return res;}
RegSP_EL2 RegSP_EL2::updateRead(){ __asm__ __volatile__("mrs %0," "SP_EL2" "\n\t":"=r"(*this));return *this;}
void RegSP_EL2::write() const { __asm__ __volatile__("msr " "SP_EL2" ",%0 \n\t"::"r"(*this));}



class RegSP_EL3{
public:
        uint64_t SP:64;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "SP_EL3 : "
                <<"SP = "<< SP
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegSP_EL3 read();
        __attribute__((always_inline)) inline RegSP_EL3 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegSP_EL3 RegSP_EL3::read(){ RegSP_EL3 res;__asm__ __volatile__("mrs %0," "SP_EL3" "\n\t":"=r"(res));return res;}
RegSP_EL3 RegSP_EL3::updateRead(){ __asm__ __volatile__("mrs %0," "SP_EL3" "\n\t":"=r"(*this));return *this;}
void RegSP_EL3::write() const { __asm__ __volatile__("msr " "SP_EL3" ",%0 \n\t"::"r"(*this));}



class RegNZCV{
public:
        uint64_t RES0:28;
        uint64_t V:1;
        uint64_t C:1;
        uint64_t Z:1;
        uint64_t N:1;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "NZCV : "
                <<"RES0 = "<< RES0 << ","
                <<"V = "<< V << ","
                <<"C = "<< C << ","
                <<"Z = "<< Z << ","
                <<"N = "<< N
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegNZCV read();
        __attribute__((always_inline)) inline RegNZCV updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegNZCV RegNZCV::read(){ RegNZCV res;__asm__ __volatile__("mrs %0," "NZCV" "\n\t":"=r"(res));return res;}
RegNZCV RegNZCV::updateRead(){ __asm__ __volatile__("mrs %0," "NZCV" "\n\t":"=r"(*this));return *this;}
void RegNZCV::write() const { __asm__ __volatile__("msr " "NZCV" ",%0 \n\t"::"r"(*this));}



class RegPAN{
public:
        uint32_t RES0_0:22;
        uint32_t PAN:1;
        uint32_t RES0_1:9;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "PAN : "
                <<"RES0_0 = "<< RES0_0 << ","
                <<"PAN = "<< PAN << ","
                <<"RES0_1 = "<< RES0_1
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegPAN read();
        __attribute__((always_inline)) inline RegPAN updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegPAN RegPAN::read(){ RegPAN res;__asm__ __volatile__("mrs %0," "PAN" "\n\t":"=r"(res));return res;}
RegPAN RegPAN::updateRead(){ __asm__ __volatile__("mrs %0," "PAN" "\n\t":"=r"(*this));return *this;}
void RegPAN::write() const { __asm__ __volatile__("msr " "PAN" ",%0 \n\t"::"r"(*this));}



class RegSPSel{
public:
        uint32_t SP:1;
        uint32_t RES0:31;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "SPSel : "
                <<"SP = "<< SP << ","
                <<"RES0 = "<< RES0
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegSPSel read();
        __attribute__((always_inline)) inline RegSPSel updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegSPSel RegSPSel::read(){ RegSPSel res;__asm__ __volatile__("mrs %0," "SPSel" "\n\t":"=r"(res));return res;}
RegSPSel RegSPSel::updateRead(){ __asm__ __volatile__("mrs %0," "SPSel" "\n\t":"=r"(*this));return *this;}
void RegSPSel::write() const { __asm__ __volatile__("msr " "SPSel" ",%0 \n\t"::"r"(*this));}



class RegUAO{
public:
        uint64_t RES0_0:23;
        uint64_t UAO:1;
        uint64_t RES0_1:8;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "UAO : "
                <<"RES0_0 = "<< RES0_0 << ","
                <<"UAO = "<< UAO << ","
                <<"RES0_1 = "<< RES0_1
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegUAO read();
        __attribute__((always_inline)) inline RegUAO updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegUAO RegUAO::read(){ RegUAO res;__asm__ __volatile__("mrs %0," "UAO" "\n\t":"=r"(res));return res;}
RegUAO RegUAO::updateRead(){ __asm__ __volatile__("mrs %0," "UAO" "\n\t":"=r"(*this));return *this;}
void RegUAO::write() const { __asm__ __volatile__("msr " "UAO" ",%0 \n\t"::"r"(*this));}



class RegPC{
public:
        uint64_t PC:64;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "PC : "
                <<"PC = "<< Hex(PC)
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegPC read();
        __attribute__((always_inline)) inline RegPC updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegPC RegPC::read() { RegPC res; __asm__ __volatile__("adr %0,#0\n\t":"=r"(res)); return res; }
RegPC RegPC::updateRead() { __asm__ __volatile__("adr %0,#0\n\t":"=r"(*this)); return *this; }
void RegPC::write()const { __asm__ __volatile__("br %0\n\t"::"r"(*this)); }



class RegTCR_EL1{
public:
        uint64_t T0SZ:6;
        uint64_t RES0_0:1;
        uint64_t EPD0:1;
        uint64_t IRGN0:2;
        uint64_t ORGN0:2;
        uint64_t SH0:2;
        uint64_t TG0:2;
        uint64_t T1SZ:6;
        uint64_t A1:1;
        uint64_t EPD1:1;
        uint64_t IRGN1:2;
        uint64_t ORGN1:2;
        uint64_t SH1:2;
        uint64_t TG1:2;
        uint64_t IPS:3;
        uint64_t RES0_1:1;
        uint64_t AS:1;
        uint64_t TBI0:1;
        uint64_t TBI1:1;
        uint64_t HA:1;
        uint64_t HD:1;
        uint64_t HPD0:1;
        uint64_t HPD1:1;
        uint64_t HWU059:1;
        uint64_t HWU060:1;
        uint64_t HWU061:1;
        uint64_t HWU062:1;
        uint64_t HWU159:1;
        uint64_t HWU160:1;
        uint64_t HWU161:1;
        uint64_t HWU162:1;
        uint64_t RES0_2:2;
        uint64_t NFD0:1;
        uint64_t NFD1:1;
        uint64_t RES0_3:9;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "TCR_EL1 : "
                <<"T0SZ = "<< T0SZ << ","
                <<"RES0_0 = "<< RES0_0 << ","
                <<"EPD0 = "<< EPD0 << ","
                <<"IRGN0 = "<< IRGN0 << ","
                <<"ORGN0 = "<< ORGN0 << ","
                <<"SH0 = "<< SH0 << ","
                <<"TG0 = "<< TG0 << ","
                <<"T1SZ = "<< T1SZ << ","
                <<"A1 = "<< A1 << ","
                <<"EPD1 = "<< EPD1 << ","
                <<"IRGN1 = "<< IRGN1 << ","
                <<"ORGN1 = "<< ORGN1 << ","
                <<"SH1 = "<< SH1 << ","
                <<"TG1 = "<< TG1 << ","
                <<"IPS = "<< IPS << ","
                <<"RES0_1 = "<< RES0_1 << ","
                <<"AS = "<< AS << ","
                <<"TBI0 = "<< TBI0 << ","
                <<"TBI1 = "<< TBI1 << ","
                <<"HA = "<< HA << ","
                <<"HD = "<< HD << ","
                <<"HPD0 = "<< HPD0 << ","
                <<"HPD1 = "<< HPD1 << ","
                <<"HWU059 = "<< HWU059 << ","
                <<"HWU060 = "<< HWU060 << ","
                <<"HWU061 = "<< HWU061 << ","
                <<"HWU062 = "<< HWU062 << ","
                <<"HWU159 = "<< HWU159 << ","
                <<"HWU160 = "<< HWU160 << ","
                <<"HWU161 = "<< HWU161 << ","
                <<"HWU162 = "<< HWU162 << ","
                <<"RES0_2 = "<< RES0_2 << ","
                <<"NFD0 = "<< NFD0 << ","
                <<"NFD1 = "<< NFD1 << ","
                <<"RES0_3 = "<< RES0_3
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegTCR_EL1 read();
        __attribute__((always_inline)) inline RegTCR_EL1 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegTCR_EL1 RegTCR_EL1::read(){ RegTCR_EL1 res;__asm__ __volatile__("mrs %0," "TCR_EL1" "\n\t":"=r"(res));return res;}
RegTCR_EL1 RegTCR_EL1::updateRead(){ __asm__ __volatile__("mrs %0," "TCR_EL1" "\n\t":"=r"(*this));return *this;}
void RegTCR_EL1::write() const { __asm__ __volatile__("msr " "TCR_EL1" ",%0 \n\t"::"r"(*this));}



class RegISR_EL1{
public:
        uint32_t RES0_0:6;
        uint32_t F:1;
        uint32_t I:1;
        uint32_t A:1;
        uint32_t RES0_1:23;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "ISR_EL1 : "
                <<"RES0_0 = "<< RES0_0 << ","
                <<"F = "<< F << ","
                <<"I = "<< I << ","
                <<"A = "<< A << ","
                <<"RES0_1 = "<< RES0_1
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegISR_EL1 read();
        __attribute__((always_inline)) inline RegISR_EL1 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegISR_EL1 RegISR_EL1::read(){ RegISR_EL1 res;__asm__ __volatile__("mrs %0," "ISR_EL1" "\n\t":"=r"(res));return res;}
RegISR_EL1 RegISR_EL1::updateRead(){ __asm__ __volatile__("mrs %0," "ISR_EL1" "\n\t":"=r"(*this));return *this;}
void RegISR_EL1::write() const { __asm__ __volatile__("msr " "ISR_EL1" ",%0 \n\t"::"r"(*this));}



class RegID_AA64PFR0_EL1{
public:
        uint64_t EL0:4;
        uint64_t EL1:4;
        uint64_t EL2:4;
        uint64_t EL3:4;
        uint64_t FP:4;
        uint64_t AdvSIMD:4;
        uint64_t GIC:4;
        uint64_t RAS:4;
        uint64_t SVE:4;
        uint64_t RES0:28;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "ID_AA64PFR0_EL1 : "
                <<"EL0 = "<< EL0 << ","
                <<"EL1 = "<< EL1 << ","
                <<"EL2 = "<< EL2 << ","
                <<"EL3 = "<< EL3 << ","
                <<"FP = "<< FP << ","
                <<"AdvSIMD = "<< AdvSIMD << ","
                <<"GIC = "<< GIC << ","
                <<"RAS = "<< RAS << ","
                <<"SVE = "<< SVE << ","
                <<"RES0 = "<< RES0
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegID_AA64PFR0_EL1 read();
        __attribute__((always_inline)) inline RegID_AA64PFR0_EL1 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegID_AA64PFR0_EL1 RegID_AA64PFR0_EL1::read(){ RegID_AA64PFR0_EL1 res;__asm__ __volatile__("mrs %0," "ID_AA64PFR0_EL1" "\n\t":"=r"(res));return res;}
RegID_AA64PFR0_EL1 RegID_AA64PFR0_EL1::updateRead(){ __asm__ __volatile__("mrs %0," "ID_AA64PFR0_EL1" "\n\t":"=r"(*this));return *this;}
void RegID_AA64PFR0_EL1::write() const { __asm__ __volatile__("msr " "ID_AA64PFR0_EL1" ",%0 \n\t"::"r"(*this));}



class RegID_AA64MMFR1_EL1{
public:
        uint64_t HAFDBS:4;
        uint64_t VMIDBits:4;
        uint64_t VH:4;
        uint64_t HPDS:4;
        uint64_t LO:4;
        uint64_t PAN:4;
        uint64_t SpecSEI:4;
        uint64_t XNX:4;
        uint64_t RES0:32;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "ID_AA64MMFR1_EL1 : "
                <<"HAFDBS = "<< HAFDBS << ","
                <<"VMIDBits = "<< VMIDBits << ","
                <<"VH = "<< VH << ","
                <<"HPDS = "<< HPDS << ","
                <<"LO = "<< LO << ","
                <<"PAN = "<< PAN << ","
                <<"SpecSEI = "<< SpecSEI << ","
                <<"XNX = "<< XNX << ","
                <<"RES0 = "<< RES0
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegID_AA64MMFR1_EL1 read();
        __attribute__((always_inline)) inline RegID_AA64MMFR1_EL1 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegID_AA64MMFR1_EL1 RegID_AA64MMFR1_EL1::read(){ RegID_AA64MMFR1_EL1 res;__asm__ __volatile__("mrs %0," "ID_AA64MMFR1_EL1" "\n\t":"=r"(res));return res;}
RegID_AA64MMFR1_EL1 RegID_AA64MMFR1_EL1::updateRead(){ __asm__ __volatile__("mrs %0," "ID_AA64MMFR1_EL1" "\n\t":"=r"(*this));return *this;}
void RegID_AA64MMFR1_EL1::write() const { __asm__ __volatile__("msr " "ID_AA64MMFR1_EL1" ",%0 \n\t"::"r"(*this));}



class RegID_AA64MMFR0_EL1{
public:
        uint64_t PARange:4;
        uint64_t ASIDBits:4;
        uint64_t BigEnd:4;
        uint64_t SNSMem:4;
        uint64_t BigEndEL0:4;
        uint64_t TGran16:4;
        uint64_t TGran64:4;
        uint64_t TGran4:4;
        uint64_t RES0:32;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "ID_AA64MMFR0_EL1 : "
                <<"PARange = "<< PARange << ","
                <<"ASIDBits = "<< ASIDBits << ","
                <<"BigEnd = "<< BigEnd << ","
                <<"SNSMem = "<< SNSMem << ","
                <<"BigEndEL0 = "<< BigEndEL0 << ","
                <<"TGran16 = "<< Hex(TGran16) << ","
                <<"TGran64 = "<< Hex(TGran64) << ","
                <<"TGran4 = "<< Hex(TGran4) << ","
                <<"RES0 = "<< RES0
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegID_AA64MMFR0_EL1 read();
        __attribute__((always_inline)) inline RegID_AA64MMFR0_EL1 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegID_AA64MMFR0_EL1 RegID_AA64MMFR0_EL1::read(){ RegID_AA64MMFR0_EL1 res;__asm__ __volatile__("mrs %0," "ID_AA64MMFR0_EL1" "\n\t":"=r"(res));return res;}
RegID_AA64MMFR0_EL1 RegID_AA64MMFR0_EL1::updateRead(){ __asm__ __volatile__("mrs %0," "ID_AA64MMFR0_EL1" "\n\t":"=r"(*this));return *this;}
void RegID_AA64MMFR0_EL1::write() const { __asm__ __volatile__("msr " "ID_AA64MMFR0_EL1" ",%0 \n\t"::"r"(*this));}



class RegMIDR_EL1{
public:
        uint32_t Revision:4;
        uint32_t PartNum:12;
        uint32_t Architecture:4;
        uint32_t Variant:4;
        uint32_t Implementer:8;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "MIDR_EL1 : "
                <<"Revision = "<< Revision << ","
                <<"PartNum = "<< PartNum << ","
                <<"Architecture = "<< Architecture << ","
                <<"Variant = "<< Variant << ","
                <<"Implementer = "<< Implementer
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegMIDR_EL1 read();
        __attribute__((always_inline)) inline RegMIDR_EL1 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegMIDR_EL1 RegMIDR_EL1::read(){ RegMIDR_EL1 res;__asm__ __volatile__("mrs %0," "MIDR_EL1" "\n\t":"=r"(res));return res;}
RegMIDR_EL1 RegMIDR_EL1::updateRead(){ __asm__ __volatile__("mrs %0," "MIDR_EL1" "\n\t":"=r"(*this));return *this;}
void RegMIDR_EL1::write() const { __asm__ __volatile__("msr " "MIDR_EL1" ",%0 \n\t"::"r"(*this));}



class RegMPIDR_EL1{
public:
        uint64_t Aff0:8;
        uint64_t Aff1:8;
        uint64_t Aff2:8;
        uint64_t MT:1;
        uint64_t RES0_0:5;
        uint64_t U:1;
        uint64_t RES1_1:1;
        uint64_t Aff3:8;
        uint64_t RES0_2:24;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "MPIDR_EL1 : "
                <<"Aff0 = "<< Aff0 << ","
                <<"Aff1 = "<< Aff1 << ","
                <<"Aff2 = "<< Aff2 << ","
                <<"MT = "<< MT << ","
                <<"RES0_0 = "<< RES0_0 << ","
                <<"U = "<< U << ","
                <<"RES1_1 = "<< RES1_1 << ","
                <<"Aff3 = "<< Aff3 << ","
                <<"RES0_2 = "<< RES0_2
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegMPIDR_EL1 read();
        __attribute__((always_inline)) inline RegMPIDR_EL1 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegMPIDR_EL1 RegMPIDR_EL1::read(){ RegMPIDR_EL1 res;__asm__ __volatile__("mrs %0," "MPIDR_EL1" "\n\t":"=r"(res));return res;}
RegMPIDR_EL1 RegMPIDR_EL1::updateRead(){ __asm__ __volatile__("mrs %0," "MPIDR_EL1" "\n\t":"=r"(*this));return *this;}
void RegMPIDR_EL1::write() const { __asm__ __volatile__("msr " "MPIDR_EL1" ",%0 \n\t"::"r"(*this));}



class RegTTBR0_EL1{
public:
        uint64_t CnP:1;
        uint64_t BADDR:47;
        uint64_t ASID:16;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "TTBR0_EL1 : "
                <<"CnP = "<< CnP << ","
                <<"BADDR = "<< Hex(BADDR) << ","
                <<"ASID = "<< ASID
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegTTBR0_EL1 read();
        __attribute__((always_inline)) inline RegTTBR0_EL1 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegTTBR0_EL1 RegTTBR0_EL1::read(){ RegTTBR0_EL1 res;__asm__ __volatile__("mrs %0," "TTBR0_EL1" "\n\t":"=r"(res));return res;}
RegTTBR0_EL1 RegTTBR0_EL1::updateRead(){ __asm__ __volatile__("mrs %0," "TTBR0_EL1" "\n\t":"=r"(*this));return *this;}
void RegTTBR0_EL1::write() const { __asm__ __volatile__("msr " "TTBR0_EL1" ",%0 \n\t"::"r"(*this));}



class RegTTBR1_EL1{
public:
        uint64_t CnP:1;
        uint64_t BADDR:47;
        uint64_t ASID:16;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "TTBR1_EL1 : "
                <<"CnP = "<< CnP << ","
                <<"BADDR = "<< Hex(BADDR) << ","
                <<"ASID = "<< ASID
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegTTBR1_EL1 read();
        __attribute__((always_inline)) inline RegTTBR1_EL1 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegTTBR1_EL1 RegTTBR1_EL1::read(){ RegTTBR1_EL1 res;__asm__ __volatile__("mrs %0," "TTBR1_EL1" "\n\t":"=r"(res));return res;}
RegTTBR1_EL1 RegTTBR1_EL1::updateRead(){ __asm__ __volatile__("mrs %0," "TTBR1_EL1" "\n\t":"=r"(*this));return *this;}
void RegTTBR1_EL1::write() const { __asm__ __volatile__("msr " "TTBR1_EL1" ",%0 \n\t"::"r"(*this));}



class RegPAR_EL1{
public:
    union{
        struct{
        uint64_t F:1;
        uint64_t RES0_0:6;
        uint64_t SH:2;
        uint64_t NS:1;
        uint64_t IMP_DEF:1;
        uint64_t RES1_1:1;
        uint64_t PA47_12:36;
        uint64_t PA51_48:4;
        uint64_t RES0_2:4;
        uint64_t ATTR:8;
       }__attribute__((packed)) S0;

        struct{
        uint64_t F:1;
        uint64_t FST:6;
        uint64_t RES0_0:1;
        uint64_t PTW:1;
        uint64_t S:1;
        uint64_t RES0_1:1;
        uint64_t RES1_2:1;
        uint64_t RES0_3:36;
        uint64_t IMP_DEF0:4;
        uint64_t IMP_DEF1:4;
        uint64_t IMP_DEF2:8;
       }__attribute__((packed)) S1;

    }__attribute__((packed));

        __attribute__((always_inline)) inline void dump()const
        {
            kout << "PAR_EL1 : ";
            if(S0.F==0)
            {
             kout
                <<"S0.F = "<< S0.F << ","
                <<"S0.RES0_0 = "<< S0.RES0_0 << ","
                <<"S0.SH = "<< S0.SH << ","
                <<"S0.NS = "<< S0.NS << ","
                <<"S0.IMP_DEF = "<< S0.IMP_DEF << ","
                <<"S0.RES1_1 = "<< S0.RES1_1 << ","
                <<"S0.PA47_12 = "<< Hex(S0.PA47_12) << ","
                <<"S0.PA51_48 = "<< Hex(S0.PA51_48) << ","
                <<"S0.RES0_2 = "<< S0.RES0_2 << ","
                <<"S0.ATTR = "<< S0.ATTR;
            }
            else
            {
             kout
                <<"S1.F = "<< S1.F << ","
                <<"S1.FST = "<< S1.FST << ","
                <<"S1.RES0_0 = "<< S1.RES0_0 << ","
                <<"S1.PTW = "<< S1.PTW << ","
                <<"S1.S = "<< S1.S << ","
                <<"S1.RES0_1 = "<< S1.RES0_1 << ","
                <<"S1.RES1_2 = "<< S1.RES1_2 << ","
                <<"S1.RES0_3 = "<< S1.RES0_3 << ","
                <<"S1.IMP_DEF0 = "<< S1.IMP_DEF0 << ","
                <<"S1.IMP_DEF1 = "<< S1.IMP_DEF1 << ","
                <<"S1.IMP_DEF2 = "<< S1.IMP_DEF2;
            }
             kout << "\n";
        }
        __attribute__((always_inline)) inline static RegPAR_EL1 read();
        __attribute__((always_inline)) inline RegPAR_EL1 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegPAR_EL1 RegPAR_EL1::read(){ RegPAR_EL1 res;__asm__ __volatile__("mrs %0," "PAR_EL1" "\n\t":"=r"(res));return res;}
RegPAR_EL1 RegPAR_EL1::updateRead(){ __asm__ __volatile__("mrs %0," "PAR_EL1" "\n\t":"=r"(*this));return *this;}
void RegPAR_EL1::write() const { __asm__ __volatile__("msr " "PAR_EL1" ",%0 \n\t"::"r"(*this));}



class RegMAIR_EL1{
public:
        uint64_t Attr0:8;
        uint64_t Attr1:8;
        uint64_t Attr2:8;
        uint64_t Attr3:8;
        uint64_t Attr4:8;
        uint64_t Attr5:8;
        uint64_t Attr6:8;
        uint64_t Attr7:8;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "MAIR_EL1 : "
                <<"Attr0 = "<< Hex(Attr0) << ","
                <<"Attr1 = "<< Hex(Attr1) << ","
                <<"Attr2 = "<< Hex(Attr2) << ","
                <<"Attr3 = "<< Hex(Attr3) << ","
                <<"Attr4 = "<< Hex(Attr4) << ","
                <<"Attr5 = "<< Hex(Attr5) << ","
                <<"Attr6 = "<< Hex(Attr6) << ","
                <<"Attr7 = "<< Hex(Attr7)
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegMAIR_EL1 read();
        __attribute__((always_inline)) inline RegMAIR_EL1 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegMAIR_EL1 RegMAIR_EL1::read(){ RegMAIR_EL1 res;__asm__ __volatile__("mrs %0," "MAIR_EL1" "\n\t":"=r"(res));return res;}
RegMAIR_EL1 RegMAIR_EL1::updateRead(){ __asm__ __volatile__("mrs %0," "MAIR_EL1" "\n\t":"=r"(*this));return *this;}
void RegMAIR_EL1::write() const { __asm__ __volatile__("msr " "MAIR_EL1" ",%0 \n\t"::"r"(*this));}



class RegMAIR_EL2{
public:
        uint64_t Attr0:8;
        uint64_t Attr1:8;
        uint64_t Attr2:8;
        uint64_t Attr3:8;
        uint64_t Attr4:8;
        uint64_t Attr5:8;
        uint64_t Attr6:8;
        uint64_t Attr7:8;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "MAIR_EL2 : "
                <<"Attr0 = "<< Hex(Attr0) << ","
                <<"Attr1 = "<< Hex(Attr1) << ","
                <<"Attr2 = "<< Hex(Attr2) << ","
                <<"Attr3 = "<< Hex(Attr3) << ","
                <<"Attr4 = "<< Hex(Attr4) << ","
                <<"Attr5 = "<< Hex(Attr5) << ","
                <<"Attr6 = "<< Hex(Attr6) << ","
                <<"Attr7 = "<< Hex(Attr7)
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegMAIR_EL2 read();
        __attribute__((always_inline)) inline RegMAIR_EL2 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegMAIR_EL2 RegMAIR_EL2::read(){ RegMAIR_EL2 res;__asm__ __volatile__("mrs %0," "MAIR_EL2" "\n\t":"=r"(res));return res;}
RegMAIR_EL2 RegMAIR_EL2::updateRead(){ __asm__ __volatile__("mrs %0," "MAIR_EL2" "\n\t":"=r"(*this));return *this;}
void RegMAIR_EL2::write() const { __asm__ __volatile__("msr " "MAIR_EL2" ",%0 \n\t"::"r"(*this));}



class RegMAIR_EL3{
public:
        uint64_t Attr0:8;
        uint64_t Attr1:8;
        uint64_t Attr2:8;
        uint64_t Attr3:8;
        uint64_t Attr4:8;
        uint64_t Attr5:8;
        uint64_t Attr6:8;
        uint64_t Attr7:8;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "MAIR_EL3 : "
                <<"Attr0 = "<< Hex(Attr0) << ","
                <<"Attr1 = "<< Hex(Attr1) << ","
                <<"Attr2 = "<< Hex(Attr2) << ","
                <<"Attr3 = "<< Hex(Attr3) << ","
                <<"Attr4 = "<< Hex(Attr4) << ","
                <<"Attr5 = "<< Hex(Attr5) << ","
                <<"Attr6 = "<< Hex(Attr6) << ","
                <<"Attr7 = "<< Hex(Attr7)
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegMAIR_EL3 read();
        __attribute__((always_inline)) inline RegMAIR_EL3 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegMAIR_EL3 RegMAIR_EL3::read(){ RegMAIR_EL3 res;__asm__ __volatile__("mrs %0," "MAIR_EL3" "\n\t":"=r"(res));return res;}
RegMAIR_EL3 RegMAIR_EL3::updateRead(){ __asm__ __volatile__("mrs %0," "MAIR_EL3" "\n\t":"=r"(*this));return *this;}
void RegMAIR_EL3::write() const { __asm__ __volatile__("msr " "MAIR_EL3" ",%0 \n\t"::"r"(*this));}



class RegSCTLR_EL1{
public:
        uint32_t M:1;
        uint32_t A:1;
        uint32_t C:1;
        uint32_t SA:1;
        uint32_t SA0:1;
        uint32_t CP15BEN:1;
        uint32_t RES0_0:1;
        uint32_t ITD:1;
        uint32_t SED:1;
        uint32_t UMA:1;
        uint32_t RES0_1:1;
        uint32_t RES1_2:1;
        uint32_t I:1;
        uint32_t RES0_3:1;
        uint32_t DZE:1;
        uint32_t UCT:1;
        uint32_t nTWI:1;
        uint32_t RES0_4:1;
        uint32_t nTWE:1;
        uint32_t WXN:1;
        uint32_t RES1_5:1;
        uint32_t IESB:1;
        uint32_t RES1_6:1;
        uint32_t SPAN:1;
        uint32_t E0E:1;
        uint32_t EE:1;
        uint32_t UCI:1;
        uint32_t RES0_7:1;
        uint32_t nTLSMD:1;
        uint32_t LSMAOE:1;
        uint32_t RES0_8:2;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "SCTLR_EL1 : "
                <<"M = "<< M << ","
                <<"A = "<< A << ","
                <<"C = "<< C << ","
                <<"SA = "<< SA << ","
                <<"SA0 = "<< SA0 << ","
                <<"CP15BEN = "<< CP15BEN << ","
                <<"RES0_0 = "<< RES0_0 << ","
                <<"ITD = "<< ITD << ","
                <<"SED = "<< SED << ","
                <<"UMA = "<< UMA << ","
                <<"RES0_1 = "<< RES0_1 << ","
                <<"RES1_2 = "<< RES1_2 << ","
                <<"I = "<< I << ","
                <<"RES0_3 = "<< RES0_3 << ","
                <<"DZE = "<< DZE << ","
                <<"UCT = "<< UCT << ","
                <<"nTWI = "<< nTWI << ","
                <<"RES0_4 = "<< RES0_4 << ","
                <<"nTWE = "<< nTWE << ","
                <<"WXN = "<< WXN << ","
                <<"RES1_5 = "<< RES1_5 << ","
                <<"IESB = "<< IESB << ","
                <<"RES1_6 = "<< RES1_6 << ","
                <<"SPAN = "<< SPAN << ","
                <<"E0E = "<< E0E << ","
                <<"EE = "<< EE << ","
                <<"UCI = "<< UCI << ","
                <<"RES0_7 = "<< RES0_7 << ","
                <<"nTLSMD = "<< nTLSMD << ","
                <<"LSMAOE = "<< LSMAOE << ","
                <<"RES0_8 = "<< RES0_8
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegSCTLR_EL1 read();
        __attribute__((always_inline)) inline RegSCTLR_EL1 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegSCTLR_EL1 RegSCTLR_EL1::read(){ RegSCTLR_EL1 res;__asm__ __volatile__("mrs %0," "SCTLR_EL1" "\n\t":"=r"(res));return res;}
RegSCTLR_EL1 RegSCTLR_EL1::updateRead(){ __asm__ __volatile__("mrs %0," "SCTLR_EL1" "\n\t":"=r"(*this));return *this;}
void RegSCTLR_EL1::write() const { __asm__ __volatile__("msr " "SCTLR_EL1" ",%0 \n\t"::"r"(*this));}
# 13 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/asm_instructions.h" 2



#define FORCE_CODE_COHERENT_WITH_VIEW() L ## __LINE__:

#define ASM_DEFINE_LOCAL_SYM(sym) __asm__sym__ ##sym: __asm__ __volatile__(__stringify(sym) ":\n\t")
#define ASM_DEFINE_GLOBAL_SYM(sym) __asm__sym__ ##sym:__asm__ __volatile__(".global " __stringify(sym) " \n\t;" __stringify(sym) ":\n\t")
#define ASM_LDR_REG(reg,val) __asm__ __volatile__("")
#define ASM_PUSHX_REG() 
#define ASM_PUSHX() 
#define ASM_POPX_REG() 
#define ASM_POPX() 
#define ASM_PUSHW_REG() 
#define ASM_PUSHW() 
#define ASM_POPW_REG() 
#define ASM_POPW() 
#define ASM_GOTO(sym) __asm__ __volatile__("b " __stringify(sym) " \n\t")




__attribute__((always_inline)) inline void asm_nop();
__attribute__((always_inline)) inline void asm_isb();
__attribute__((always_inline)) inline void asm_eret();
__attribute__((always_inline)) inline RegPAR_EL1 asm_at(uint64_t va);
__attribute__((always_inline)) inline void asm_svc(uint16_t imm);
__attribute__((always_inline)) inline void asm_wfe();
__attribute__((always_inline)) inline void asm_wfe_loop();



void asm_nop()
{
 __asm__ __volatile__("nop \n\t");
}
void asm_isb()
{
 __asm__ __volatile__("isb \n\t");
}
void asm_eret()
{
 __asm__ __volatile__("eret \n\t");
}
RegPAR_EL1 asm_at(uint64_t va)
{
 __asm__ __volatile__("at S1E1R,%0 \n\t"::"r"(va));
 return RegPAR_EL1::read();
}
void asm_svc(uint16_t imm)
{
 __asm__ __volatile__("svc %0"::"i"(imm));
}
void asm_wfe()
{
 __asm__ __volatile__("wfe \n\t");
}
void asm_wfe_loop()
{
 while(true)
  asm_wfe();
}
# 3 "D:/Pool/eclipse-workspace_aarch64/newspace/raspiOS/src/arch/qemu_virt/main_run_process.cpp" 2


# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/vmsa_descriptors.h" 1



#define _________INCLUDE_ARCH_COMMON_AARCH64_VMSA_DESCRIPTORS_H__ 



class RegDescriptor4KBL0{
public:
        uint64_t Valid:1;
        uint64_t IsTable:1;
        uint64_t Ignored_0:10;
        uint64_t NextLevelTableAddr:36;
        uint64_t RES0:4;
        uint64_t Ignored_1:7;
        uint64_t PXNTable:1;
        uint64_t XNTable:1;
        uint64_t APTable:2;
        uint64_t NSTable:1;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "Descriptor4KBL0 : "
                <<"Valid = "<< Valid << ","
                <<"IsTable = "<< IsTable << ","
                <<"Ignored_0 = "<< Ignored_0 << ","
                <<"NextLevelTableAddr = "<< Hex(NextLevelTableAddr) << ","
                <<"RES0 = "<< RES0 << ","
                <<"Ignored_1 = "<< Ignored_1 << ","
                <<"PXNTable = "<< PXNTable << ","
                <<"XNTable = "<< XNTable << ","
                <<"APTable = "<< APTable << ","
                <<"NSTable = "<< NSTable
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegDescriptor4KBL0 read(void *p);
        __attribute__((always_inline)) inline static RegDescriptor4KBL0 read(size_t p);
        __attribute__((always_inline)) inline void write(void *p)const;
        __attribute__((always_inline)) inline void write(size_t p)const;
}__attribute__((packed));
RegDescriptor4KBL0 RegDescriptor4KBL0::read(void *p) { return *reinterpret_cast<RegDescriptor4KBL0*>(p);}RegDescriptor4KBL0 RegDescriptor4KBL0::read(size_t p){ return *reinterpret_cast<RegDescriptor4KBL0*>(p);}
void RegDescriptor4KBL0::write(void *p)const { *reinterpret_cast<RegDescriptor4KBL0*>(p)=*this; }void RegDescriptor4KBL0::write(size_t p)const{ *reinterpret_cast<RegDescriptor4KBL0*>(p)=*this;}



class RegDescriptor4KBL1{
public:
    union{
        struct{
        uint64_t Valid:1;
        uint64_t IsTable:1;
        uint64_t AttrIndex:3;
        uint64_t NS:1;
        uint64_t AP:2;
        uint64_t SH:2;
        uint64_t AF:1;
        uint64_t nG:1;
        uint64_t RES0_0:18;
        uint64_t OutputAddr:18;
        uint64_t RES0_1:4;
        uint64_t Contiguous:1;
        uint64_t PXN:1;
        uint64_t UXN:1;
        uint64_t Reserved:4;
        uint64_t PBHA:4;
        uint64_t Ignored:1;
       }__attribute__((packed)) S0;

        struct{
        uint64_t Valid:1;
        uint64_t IsTable:1;
        uint64_t Ignored_0:10;
        uint64_t NextLevelTableAddr:36;
        uint64_t RES0:4;
        uint64_t Ignored_1:7;
        uint64_t PXNTable:1;
        uint64_t XNTable:1;
        uint64_t APTable:2;
        uint64_t NSTable:1;
       }__attribute__((packed)) S1;

    }__attribute__((packed));

        __attribute__((always_inline)) inline void dump()const
        {
            kout << "Descriptor4KBL1 : ";
            if(S0.IsTable==0)
            {
             kout
                <<"S0.Valid = "<< S0.Valid << ","
                <<"S0.IsTable = "<< S0.IsTable << ","
                <<"S0.AttrIndex = "<< S0.AttrIndex << ","
                <<"S0.NS = "<< S0.NS << ","
                <<"S0.AP = "<< S0.AP << ","
                <<"S0.SH = "<< S0.SH << ","
                <<"S0.AF = "<< S0.AF << ","
                <<"S0.nG = "<< S0.nG << ","
                <<"S0.RES0_0 = "<< S0.RES0_0 << ","
                <<"S0.OutputAddr = "<< Hex(S0.OutputAddr) << ","
                <<"S0.RES0_1 = "<< S0.RES0_1 << ","
                <<"S0.Contiguous = "<< S0.Contiguous << ","
                <<"S0.PXN = "<< S0.PXN << ","
                <<"S0.UXN = "<< S0.UXN << ","
                <<"S0.Reserved = "<< S0.Reserved << ","
                <<"S0.PBHA = "<< S0.PBHA << ","
                <<"S0.Ignored = "<< S0.Ignored;
            }
            else
            {
             kout
                <<"S1.Valid = "<< S1.Valid << ","
                <<"S1.IsTable = "<< S1.IsTable << ","
                <<"S1.Ignored_0 = "<< S1.Ignored_0 << ","
                <<"S1.NextLevelTableAddr = "<< Hex(S1.NextLevelTableAddr) << ","
                <<"S1.RES0 = "<< S1.RES0 << ","
                <<"S1.Ignored_1 = "<< S1.Ignored_1 << ","
                <<"S1.PXNTable = "<< S1.PXNTable << ","
                <<"S1.XNTable = "<< S1.XNTable << ","
                <<"S1.APTable = "<< S1.APTable << ","
                <<"S1.NSTable = "<< S1.NSTable;
            }
             kout << "\n";
        }
        __attribute__((always_inline)) inline static RegDescriptor4KBL1 read(void *p);
        __attribute__((always_inline)) inline static RegDescriptor4KBL1 read(size_t p);
        __attribute__((always_inline)) inline void write(void *p)const;
        __attribute__((always_inline)) inline void write(size_t p)const;
}__attribute__((packed));
RegDescriptor4KBL1 RegDescriptor4KBL1::read(void *p) { return *reinterpret_cast<RegDescriptor4KBL1*>(p);}RegDescriptor4KBL1 RegDescriptor4KBL1::read(size_t p){ return *reinterpret_cast<RegDescriptor4KBL1*>(p);}
void RegDescriptor4KBL1::write(void *p)const { *reinterpret_cast<RegDescriptor4KBL1*>(p)=*this; }void RegDescriptor4KBL1::write(size_t p)const{ *reinterpret_cast<RegDescriptor4KBL1*>(p)=*this;}



class RegDescriptor4KBL2{
public:
    union{
        struct{
        uint64_t Valid:1;
        uint64_t IsTable:1;
        uint64_t NS:1;
        uint64_t AP:2;
        uint64_t SH:2;
        uint64_t AF:1;
        uint64_t nG:1;
        uint64_t RES0_0:9;
        uint64_t OutputAddr:27;
        uint64_t RES0_1:4;
        uint64_t Contiguous:1;
        uint64_t PXN:1;
        uint64_t UXN:1;
        uint64_t Reserved:4;
        uint64_t PBHA:4;
        uint64_t Ignored:1;
       }__attribute__((packed)) S0;

        struct{
        uint64_t Valid:1;
        uint64_t IsTable:1;
        uint64_t Ignored_0:10;
        uint64_t NextLevelTableAddr:36;
        uint64_t RES0:4;
        uint64_t Ignored_1:7;
        uint64_t PXNTable:1;
        uint64_t XNTable:1;
        uint64_t APTable:2;
        uint64_t NSTable:1;
       }__attribute__((packed)) S1;

    }__attribute__((packed));

        __attribute__((always_inline)) inline void dump()const
        {
            kout << "Descriptor4KBL2 : ";
            if(S0.IsTable==0)
            {
             kout
                <<"S0.Valid = "<< S0.Valid << ","
                <<"S0.IsTable = "<< S0.IsTable << ","
                <<"S0.NS = "<< S0.NS << ","
                <<"S0.AP = "<< S0.AP << ","
                <<"S0.SH = "<< S0.SH << ","
                <<"S0.AF = "<< S0.AF << ","
                <<"S0.nG = "<< S0.nG << ","
                <<"S0.RES0_0 = "<< S0.RES0_0 << ","
                <<"S0.OutputAddr = "<< Hex(S0.OutputAddr) << ","
                <<"S0.RES0_1 = "<< S0.RES0_1 << ","
                <<"S0.Contiguous = "<< S0.Contiguous << ","
                <<"S0.PXN = "<< S0.PXN << ","
                <<"S0.UXN = "<< S0.UXN << ","
                <<"S0.Reserved = "<< S0.Reserved << ","
                <<"S0.PBHA = "<< S0.PBHA << ","
                <<"S0.Ignored = "<< S0.Ignored;
            }
            else
            {
             kout
                <<"S1.Valid = "<< S1.Valid << ","
                <<"S1.IsTable = "<< S1.IsTable << ","
                <<"S1.Ignored_0 = "<< S1.Ignored_0 << ","
                <<"S1.NextLevelTableAddr = "<< Hex(S1.NextLevelTableAddr) << ","
                <<"S1.RES0 = "<< S1.RES0 << ","
                <<"S1.Ignored_1 = "<< S1.Ignored_1 << ","
                <<"S1.PXNTable = "<< S1.PXNTable << ","
                <<"S1.XNTable = "<< S1.XNTable << ","
                <<"S1.APTable = "<< S1.APTable << ","
                <<"S1.NSTable = "<< S1.NSTable;
            }
             kout << "\n";
        }
        __attribute__((always_inline)) inline static RegDescriptor4KBL2 read(void *p);
        __attribute__((always_inline)) inline static RegDescriptor4KBL2 read(size_t p);
        __attribute__((always_inline)) inline void write(void *p)const;
        __attribute__((always_inline)) inline void write(size_t p)const;
}__attribute__((packed));
RegDescriptor4KBL2 RegDescriptor4KBL2::read(void *p) { return *reinterpret_cast<RegDescriptor4KBL2*>(p);}RegDescriptor4KBL2 RegDescriptor4KBL2::read(size_t p){ return *reinterpret_cast<RegDescriptor4KBL2*>(p);}
void RegDescriptor4KBL2::write(void *p)const { *reinterpret_cast<RegDescriptor4KBL2*>(p)=*this; }void RegDescriptor4KBL2::write(size_t p)const{ *reinterpret_cast<RegDescriptor4KBL2*>(p)=*this;}



class RegDescriptor4KBL3{
public:
        uint64_t Valid:1;
        uint64_t RES1_0:1;
        uint64_t AttrIndex:3;
        uint64_t NS:1;
        uint64_t AP:2;
        uint64_t SH:2;
        uint64_t AF:1;
        uint64_t nG:1;
        uint64_t OutputAddr:36;
        uint64_t RES0_1:3;
        uint64_t DBM:1;
        uint64_t Contiguous:1;
        uint64_t PXN:1;
        uint64_t UXN:1;
        uint64_t Reserved:4;
        uint64_t PBHA:4;
        uint64_t Ignored:1;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "Descriptor4KBL3 : "
                <<"Valid = "<< Valid << ","
                <<"RES1_0 = "<< RES1_0 << ","
                <<"AttrIndex = "<< AttrIndex << ","
                <<"NS = "<< NS << ","
                <<"AP = "<< AP << ","
                <<"SH = "<< SH << ","
                <<"AF = "<< AF << ","
                <<"nG = "<< nG << ","
                <<"OutputAddr = "<< Hex(OutputAddr) << ","
                <<"RES0_1 = "<< RES0_1 << ","
                <<"DBM = "<< DBM << ","
                <<"Contiguous = "<< Contiguous << ","
                <<"PXN = "<< PXN << ","
                <<"UXN = "<< UXN << ","
                <<"Reserved = "<< Reserved << ","
                <<"PBHA = "<< PBHA << ","
                <<"Ignored = "<< Ignored
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegDescriptor4KBL3 read(void *p);
        __attribute__((always_inline)) inline static RegDescriptor4KBL3 read(size_t p);
        __attribute__((always_inline)) inline void write(void *p)const;
        __attribute__((always_inline)) inline void write(size_t p)const;
}__attribute__((packed));
RegDescriptor4KBL3 RegDescriptor4KBL3::read(void *p) { return *reinterpret_cast<RegDescriptor4KBL3*>(p);}RegDescriptor4KBL3 RegDescriptor4KBL3::read(size_t p){ return *reinterpret_cast<RegDescriptor4KBL3*>(p);}
void RegDescriptor4KBL3::write(void *p)const { *reinterpret_cast<RegDescriptor4KBL3*>(p)=*this; }void RegDescriptor4KBL3::write(size_t p)const{ *reinterpret_cast<RegDescriptor4KBL3*>(p)=*this;}
# 6 "D:/Pool/eclipse-workspace_aarch64/newspace/raspiOS/src/arch/qemu_virt/main_run_process.cpp" 2

# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/memory/MemoryManager.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/memory/MemoryManager.h"
#define INCLUDE_MEMORYMANAGER_H_ 


# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/memory/MemoryChunk.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/memory/MemoryChunk.h"
#define INCLUDE_MEMORYCHUNK_H_ 
# 22 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/memory/MemoryChunk.h"
class MemoryChunk{
public:

 enum { ValidBits = 6, IsEndBits=1,AllocatedBits=1,SizeBits=38,NextBaseBits=18};
 enum { MaxSinlgeMoveBytes = (1 << ValidBits) };
 MemoryChunk(size_t size,bool allocated,size_t nextValidChunkOffset,bool endMark,size_t nextBaseFromEnd);
 bool isAllocated() const;
 void setAllocated(bool allocated);
 bool isEnd() const;
 void setEnd(bool end);
 const MemoryChunk* getNext()const;
 MemoryChunk* getNext();
 size_t getSize() const;
 void setSize(size_t size);
 void* getDataPtr();
 const void * getDataPtr()const;
 void* getDataEnd();
 const void * getDataEnd()const;
 uint64_t getNextBaseFromEnd() const;
 void setNextBaseFromEnd(uint64_t nextBaseFromEnd);
 uint64_t getNextValidChunkOffset() const;
 void setNextValidChunkOffset(uint64_t nextValidChunkOffset );
# 54 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/memory/MemoryChunk.h"
 MemoryChunk* moveAhead(size_t moveSize);

 size_t moveOffsetOfAllocSuchAlignedSpace(size_t allocSize,size_t alignment)const;

 bool split(size_t splitSize);



 void mergeTrailingsUnallocated();


private:
 uint64_t nextValidChunkOffset :ValidBits;
 uint64_t endMark :IsEndBits;
 uint64_t allocated :AllocatedBits;
 uint64_t size :SizeBits;
 uint64_t nextBaseFromEnd :NextBaseBits;
}__attribute__((packed));
# 13 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/memory/MemoryManager.h" 2
# 25 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/memory/MemoryManager.h"
class MemoryManager{
public:
 enum { CHUNK_SIZE = sizeof(MemoryChunk), MINIMAL_ALLOC_SIZE = sizeof(size_t), MINIMAL_ALIGNMENT = sizeof(size_t) };
 MemoryManager()=delete;



 MemoryManager(void *base,size_t size,bool initChunks=true);
public:

 size_t normalizeAllocSize(size_t n);


 void* allocate(size_t n);


 void* allocate(size_t n,size_t alignment);
 template <class T>
 T allocateAs(size_t n);
 template <class T>
 T allocateAs(size_t n,size_t alignment);
# 55 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/memory/MemoryManager.h"
 bool tryIncrease(void *origin,size_t incSize);
 bool tryDecrease(void *origin,size_t decSize);
# 65 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/memory/MemoryManager.h"
 void* reallocate(void *origin,size_t newSize,size_t oldSize = 0xffffffffffffffffUL);

 template <class T>
 T reallocateAs(void *origin,size_t newSize,size_t oldSize = 0xffffffffffffffffUL);





 void deallocate(void *p);





 size_t getAllocatedLength(void *origin)const;


private:
 MemoryChunk *headChunk;
 const char *base;
 const size_t size;
};



extern MemoryManager mman;

# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/templates_implementation/MemoryManager.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/templates_implementation/MemoryManager.h"
#define INCLUDE_TEMPLATES_IMPLEMENTATION_MEMORYMANAGER_H_ 

# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/memory/MemoryManager.h" 1
# 12 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/templates_implementation/MemoryManager.h" 2


template <class T>
T MemoryManager::allocateAs(size_t n)
{
 return reinterpret_cast<T>(this->allocate(n));
}
template <class T>
T MemoryManager::allocateAs(size_t n,size_t alignment)
{
 return reinterpret_cast<T>(this->allocate(n,alignment));
}

template <class T>
T MemoryManager::reallocateAs(void *origin,size_t newSize,size_t oldSize)
{
 return reinterpret_cast<T>(reallocate(origin, newSize,oldSize));
}
# 94 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/memory/MemoryManager.h" 2
# 8 "D:/Pool/eclipse-workspace_aarch64/newspace/raspiOS/src/arch/qemu_virt/main_run_process.cpp" 2

# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/mmu/VirtualAddress.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/mmu/VirtualAddress.h"
#define INCLUDE_ARCH_COMMON_AARCH64_MMU_VIRTUALADDRESS_H_ 






class VirtualAddress{
public:
 struct SegmentedAddress{
   uint64_t offset:12;
   uint64_t index0:9;
   uint64_t index1:9;
   uint64_t index2:9;
   uint64_t index3:9;
   uint64_t upperBits:16;
 };
public:
 VirtualAddress(uint8_t addrLen=48);
 VirtualAddress(uint64_t vaddr,uint8_t addrLen=48);


 VirtualAddress& index(uint8_t which,uint32_t val);


 uint32_t index(uint8_t which)const;


 VirtualAddress& offset(uint64_t off);
 uint64_t offset()const;

 VirtualAddress& addrLen(uint8_t len);
 uint8_t addrLen()const;

 VirtualAddress& addr(uint64_t addr);
 uint64_t addr()const;


 VirtualAddress & ttbrSel(int i);
 int ttbrSel()const;

 bool valid()const;
 uint8_t initialLevel()const;
 bool hasLevel(uint8_t which)const;


private:
 uint8_t rightShiftBits(uint8_t which)const;
 uint8_t minimalLevelLength(uint8_t which)const;

 uint64_t levelIndexMask()const;



private:
 union{
  uint64_t _addr;
  SegmentedAddress _segAddr;
 };
 uint8_t _addrLen;
 bool _hasTag;

};
# 10 "D:/Pool/eclipse-workspace_aarch64/newspace/raspiOS/src/arch/qemu_virt/main_run_process.cpp" 2
# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/schedule/Process.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/schedule/Process.h"
#define INCLUDE_SCHEDULE_PROGRESS_H_ 

# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/data_structures/LinkedList.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/data_structures/LinkedList.h"
#define INCLUDE_DATA_STRUCTURES_LINKEDLIST_H_ 


template <class T>
class LinkedList{
public:

private:

};
# 12 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/schedule/Process.h" 2
# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/schedule/PidManager.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/schedule/PidManager.h"
#define INCLUDE_SCHEDULE_PIDMANAGER_H_ 




# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstring" 1 3
# 39 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstring" 3
       
# 40 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstring" 3


# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\string.h" 1 3 4







#define _STRING_H_ 

# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\_ansi.h" 1 3 4
# 13 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\_ansi.h" 3 4
#define _ANSIDECL_H_ 

# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\newlib.h" 1 3 4







#define __NEWLIB_H__ 1





# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\_newlib_version.h" 1 3 4



#define _NEWLIB_VERSION_H__ 1

#define _NEWLIB_VERSION "2.5.0"
#define __NEWLIB__ 2
#define __NEWLIB_MINOR__ 5
#define __NEWLIB_PATCHLEVEL__ 0
# 15 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\newlib.h" 2 3 4



#define _WANT_IO_C99_FORMATS 1


#define _WANT_IO_LONG_LONG 1





#define _WANT_IO_LONG_DOUBLE 1


#define _WANT_IO_POS_ARGS 1






#define _MB_CAPABLE 1


#define _MB_LEN_MAX 8
# 50 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\newlib.h" 3 4
#define HAVE_INITFINI_ARRAY 1



#define _ATEXIT_DYNAMIC_ALLOC 1


#define _HAVE_LONG_DOUBLE 1


#define _HAVE_CC_INHIBIT_LOOP_TO_LIBCALL 1





#define _FVWRITE_IN_STREAMIO 1


#define _FSEEK_OPTIMIZATION 1


#define _WIDE_ORIENT 1


#define _UNBUF_STREAM_OPT 1
# 16 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\_ansi.h" 2 3 4
# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\config.h" 1 3 4

#define __SYS_CONFIG_H__ 

# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\machine\\ieeefp.h" 1 3 4
# 74 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\machine\\ieeefp.h" 3 4
#define __IEEE_LITTLE_ENDIAN 
# 5 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\config.h" 2 3 4
# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\features.h" 1 3 4
# 22 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\features.h" 3 4
#define _SYS_FEATURES_H 



# 25 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\features.h" 3 4
extern "C" {







#define __GNUC_PREREQ(maj,min) ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))






#define __GNUC_PREREQ__(ma,mi) __GNUC_PREREQ(ma, mi)
# 244 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\features.h" 3 4
#define __ATFILE_VISIBLE 0





#define __BSD_VISIBLE 0





#define __GNU_VISIBLE 0




#define __ISO_C_VISIBLE 2011
# 272 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\features.h" 3 4
#define __LARGEFILE_VISIBLE 0





#define __MISC_VISIBLE 0
# 294 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\features.h" 3 4
#define __POSIX_VISIBLE 0





#define __SVID_VISIBLE 0
# 314 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\features.h" 3 4
#define __XSI_VISIBLE 0
# 516 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\features.h" 3 4
}
# 6 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\config.h" 2 3 4


#define MALLOC_ALIGNMENT 16
# 219 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\config.h" 3 4
#define _POINTER_INT long





#undef __RAND_MAX



#define __RAND_MAX 0x7fffffff
# 244 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\config.h" 3 4
#define __EXPORT 



#define __IMPORT 






#define _READ_WRITE_RETURN_TYPE int





#define _READ_WRITE_BUFSIZE_TYPE int
# 17 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\_ansi.h" 2 3 4






#define _HAVE_STDC 
# 34 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\_ansi.h" 3 4
#define _BEGIN_STD_C extern "C" {
#define _END_STD_C }


#define _NOTHROW __attribute__ ((__nothrow__))
# 50 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\_ansi.h" 3 4
#define _PTR void *
#define _AND ,
#define _NOARGS void
#define _CONST const
#define _VOLATILE volatile
#define _SIGNED signed
#define _DOTS , ...
#define _VOID void






#define _EXFUN_NOTHROW(name,proto) name proto _NOTHROW
#define _EXFUN(name,proto) name proto
#define _EXPARM(name,proto) (* name) proto
#define _EXFNPTR(name,proto) (* name) proto

#define _DEFUN(name,arglist,args) name(args)
#define _DEFUN_VOID(name) name(_NOARGS)
#define _CAST_VOID (void)

#define _LONG_DOUBLE long double


#define _PARAMS(paramlist) paramlist
# 101 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\_ansi.h" 3 4
#define _ATTRIBUTE(attrs) __attribute__ (attrs)
# 127 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\_ansi.h" 3 4
#define _ELIDABLE_INLINE static __inline__



#define _NOINLINE __attribute__ ((__noinline__))
#define _NOINLINE_STATIC _NOINLINE static
# 11 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\string.h" 2 3 4
# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\reent.h" 1 3 4
# 9 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\reent.h" 3 4
extern "C" {

#define _SYS_REENT_H_ 

# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\_ansi.h" 1 3 4
# 14 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\reent.h" 2 3 4
# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 1 3 4
# 15 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\reent.h" 2 3 4
# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\_types.h" 1 3 4
# 20 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\_types.h" 3 4
#define _SYS__TYPES_H 



# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\machine\\_types.h" 1 3 4
# 30 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\machine\\_types.h" 3 4
#define _MACHINE__TYPES_H 

# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\machine\\_default_types.h" 1 3 4





#define _MACHINE__DEFAULT_TYPES_H 
# 15 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\machine\\_default_types.h" 3 4
#define __EXP(x) __ ##x ##__
# 26 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\machine\\_default_types.h" 3 4
#define __have_longlong64 1




#define __have_long64 1





extern "C" {



typedef signed char __int8_t;

typedef unsigned char __uint8_t;



#define ___int8_t_defined 1







typedef short int __int16_t;

typedef short unsigned int __uint16_t;



#define ___int16_t_defined 1
# 77 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\machine\\_default_types.h" 3 4
typedef int __int32_t;

typedef unsigned int __uint32_t;



#define ___int32_t_defined 1
# 103 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\machine\\_default_types.h" 3 4
typedef long int __int64_t;

typedef long unsigned int __uint64_t;



#define ___int64_t_defined 1
# 134 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\machine\\_default_types.h" 3 4
typedef signed char __int_least8_t;

typedef unsigned char __uint_least8_t;



#define ___int_least8_t_defined 1
# 160 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\machine\\_default_types.h" 3 4
typedef short int __int_least16_t;

typedef short unsigned int __uint_least16_t;



#define ___int_least16_t_defined 1
# 182 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\machine\\_default_types.h" 3 4
typedef int __int_least32_t;

typedef unsigned int __uint_least32_t;



#define ___int_least32_t_defined 1
# 200 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\machine\\_default_types.h" 3 4
typedef long int __int_least64_t;

typedef long unsigned int __uint_least64_t;



#define ___int_least64_t_defined 1







typedef long int __intmax_t;







typedef long unsigned int __uintmax_t;







typedef long int __intptr_t;

typedef long unsigned int __uintptr_t;
# 244 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\machine\\_default_types.h" 3 4
#undef __EXP


}
# 33 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\machine\\_types.h" 2 3 4

#define __machine_ssize_t_defined 
typedef long signed int _ssize_t;
# 25 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\_types.h" 2 3 4
# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\lock.h" 1 3 4

#define __SYS_LOCK_H__ 



typedef int _LOCK_T;
typedef int _LOCK_RECURSIVE_T;



#define __LOCK_INIT(class,lock) static int lock = 0;
#define __LOCK_INIT_RECURSIVE(class,lock) static int lock = 0;
#define __lock_init(lock) (_CAST_VOID 0)
#define __lock_init_recursive(lock) (_CAST_VOID 0)
#define __lock_close(lock) (_CAST_VOID 0)
#define __lock_close_recursive(lock) (_CAST_VOID 0)
#define __lock_acquire(lock) (_CAST_VOID 0)
#define __lock_acquire_recursive(lock) (_CAST_VOID 0)
#define __lock_try_acquire(lock) (_CAST_VOID 0)
#define __lock_try_acquire_recursive(lock) (_CAST_VOID 0)
#define __lock_release(lock) (_CAST_VOID 0)
#define __lock_release_recursive(lock) (_CAST_VOID 0)
# 26 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\_types.h" 2 3 4


typedef long __blkcnt_t;



typedef long __blksize_t;



typedef __uint64_t __fsblkcnt_t;



typedef __uint32_t __fsfilcnt_t;



typedef long _off_t;





typedef int __pid_t;



typedef short __dev_t;



typedef unsigned short __uid_t;


typedef unsigned short __gid_t;



typedef __uint32_t __id_t;







typedef unsigned short __ino_t;
# 88 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\_types.h" 3 4
typedef __uint32_t __mode_t;





__extension__ typedef long long _off64_t;





typedef _off_t __off_t;


typedef _off64_t __loff_t;


typedef long __key_t;







typedef long _fpos_t;
# 125 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\_types.h" 3 4
#undef __size_t



typedef long unsigned int __size_t;
# 156 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\_types.h" 3 4
typedef _ssize_t __ssize_t;

#define __need_wint_t 
# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 1 3 4
# 161 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#undef __need_ptrdiff_t
# 238 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#undef __need_size_t
# 347 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#undef __need_wchar_t




#define _WINT_T 




typedef unsigned int wint_t;

#undef __need_wint_t
# 401 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#undef NULL

#define NULL __null
# 412 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 160 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\_types.h" 2 3 4



typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    unsigned char __wchb[4];
  } __value;
} _mbstate_t;



typedef _LOCK_RECURSIVE_T _flock_t;




typedef void *_iconv_t;


#define _CLOCK_T_ unsigned long
typedef unsigned long __clock_t;

#define _TIME_T_ long
typedef long __time_t;

#define _CLOCKID_T_ unsigned long
typedef unsigned long __clockid_t;

#define _TIMER_T_ unsigned long
typedef unsigned long __timer_t;


typedef __uint8_t __sa_family_t;



typedef __uint32_t __socklen_t;


typedef unsigned short __nlink_t;
typedef long __suseconds_t;
typedef unsigned long __useconds_t;




typedef char * __va_list;
# 16 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\reent.h" 2 3 4

#define _NULL 0






#define __Long int
typedef unsigned int __ULong;
# 38 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\reent.h" 3 4
struct _reent;

struct __locale_t;






struct _Bigint
{
  struct _Bigint *_next;
  int _k, _maxwds, _sign, _wds;
  __ULong _x[1];
};


struct __tm
{
  int __tm_sec;
  int __tm_min;
  int __tm_hour;
  int __tm_mday;
  int __tm_mon;
  int __tm_year;
  int __tm_wday;
  int __tm_yday;
  int __tm_isdst;
};





#define _ATEXIT_SIZE 32

struct _on_exit_args {
 void * _fnargs[32];
 void * _dso_handle[32];

 __ULong _fntypes;


 __ULong _is_cxa;
};
# 93 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\reent.h" 3 4
struct _atexit {
 struct _atexit *_next;
 int _ind;

 void (*_fns[32])(void);
        struct _on_exit_args _on_exit_args;
};
#define _ATEXIT_INIT {_NULL, 0, {_NULL}, {{_NULL}, {_NULL}, 0, 0}}





#define _REENT_INIT_ATEXIT _NULL, _ATEXIT_INIT,
# 117 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\reent.h" 3 4
struct __sbuf {
 unsigned char *_base;
 int _size;
};
# 178 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\reent.h" 3 4
#define _REENT_SMALL_CHECK_INIT(ptr) 


struct __sFILE {
  unsigned char *_p;
  int _r;
  int _w;
  short _flags;
  short _file;
  struct __sbuf _bf;
  int _lbfsize;






  void * _cookie;

  int (* _read) (struct _reent *, void *, char *, int)
                                          ;
  int (* _write) (struct _reent *, void *, const char *, int)

                                   ;
  _fpos_t (* _seek) (struct _reent *, void *, _fpos_t, int);
  int (* _close) (struct _reent *, void *);


  struct __sbuf _ub;
  unsigned char *_up;
  int _ur;


  unsigned char _ubuf[3];
  unsigned char _nbuf[1];


  struct __sbuf _lb;


  int _blksize;
  _off_t _offset;


  struct _reent *_data;



  _flock_t _lock;

  _mbstate_t _mbstate;
  int _flags2;
};
# 287 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\reent.h" 3 4
typedef struct __sFILE __FILE;



struct _glue
{
  struct _glue *_next;
  int _niobs;
  __FILE *_iobs;
};
# 312 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\reent.h" 3 4
#define _RAND48_SEED_0 (0x330e)
#define _RAND48_SEED_1 (0xabcd)
#define _RAND48_SEED_2 (0x1234)
#define _RAND48_MULT_0 (0xe66d)
#define _RAND48_MULT_1 (0xdeec)
#define _RAND48_MULT_2 (0x0005)
#define _RAND48_ADD (0x000b)
struct _rand48 {
  unsigned short _seed[3];
  unsigned short _mult[3];
  unsigned short _add;




};


#define _REENT_EMERGENCY_SIZE 25
#define _REENT_ASCTIME_SIZE 26
#define _REENT_SIGNAL_SIZE 24
# 569 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\reent.h" 3 4
struct _reent
{
  int _errno;




  __FILE *_stdin, *_stdout, *_stderr;

  int _inc;
  char _emergency[25];


  int _unspecified_locale_info;
  struct __locale_t *_locale;

  int __sdidinit;

  void (* __cleanup) (struct _reent *);


  struct _Bigint *_result;
  int _result_k;
  struct _Bigint *_p5s;
  struct _Bigint **_freelist;


  int _cvtlen;
  char *_cvtbuf;

  union
    {
      struct
        {
          unsigned int _unused_rand;
          char * _strtok_last;
          char _asctime_buf[26];
          struct __tm _localtime_buf;
          int _gamma_signgam;
          __extension__ unsigned long long _rand_next;
          struct _rand48 _r48;
          _mbstate_t _mblen_state;
          _mbstate_t _mbtowc_state;
          _mbstate_t _wctomb_state;
          char _l64a_buf[8];
          char _signal_buf[24];
          int _getdate_err;
          _mbstate_t _mbrlen_state;
          _mbstate_t _mbrtowc_state;
          _mbstate_t _mbsrtowcs_state;
          _mbstate_t _wcrtomb_state;
          _mbstate_t _wcsrtombs_state;
   int _h_errno;
        } _reent;



      struct
        {
#define _N_LISTS 30
          unsigned char * _nextf[30];
          unsigned int _nmalloc[30];
        } _unused;
    } _new;



  struct _atexit *_atexit;
  struct _atexit _atexit0;



  void (**(_sig_func))(int);




  struct _glue __sglue;
  __FILE __sf[3];
};

#define _REENT_INIT(var) { 0, &(var).__sf[0], &(var).__sf[1], &(var).__sf[2], 0, "", 0, _NULL, 0, _NULL, _NULL, 0, _NULL, _NULL, 0, _NULL, { { 0, _NULL, "", {0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, 1, { {_RAND48_SEED_0, _RAND48_SEED_1, _RAND48_SEED_2}, {_RAND48_MULT_0, _RAND48_MULT_1, _RAND48_MULT_2}, _RAND48_ADD }, {0, {0}}, {0, {0}}, {0, {0}}, "", "", 0, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}} } }, _REENT_INIT_ATEXIT _NULL, {_NULL, 0, _NULL} }
# 698 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\reent.h" 3 4
#define _REENT_INIT_PTR_ZEROED(var) { (var)->_stdin = &(var)->__sf[0]; (var)->_stdout = &(var)->__sf[1]; (var)->_stderr = &(var)->__sf[2]; (var)->_new._reent._rand_next = 1; (var)->_new._reent._r48._seed[0] = _RAND48_SEED_0; (var)->_new._reent._r48._seed[1] = _RAND48_SEED_1; (var)->_new._reent._r48._seed[2] = _RAND48_SEED_2; (var)->_new._reent._r48._mult[0] = _RAND48_MULT_0; (var)->_new._reent._r48._mult[1] = _RAND48_MULT_1; (var)->_new._reent._r48._mult[2] = _RAND48_MULT_2; (var)->_new._reent._r48._add = _RAND48_ADD; }
# 712 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\reent.h" 3 4
#define _REENT_CHECK_RAND48(ptr) 
#define _REENT_CHECK_MP(ptr) 
#define _REENT_CHECK_TM(ptr) 
#define _REENT_CHECK_ASCTIME_BUF(ptr) 
#define _REENT_CHECK_EMERGENCY(ptr) 
#define _REENT_CHECK_MISC(ptr) 
#define _REENT_CHECK_SIGNAL_BUF(ptr) 

#define _REENT_SIGNGAM(ptr) ((ptr)->_new._reent._gamma_signgam)
#define _REENT_RAND_NEXT(ptr) ((ptr)->_new._reent._rand_next)
#define _REENT_RAND48_SEED(ptr) ((ptr)->_new._reent._r48._seed)
#define _REENT_RAND48_MULT(ptr) ((ptr)->_new._reent._r48._mult)
#define _REENT_RAND48_ADD(ptr) ((ptr)->_new._reent._r48._add)
#define _REENT_MP_RESULT(ptr) ((ptr)->_result)
#define _REENT_MP_RESULT_K(ptr) ((ptr)->_result_k)
#define _REENT_MP_P5S(ptr) ((ptr)->_p5s)
#define _REENT_MP_FREELIST(ptr) ((ptr)->_freelist)
#define _REENT_ASCTIME_BUF(ptr) ((ptr)->_new._reent._asctime_buf)
#define _REENT_TM(ptr) (&(ptr)->_new._reent._localtime_buf)
#define _REENT_EMERGENCY(ptr) ((ptr)->_emergency)
#define _REENT_STRTOK_LAST(ptr) ((ptr)->_new._reent._strtok_last)
#define _REENT_MBLEN_STATE(ptr) ((ptr)->_new._reent._mblen_state)
#define _REENT_MBTOWC_STATE(ptr) ((ptr)->_new._reent._mbtowc_state)
#define _REENT_WCTOMB_STATE(ptr) ((ptr)->_new._reent._wctomb_state)
#define _REENT_MBRLEN_STATE(ptr) ((ptr)->_new._reent._mbrlen_state)
#define _REENT_MBRTOWC_STATE(ptr) ((ptr)->_new._reent._mbrtowc_state)
#define _REENT_MBSRTOWCS_STATE(ptr) ((ptr)->_new._reent._mbsrtowcs_state)
#define _REENT_WCRTOMB_STATE(ptr) ((ptr)->_new._reent._wcrtomb_state)
#define _REENT_WCSRTOMBS_STATE(ptr) ((ptr)->_new._reent._wcsrtombs_state)
#define _REENT_L64A_BUF(ptr) ((ptr)->_new._reent._l64a_buf)
#define _REENT_SIGNAL_BUF(ptr) ((ptr)->_new._reent._signal_buf)
#define _REENT_GETDATE_ERR_P(ptr) (&((ptr)->_new._reent._getdate_err))



#define _REENT_INIT_PTR(var) { memset((var), 0, sizeof(*(var))); _REENT_INIT_PTR_ZEROED(var); }







#define _Kmax (sizeof (size_t) << 3)







#define __ATTRIBUTE_IMPURE_PTR__ 


extern struct _reent *_impure_ptr ;
extern struct _reent *const _global_impure_ptr ;

void _reclaim_reent (struct _reent *);
# 779 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\reent.h" 3 4
#define _REENT _impure_ptr


#define _GLOBAL_REENT _global_impure_ptr





#define _GLOBAL_ATEXIT (_GLOBAL_REENT->_atexit)



}
# 12 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\string.h" 2 3 4
# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\cdefs.h" 1 3 4
# 41 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\cdefs.h" 3 4
#define _SYS_CDEFS_H_ 



# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 1 3 4
# 46 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\cdefs.h" 2 3 4

#define __PMT(args) args
#define __DOTS , ...
#define __THROW 


#define __ASMNAME(cname) __XSTRING (__USER_LABEL_PREFIX__) cname


#define __ptr_t void *
#define __long_double_t long double

#define __attribute_malloc__ 
#define __attribute_pure__ 
#define __attribute_format_strfmon__(a,b) 
#define __flexarr [0]


#define __bounded 
#define __unbounded 
#define __ptrvalue 
# 76 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\cdefs.h" 3 4
#define __has_extension __has_feature


#define __has_feature(x) 0





#define __has_builtin(x) 0



#define __BEGIN_DECLS extern "C" {
#define __END_DECLS }
# 105 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\cdefs.h" 3 4
#define __GNUCLIKE_ASM 3
#define __GNUCLIKE_MATH_BUILTIN_CONSTANTS 



#define __GNUCLIKE___TYPEOF 1
#define __GNUCLIKE___OFFSETOF 1
#define __GNUCLIKE___SECTION 1


#define __GNUCLIKE_CTOR_SECTION_HANDLING 1


#define __GNUCLIKE_BUILTIN_CONSTANT_P 1






#define __GNUCLIKE_BUILTIN_VARARGS 1
#define __GNUCLIKE_BUILTIN_STDARG 1
#define __GNUCLIKE_BUILTIN_VAALIST 1



#define __GNUC_VA_LIST_COMPATIBILITY 1






#define __compiler_membar() __asm __volatile(" " : : : "memory")



#define __GNUCLIKE_BUILTIN_NEXT_ARG 1
#define __GNUCLIKE_MATH_BUILTIN_RELOPS 


#define __GNUCLIKE_BUILTIN_MEMCPY 1


#define __CC_SUPPORTS_INLINE 1
#define __CC_SUPPORTS___INLINE 1
#define __CC_SUPPORTS___INLINE__ 1

#define __CC_SUPPORTS___FUNC__ 1
#define __CC_SUPPORTS_WARNING 1

#define __CC_SUPPORTS_VARADIC_XXX 1

#define __CC_SUPPORTS_DYNAMIC_ARRAY_INIT 1
# 175 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\cdefs.h" 3 4
#define __P(protos) protos
#define __CONCAT1(x,y) x ## y
#define __CONCAT(x,y) __CONCAT1(x,y)
#define __STRING(x) #x
#define __XSTRING(x) __STRING(x)

#define __const const
#define __signed signed
#define __volatile volatile

#define __inline inline
# 239 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\cdefs.h" 3 4
#define __weak_symbol __attribute__((__weak__))
# 252 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\cdefs.h" 3 4
#define __dead2 __attribute__((__noreturn__))
#define __pure2 __attribute__((__const__))
#define __unused __attribute__((__unused__))
#define __used __attribute__((__used__))
#define __packed __attribute__((__packed__))
#define __aligned(x) __attribute__((__aligned__(x)))
#define __section(x) __attribute__((__section__(x)))


#define __alloc_size(x) __attribute__((__alloc_size__(x)))




#define __alloc_align(x) __attribute__((__alloc_align__(x)))
# 285 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\cdefs.h" 3 4
#define _Alignas(x) alignas(x)







#define _Alignof(x) alignof(x)
# 303 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\cdefs.h" 3 4
#define _Atomic(T) struct { T volatile __val; }



#define _Noreturn [[noreturn]]







#define _Static_assert(x,y) static_assert(x, y)
# 338 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\cdefs.h" 3 4
#define _Thread_local __thread
# 364 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\cdefs.h" 3 4
#define __malloc_like __attribute__((__malloc__))
#define __pure __attribute__((__pure__))






#define __always_inline __attribute__((__always_inline__))





#define __noinline __attribute__ ((__noinline__))





#define __nonnull(x) __attribute__((__nonnull__(x)))
#define __nonnull_all __attribute__((__nonnull__))






#define __fastcall __attribute__((__fastcall__))
#define __result_use_check __attribute__((__warn_unused_result__))






#define __returns_twice __attribute__((__returns_twice__))





#define __unreachable() __builtin_unreachable()
# 424 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\cdefs.h" 3 4
#define __restrict 
# 459 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\cdefs.h" 3 4
#define __predict_true(exp) __builtin_expect((exp), 1)
#define __predict_false(exp) __builtin_expect((exp), 0)






#define __sentinel __attribute__((__sentinel__))
#define __exported __attribute__((__visibility__("default")))


#define __hidden __attribute__((__visibility__("hidden")))
# 481 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\cdefs.h" 3 4
#define __offsetof(type,field) offsetof(type, field)
#define __rangeof(type,start,end) (__offsetof(type, end) - __offsetof(type, start))
# 492 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\cdefs.h" 3 4
#define __containerof(x,s,m) ({ const volatile __typeof(((s *)0)->m) *__x = (x); __DEQUALIFY(s *, (const volatile char *)__x - __offsetof(s, m));})
# 514 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\cdefs.h" 3 4
#define __printflike(fmtarg,firstvararg) __attribute__((__format__ (__printf__, fmtarg, firstvararg)))

#define __scanflike(fmtarg,firstvararg) __attribute__((__format__ (__scanf__, fmtarg, firstvararg)))

#define __format_arg(fmtarg) __attribute__((__format_arg__ (fmtarg)))
#define __strfmonlike(fmtarg,firstvararg) __attribute__((__format__ (__strfmon__, fmtarg, firstvararg)))

#define __strftimelike(fmtarg,firstvararg) __attribute__((__format__ (__strftime__, fmtarg, firstvararg)))
# 533 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\cdefs.h" 3 4
#define __gnu_inline __attribute__((__gnu_inline__, __artificial__))
# 547 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\cdefs.h" 3 4
#define __printf0like(fmtarg,firstvararg) 




#define __strong_reference(sym,aliassym) extern __typeof (sym) aliassym __attribute__ ((__alias__ (#sym)))




#define __weak_reference(sym,alias) __asm__(".weak " #alias); __asm__(".equ " #alias ", " #sym)


#define __warn_references(sym,msg) __asm__(".section .gnu.warning." #sym); __asm__(".asciz \"" msg "\""); __asm__(".previous")



#define __sym_compat(sym,impl,verid) __asm__(".symver " #impl ", " #sym "@" #verid)

#define __sym_default(sym,impl,verid) __asm__(".symver " #impl ", " #sym "@@" #verid)
# 601 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\cdefs.h" 3 4
#define __FBSDID(s) struct __hack



#define __RCSID(s) struct __hack



#define __RCSID_SOURCE(s) struct __hack



#define __SCCSID(s) struct __hack



#define __COPYRIGHT(s) struct __hack



#define __DECONST(type,var) ((type)(__uintptr_t)(const void *)(var))



#define __DEVOLATILE(type,var) ((type)(__uintptr_t)(volatile void *)(var))



#define __DEQUALIFY(type,var) ((type)(__uintptr_t)(const volatile void *)(var))
# 646 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\cdefs.h" 3 4
#define __arg_type_tag(arg_kind,arg_idx,type_tag_idx) 
#define __datatype_type_tag(kind,type) 
# 665 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\cdefs.h" 3 4
#define __lock_annotate(x) 



#define __lockable __lock_annotate(lockable)


#define __locks_exclusive(...) __lock_annotate(exclusive_lock_function(__VA_ARGS__))

#define __locks_shared(...) __lock_annotate(shared_lock_function(__VA_ARGS__))



#define __trylocks_exclusive(...) __lock_annotate(exclusive_trylock_function(__VA_ARGS__))

#define __trylocks_shared(...) __lock_annotate(shared_trylock_function(__VA_ARGS__))



#define __unlocks(...) __lock_annotate(unlock_function(__VA_ARGS__))


#define __asserts_exclusive(...) __lock_annotate(assert_exclusive_lock(__VA_ARGS__))

#define __asserts_shared(...) __lock_annotate(assert_shared_lock(__VA_ARGS__))



#define __requires_exclusive(...) __lock_annotate(exclusive_locks_required(__VA_ARGS__))

#define __requires_shared(...) __lock_annotate(shared_locks_required(__VA_ARGS__))

#define __requires_unlocked(...) __lock_annotate(locks_excluded(__VA_ARGS__))



#define __no_lock_analysis __lock_annotate(no_thread_safety_analysis)


#define __guarded_by(x) __lock_annotate(guarded_by(x))
#define __pt_guarded_by(x) __lock_annotate(pt_guarded_by(x))
# 13 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\string.h" 2 3 4


#define __need_size_t 
#define __need_NULL 
# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 1 3 4
# 161 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#undef __need_ptrdiff_t
# 238 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#undef __need_size_t
# 347 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#undef __need_wchar_t
# 401 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#undef NULL

#define NULL __null
# 412 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 18 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\string.h" 2 3 4





extern "C" {

void * memchr (const void *, int, size_t);
int memcmp (const void *, const void *, size_t);
void * memcpy (void * , const void * , size_t);
void * memmove (void *, const void *, size_t);
void * memset (void *, int, size_t);
char *strcat (char *, const char *);
char *strchr (const char *, int);
int strcmp (const char *, const char *);
int strcoll (const char *, const char *);
char *strcpy (char *, const char *);
size_t strcspn (const char *, const char *);
char *strerror (int);
size_t strlen (const char *);
char *strncat (char *, const char *, size_t);
int strncmp (const char *, const char *, size_t);
char *strncpy (char *, const char *, size_t);
char *strpbrk (const char *, const char *);
char *strrchr (const char *, int);
size_t strspn (const char *, const char *);
char *strstr (const char *, const char *);

char *strtok (char *, const char *);

size_t strxfrm (char *, const char *, size_t);
# 102 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\string.h" 3 4
char *_strdup_r (struct _reent *, const char *);



char *_strndup_r (struct _reent *, const char *, size_t);
# 133 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\string.h" 3 4
char * _strerror_r (struct _reent *, int, int, int *);
# 155 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\string.h" 3 4
char *strsignal (int __signo);
# 192 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\string.h" 3 4
# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\sys\\string.h" 1 3 4
# 193 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\libc\\usr\\include\\string.h" 2 3 4

}
# 43 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstring" 2 3


#define _GLIBCXX_CSTRING 1


#undef memchr
#undef memcmp
#undef memcpy
#undef memmove
#undef memset
#undef strcat
#undef strchr
#undef strcmp
#undef strcoll
#undef strcpy
#undef strcspn
#undef strerror
#undef strlen
#undef strncat
#undef strncmp
#undef strncpy
#undef strpbrk
#undef strrchr
#undef strspn
#undef strstr
#undef strtok
#undef strxfrm

namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::memchr;
  using ::memcmp;
  using ::memcpy;
  using ::memmove;
  using ::memset;
  using ::strcat;
  using ::strcmp;
  using ::strcoll;
  using ::strcpy;
  using ::strcspn;
  using ::strerror;
  using ::strlen;
  using ::strncat;
  using ::strncmp;
  using ::strncpy;
  using ::strspn;
  using ::strtok;
  using ::strxfrm;
  using ::strchr;
  using ::strpbrk;
  using ::strrchr;
  using ::strstr;


  inline void*
  memchr(void* __s, int __c, size_t __n)
  { return __builtin_memchr(__s, __c, __n); }

  inline char*
  strchr(char* __s, int __n)
  { return __builtin_strchr(__s, __n); }

  inline char*
  strpbrk(char* __s1, const char* __s2)
  { return __builtin_strpbrk(__s1, __s2); }

  inline char*
  strrchr(char* __s, int __n)
  { return __builtin_strrchr(__s, __n); }

  inline char*
  strstr(char* __s1, const char* __s2)
  { return __builtin_strstr(__s1, __s2); }



}
# 15 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/schedule/PidManager.h" 2


# 16 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/schedule/PidManager.h"
using PidType = uint16_t;

constexpr PidType INVALID_PID = 0;
constexpr PidType CURRENT_PID = 1 ;
constexpr PidType PARENT_PID = 2;

class PidManager{
public:

 enum { MASK_NUM = 128 };

 PidManager();
 bool isAllocated(PidType pid)const;
 PidType allocate();
 PidType allocate(PidType desiredPid);
 void deallocate(PidType pid);
 void clearAll();
private:
 __attribute__((always_inline)) inline size_t indexOfMask(PidType pid)const
 {
  return pid/8;
 }
 __attribute__((always_inline)) inline size_t bitIndexOfMask(PidType pid)const
 {
  return pid%8;
 }
 void setPidBit(PidType pid,uint8_t v);
 static bool isReservedPid(PidType pid);
 void forceReservedPidPresetValue();
private:
 uint8_t _masks[MASK_NUM];
};

extern PidManager pidManager;
# 13 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/schedule/Process.h" 2





class Process{
public:
 enum Config{
  PAGE_SIZE = 4*KiB,
  KERN_ARG_NUM = 4 * sizeof(uint64_t),
  STACK_L3_INDEX=508, STACK_L3_ENTRY_NUM=2,
  HEAP_L3_INDEX = 510,HEAP_L3_ENTRY_NUM = 2,
  TABLE_ALIGNMENT = 4*KiB,
  TABLE_SIZE = 4*KiB,
  CODE_BASE_ALIGNMENT = 4*KiB,
  SP_BASE_ALIGNMENT = 16,
 };
 enum Status{
  CREATED_INCOMPLETE,
  CREATED,
  READY,
  RUNNING,
  BLOCKED,
  STOPPED
 };

 Process();


 int init(size_t addrBitsLen,Process *parent,uint32_t priority,size_t codeSize,size_t heapSize,size_t spSize);

 void destroy();
 void* getCodeBase() const;
 size_t getCodeSize() const;
 void* getHeapBase() const;
 size_t getHeapSize() const;
 const Process* getParent() const;
 PidType getPid() const;
 uint32_t getPriority() const;
 RegELR_EL1 getELR() const;
 const uint64_t* getRegisters() const;
 const RegSPSR_EL1 getSPSR() const;
 const void* getSpBase() const;
 RegSP_EL0 getSpEL0() const;
 size_t getSpSize() const;
 Status getStatus() const;
 const RegDescriptor4KBL0* getTableL0() const;
 const RegDescriptor4KBL1* getTableL1() const;
 const RegDescriptor4KBL2* getTableL2() const;
 const RegDescriptor4KBL3* getTableL3() const;
 RegTTBR0_EL1 getTTBR0() const;

private:
 PidType _pid;
 uint32_t _priority;
 Status _status;
 Process * _parent;



 RegTTBR0_EL1 _ttbr0;
 RegSP_EL0 _spEL0;
 RegDescriptor4KBL0 * _tableL0;
 RegDescriptor4KBL1 * _tableL1;
 RegDescriptor4KBL2 * _tableL2;
 RegDescriptor4KBL3 * _tableL3;

 void* _codeBase;
 size_t _codeSize;

 void* _heapBase;
 size_t _heapSize;

 void* _spBase;
 size_t _spSize;

 uint64_t _Registers[31];
 RegELR_EL1 _ELR;
 RegSPSR_EL1 _SPSR;
};
# 11 "D:/Pool/eclipse-workspace_aarch64/newspace/raspiOS/src/arch/qemu_virt/main_run_process.cpp" 2
# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstring" 1 3
# 39 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstring" 3
       
# 40 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstring" 3
# 12 "D:/Pool/eclipse-workspace_aarch64/newspace/raspiOS/src/arch/qemu_virt/main_run_process.cpp" 2
# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\new" 1 3
# 35 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\new" 3
#define _NEW 

       
# 38 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\new" 3


# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\exception" 1 3
# 31 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\exception" 3
#define __EXCEPTION__ 

       
# 34 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\exception" 3

#pragma GCC visibility push(default)


# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\exception.h" 1 3
# 32 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\exception.h" 3
#define __EXCEPTION_H 1

       
# 35 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\exception.h" 3

#pragma GCC visibility push(default)




# 40 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\exception.h" 3
extern "C++" {

namespace std
{
# 60 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\exception.h" 3
  class exception
  {
  public:
    exception() noexcept { }
    virtual ~exception() noexcept;



    virtual const char*
    what() const noexcept;
  };

}

}

#pragma GCC visibility pop
# 39 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\exception" 2 3

extern "C++" {

namespace std
{


  class bad_exception : public exception
  {
  public:
    bad_exception() noexcept { }



    virtual ~bad_exception() noexcept;


    virtual const char*
    what() const noexcept;
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) noexcept;



  terminate_handler get_terminate() noexcept;




  void terminate() noexcept __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) noexcept;



  unexpected_handler get_unexpected() noexcept;




  void unexpected() __attribute__ ((__noreturn__));
# 101 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\exception" 3
  bool uncaught_exception() noexcept __attribute__ ((__pure__));
# 110 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\exception" 3
}

namespace __gnu_cxx
{

# 132 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\exception" 3
  void __verbose_terminate_handler();


}

}

#pragma GCC visibility pop


# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\exception_ptr.h" 1 3
# 32 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\exception_ptr.h" 3
#define _EXCEPTION_PTR_H 

#pragma GCC visibility push(default)


# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\exception_defines.h" 1 3
# 31 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\exception_defines.h" 3
#define _EXCEPTION_DEFINES_H 1



#define __try if (true)
#define __catch(X) if (false)
#define __throw_exception_again 
# 38 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\exception_ptr.h" 2 3
# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\cxxabi_init_exception.h" 1 3
# 32 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\cxxabi_init_exception.h" 3
#define _CXXABI_INIT_EXCEPTION_H 1

       
# 35 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\cxxabi_init_exception.h" 3

#pragma GCC visibility push(default)

# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 1 3 4
# 39 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\cxxabi_init_exception.h" 2 3



#define _GLIBCXX_CDTOR_CALLABI 
#define _GLIBCXX_HAVE_CDTOR_CALLABI 0






namespace std
{
  class type_info;
}

namespace __cxxabiv1
{
  struct __cxa_refcounted_exception;

  extern "C"
    {

      void*
      __cxa_allocate_exception(size_t) noexcept;


      __cxa_refcounted_exception*
      __cxa_init_primary_exception(void *object, std::type_info *tinfo,
                void ( *dest) (void *)) noexcept;

    }
}



#pragma GCC visibility pop
# 39 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\exception_ptr.h" 2 3
# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\typeinfo" 1 3
# 30 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\typeinfo" 3
#define _TYPEINFO 

       
# 33 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\typeinfo" 3



# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\hash_bytes.h" 1 3
# 31 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\hash_bytes.h" 3
#define _HASH_BYTES_H 1

       
# 34 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\hash_bytes.h" 3



namespace std
{







  size_t
  _Hash_bytes(const void* __ptr, size_t __len, size_t __seed);





  size_t
  _Fnv_hash_bytes(const void* __ptr, size_t __len, size_t __seed);


}
# 37 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\typeinfo" 2 3


#pragma GCC visibility push(default)

extern "C++" {

namespace __cxxabiv1
{
  class __class_type_info;
}
# 68 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\typeinfo" 3
#define __GXX_MERGED_TYPEINFO_NAMES 0







#define __GXX_TYPEINFO_EQUALITY_INLINE 1



namespace std
{






  class type_info
  {
  public:




    virtual ~type_info();



    const char* name() const noexcept
    { return __name[0] == '*' ? __name + 1 : __name; }
# 115 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\typeinfo" 3
    bool before(const type_info& __arg) const noexcept
    { return (__name[0] == '*' && __arg.__name[0] == '*')
 ? __name < __arg.__name
 : __builtin_strcmp (__name, __arg.__name) < 0; }

    bool operator==(const type_info& __arg) const noexcept
    {
      return ((__name == __arg.__name)
       || (__name[0] != '*' &&
    __builtin_strcmp (__name, __arg.__name) == 0));
    }
# 136 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\typeinfo" 3
    bool operator!=(const type_info& __arg) const noexcept
    { return !operator==(__arg); }


    size_t hash_code() const noexcept
    {

      return _Hash_bytes(name(), __builtin_strlen(name()),
    static_cast<size_t>(0xc70f6907UL));



    }



    virtual bool __is_pointer_p() const;


    virtual bool __is_function_p() const;







    virtual bool __do_catch(const type_info *__thr_type, void **__thr_obj,
       unsigned __outer) const;


    virtual bool __do_upcast(const __cxxabiv1::__class_type_info *__target,
        void **__obj_ptr) const;

  protected:
    const char *__name;

    explicit type_info(const char *__n): __name(__n) { }

  private:

    type_info& operator=(const type_info&);
    type_info(const type_info&);
  };







  class bad_cast : public exception
  {
  public:
    bad_cast() noexcept { }



    virtual ~bad_cast() noexcept;


    virtual const char* what() const noexcept;
  };





  class bad_typeid : public exception
  {
  public:
    bad_typeid () noexcept { }



    virtual ~bad_typeid() noexcept;


    virtual const char* what() const noexcept;
  };
}

}

#pragma GCC visibility pop
# 40 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\exception_ptr.h" 2 3
# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\new" 1 3
# 41 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\exception_ptr.h" 2 3

extern "C++" {

namespace std
{
  class type_info;





  namespace __exception_ptr
  {
    class exception_ptr;
  }

  using __exception_ptr::exception_ptr;





  exception_ptr current_exception() noexcept;

  template<typename _Ex>
  exception_ptr make_exception_ptr(_Ex) noexcept;


  void rethrow_exception(exception_ptr) __attribute__ ((__noreturn__));

  namespace __exception_ptr
  {
    using std::rethrow_exception;





    class exception_ptr
    {
      void* _M_exception_object;

      explicit exception_ptr(void* __e) noexcept;

      void _M_addref() noexcept;
      void _M_release() noexcept;

      void *_M_get() const noexcept __attribute__ ((__pure__));

      friend exception_ptr std::current_exception() noexcept;
      friend void std::rethrow_exception(exception_ptr);
      template<typename _Ex>
      friend exception_ptr std::make_exception_ptr(_Ex) noexcept;

    public:
      exception_ptr() noexcept;

      exception_ptr(const exception_ptr&) noexcept;


      exception_ptr(nullptr_t) noexcept
      : _M_exception_object(0)
      { }

      exception_ptr(exception_ptr&& __o) noexcept
      : _M_exception_object(__o._M_exception_object)
      { __o._M_exception_object = 0; }
# 117 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\exception_ptr.h" 3
      exception_ptr&
      operator=(const exception_ptr&) noexcept;


      exception_ptr&
      operator=(exception_ptr&& __o) noexcept
      {
        exception_ptr(static_cast<exception_ptr&&>(__o)).swap(*this);
        return *this;
      }


      ~exception_ptr() noexcept;

      void
      swap(exception_ptr&) noexcept;
# 144 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\exception_ptr.h" 3
      explicit operator bool() const
      { return _M_exception_object; }


      friend bool
      operator==(const exception_ptr&, const exception_ptr&)
 noexcept __attribute__ ((__pure__));

      const class std::type_info*
      __cxa_exception_type() const noexcept
 __attribute__ ((__pure__));
    };

    bool
    operator==(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    bool
    operator!=(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    inline void
    swap(exception_ptr& __lhs, exception_ptr& __rhs)
    { __lhs.swap(__rhs); }

    template<typename _Ex>
      inline void
      __dest_thunk(void* __x)
      { static_cast<_Ex*>(__x)->~_Ex(); }

  }


  template<typename _Ex>
    exception_ptr
    make_exception_ptr(_Ex __ex) noexcept
    {
# 200 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\exception_ptr.h" 3
      return exception_ptr();

    }





  template<typename _Ex>
    exception_ptr
    copy_exception(_Ex __ex) noexcept __attribute__ ((__deprecated__));

  template<typename _Ex>
    exception_ptr
    copy_exception(_Ex __ex) noexcept
    { return std::make_exception_ptr<_Ex>(__ex); }


}

}

#pragma GCC visibility pop
# 143 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\exception" 2 3
# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\nested_exception.h" 1 3
# 31 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\nested_exception.h" 3
#define _GLIBCXX_NESTED_EXCEPTION_H 1

#pragma GCC visibility push(default)






# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\move.h" 1 3
# 31 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\move.h" 3
#define _MOVE_H 1


# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\concept_check.h" 1 3
# 31 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\concept_check.h" 3
#define _CONCEPT_CHECK_H 1

       
# 34 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\concept_check.h" 3
# 48 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\concept_check.h" 3
#define __glibcxx_function_requires(...) 
#define __glibcxx_class_requires(_a,_b) 
#define __glibcxx_class_requires2(_a,_b,_c) 
#define __glibcxx_class_requires3(_a,_b,_c,_d) 
#define __glibcxx_class_requires4(_a,_b,_c,_d,_e) 
# 35 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _Tp>
    inline constexpr _Tp*
    __addressof(_Tp& __r) noexcept
    { return __builtin_addressof(__r); }


}


# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\type_traits" 1 3
# 30 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\type_traits" 3
#define _GLIBCXX_TYPE_TRAITS 1

       
# 33 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\type_traits" 3
# 42 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\type_traits" 3
namespace std
{
  typedef short unsigned int uint_least16_t;
  typedef unsigned int uint_least32_t;
}





namespace std __attribute__ ((__visibility__ ("default")))
{

# 68 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\type_traits" 3
  template<typename _Tp, _Tp __v>
    struct integral_constant
    {
      static constexpr _Tp value = __v;
      typedef _Tp value_type;
      typedef integral_constant<_Tp, __v> type;
      constexpr operator value_type() const { return value; }


#define __cpp_lib_integral_constant_callable 201304

      constexpr value_type operator()() const { return value; }

    };

  template<typename _Tp, _Tp __v>
    constexpr _Tp integral_constant<_Tp, __v>::value;


  typedef integral_constant<bool, true> true_type;


  typedef integral_constant<bool, false> false_type;

  template<bool __v>
    using __bool_constant = integral_constant<bool, __v>;
# 103 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\type_traits" 3
  template<bool, typename, typename>
    struct conditional;

  template<typename...>
    struct __or_;

  template<>
    struct __or_<>
    : public false_type
    { };

  template<typename _B1>
    struct __or_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __or_<_B1, _B2>
    : public conditional<_B1::value, _B1, _B2>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __or_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, _B1, __or_<_B2, _B3, _Bn...>>::type
    { };

  template<typename...>
    struct __and_;

  template<>
    struct __and_<>
    : public true_type
    { };

  template<typename _B1>
    struct __and_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __and_<_B1, _B2>
    : public conditional<_B1::value, _B2, _B1>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __and_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, __and_<_B2, _B3, _Bn...>, _B1>::type
    { };

  template<typename _Pp>
    struct __not_
    : public integral_constant<bool, !_Pp::value>
    { };
# 195 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\type_traits" 3
  template<typename _Tp>
    struct __success_type
    { typedef _Tp type; };

  struct __failure_type
  { };



  template<typename>
    struct remove_cv;

  template<typename>
    struct __is_void_helper
    : public false_type { };

  template<>
    struct __is_void_helper<void>
    : public true_type { };


  template<typename _Tp>
    struct is_void
    : public __is_void_helper<typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_integral_helper
    : public false_type { };

  template<>
    struct __is_integral_helper<bool>
    : public true_type { };

  template<>
    struct __is_integral_helper<char>
    : public true_type { };

  template<>
    struct __is_integral_helper<signed char>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned char>
    : public true_type { };


  template<>
    struct __is_integral_helper<wchar_t>
    : public true_type { };


  template<>
    struct __is_integral_helper<char16_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<char32_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<short>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned short>
    : public true_type { };

  template<>
    struct __is_integral_helper<int>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned int>
    : public true_type { };

  template<>
    struct __is_integral_helper<long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long>
    : public true_type { };

  template<>
    struct __is_integral_helper<long long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long long>
    : public true_type { };
# 327 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\type_traits" 3
  template<typename _Tp>
    struct is_integral
    : public __is_integral_helper<typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_floating_point_helper
    : public false_type { };

  template<>
    struct __is_floating_point_helper<float>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<double>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<long double>
    : public true_type { };
# 355 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\type_traits" 3
  template<typename _Tp>
    struct is_floating_point
    : public __is_floating_point_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename>
    struct is_array
    : public false_type { };

  template<typename _Tp, std::size_t _Size>
    struct is_array<_Tp[_Size]>
    : public true_type { };

  template<typename _Tp>
    struct is_array<_Tp[]>
    : public true_type { };

  template<typename>
    struct __is_pointer_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_pointer_helper<_Tp*>
    : public true_type { };


  template<typename _Tp>
    struct is_pointer
    : public __is_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename>
    struct is_lvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_lvalue_reference<_Tp&>
    : public true_type { };


  template<typename>
    struct is_rvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_rvalue_reference<_Tp&&>
    : public true_type { };

  template<typename>
    struct is_function;

  template<typename>
    struct __is_member_object_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_object_pointer_helper<_Tp _Cp::*>
    : public integral_constant<bool, !is_function<_Tp>::value> { };


  template<typename _Tp>
    struct is_member_object_pointer
    : public __is_member_object_pointer_helper<
    typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_member_function_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_function_pointer_helper<_Tp _Cp::*>
    : public integral_constant<bool, is_function<_Tp>::value> { };


  template<typename _Tp>
    struct is_member_function_pointer
    : public __is_member_function_pointer_helper<
    typename remove_cv<_Tp>::type>::type
    { };


  template<typename _Tp>
    struct is_enum
    : public integral_constant<bool, __is_enum(_Tp)>
    { };


  template<typename _Tp>
    struct is_union
    : public integral_constant<bool, __is_union(_Tp)>
    { };


  template<typename _Tp>
    struct is_class
    : public integral_constant<bool, __is_class(_Tp)>
    { };


  template<typename>
    struct is_function
    : public false_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) volatile && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) volatile && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const volatile && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const volatile && >
    : public true_type { };

#define __cpp_lib_is_null_pointer 201309

  template<typename>
    struct __is_null_pointer_helper
    : public false_type { };

  template<>
    struct __is_null_pointer_helper<std::nullptr_t>
    : public true_type { };


  template<typename _Tp>
    struct is_null_pointer
    : public __is_null_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename _Tp>
    struct __is_nullptr_t
    : public is_null_pointer<_Tp>
    { };




  template<typename _Tp>
    struct is_reference
    : public __or_<is_lvalue_reference<_Tp>,
                   is_rvalue_reference<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_arithmetic
    : public __or_<is_integral<_Tp>, is_floating_point<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_fundamental
    : public __or_<is_arithmetic<_Tp>, is_void<_Tp>,
     is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_object
    : public __not_<__or_<is_function<_Tp>, is_reference<_Tp>,
                          is_void<_Tp>>>::type
    { };

  template<typename>
    struct is_member_pointer;


  template<typename _Tp>
    struct is_scalar
    : public __or_<is_arithmetic<_Tp>, is_enum<_Tp>, is_pointer<_Tp>,
                   is_member_pointer<_Tp>, is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_compound
    : public integral_constant<bool, !is_fundamental<_Tp>::value> { };

  template<typename _Tp>
    struct __is_member_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_pointer_helper<_Tp _Cp::*>
    : public true_type { };


  template<typename _Tp>
    struct is_member_pointer
    : public __is_member_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };



  template<typename _Tp>
    struct __is_referenceable
    : public __or_<is_object<_Tp>, is_reference<_Tp>>::type
    { };

  template<typename _Res, typename... _Args >
    struct __is_referenceable<_Res(_Args...) >
    : public true_type
    { };

  template<typename _Res, typename... _Args >
    struct __is_referenceable<_Res(_Args......) >
    : public true_type
    { };




  template<typename>
    struct is_const
    : public false_type { };

  template<typename _Tp>
    struct is_const<_Tp const>
    : public true_type { };


  template<typename>
    struct is_volatile
    : public false_type { };

  template<typename _Tp>
    struct is_volatile<_Tp volatile>
    : public true_type { };


  template<typename _Tp>
    struct is_trivial
    : public integral_constant<bool, __is_trivial(_Tp)>
    { };


  template<typename _Tp>
    struct is_trivially_copyable
    : public integral_constant<bool, __is_trivially_copyable(_Tp)>
    { };


  template<typename _Tp>
    struct is_standard_layout
    : public integral_constant<bool, __is_standard_layout(_Tp)>
    { };



  template<typename _Tp>
    struct is_pod
    : public integral_constant<bool, __is_pod(_Tp)>
    { };


  template<typename _Tp>
    struct is_literal_type
    : public integral_constant<bool, __is_literal_type(_Tp)>
    { };


  template<typename _Tp>
    struct is_empty
    : public integral_constant<bool, __is_empty(_Tp)>
    { };


  template<typename _Tp>
    struct is_polymorphic
    : public integral_constant<bool, __is_polymorphic(_Tp)>
    { };


#define __cpp_lib_is_final 201402L

  template<typename _Tp>
    struct is_final
    : public integral_constant<bool, __is_final(_Tp)>
    { };



  template<typename _Tp>
    struct is_abstract
    : public integral_constant<bool, __is_abstract(_Tp)>
    { };

  template<typename _Tp,
    bool = is_arithmetic<_Tp>::value>
    struct __is_signed_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_signed_helper<_Tp, true>
    : public integral_constant<bool, _Tp(-1) < _Tp(0)>
    { };


  template<typename _Tp>
    struct is_signed
    : public __is_signed_helper<_Tp>::type
    { };


  template<typename _Tp>
    struct is_unsigned
    : public __and_<is_arithmetic<_Tp>, __not_<is_signed<_Tp>>>
    { };




  template<typename>
    struct add_rvalue_reference;





  template<typename _Tp>
    typename add_rvalue_reference<_Tp>::type declval() noexcept;

  template<typename, unsigned = 0>
    struct extent;

  template<typename>
    struct remove_all_extents;

  template<typename _Tp>
    struct __is_array_known_bounds
    : public integral_constant<bool, (extent<_Tp>::value > 0)>
    { };

  template<typename _Tp>
    struct __is_array_unknown_bounds
    : public __and_<is_array<_Tp>, __not_<extent<_Tp>>>
    { };






  struct __do_is_destructible_impl
  {
    template<typename _Tp, typename = decltype(declval<_Tp&>().~_Tp())>
      static true_type __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_destructible_impl
    : public __do_is_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_destructible_safe;

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, false>
    : public __is_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_destructible
    : public __is_destructible_safe<_Tp>::type
    { };





  struct __do_is_nt_destructible_impl
  {
    template<typename _Tp>
      static integral_constant<bool, noexcept(declval<_Tp&>().~_Tp())>
        __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_nt_destructible_impl
    : public __do_is_nt_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_nt_destructible_safe;

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, false>
    : public __is_nt_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_nothrow_destructible
    : public __is_nt_destructible_safe<_Tp>::type
    { };

  struct __do_is_default_constructible_impl
  {
    template<typename _Tp, typename = decltype(_Tp())>
      static true_type __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_default_constructible_impl
    : public __do_is_default_constructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_default_constructible_atom
    : public __and_<__not_<is_void<_Tp>>,
                    __is_default_constructible_impl<_Tp>>
    { };

  template<typename _Tp, bool = is_array<_Tp>::value>
    struct __is_default_constructible_safe;






  template<typename _Tp>
    struct __is_default_constructible_safe<_Tp, true>
    : public __and_<__is_array_known_bounds<_Tp>,
      __is_default_constructible_atom<typename
                      remove_all_extents<_Tp>::type>>
    { };

  template<typename _Tp>
    struct __is_default_constructible_safe<_Tp, false>
    : public __is_default_constructible_atom<_Tp>::type
    { };


  template<typename _Tp>
    struct is_default_constructible
    : public __is_default_constructible_safe<_Tp>::type
    { };
# 939 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\type_traits" 3
  struct __do_is_static_castable_impl
  {
    template<typename _From, typename _To, typename
             = decltype(static_cast<_To>(declval<_From>()))>
      static true_type __test(int);

    template<typename, typename>
      static false_type __test(...);
  };

  template<typename _From, typename _To>
    struct __is_static_castable_impl
    : public __do_is_static_castable_impl
    {
      typedef decltype(__test<_From, _To>(0)) type;
    };

  template<typename _From, typename _To>
    struct __is_static_castable_safe
    : public __is_static_castable_impl<_From, _To>::type
    { };


  template<typename _From, typename _To>
    struct __is_static_castable
    : public integral_constant<bool, (__is_static_castable_safe<
          _From, _To>::value)>
    { };






  struct __do_is_direct_constructible_impl
  {
    template<typename _Tp, typename _Arg, typename
      = decltype(::new _Tp(declval<_Arg>()))>
      static true_type __test(int);

    template<typename, typename>
      static false_type __test(...);
  };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_impl
    : public __do_is_direct_constructible_impl
    {
      typedef decltype(__test<_Tp, _Arg>(0)) type;
    };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_new_safe
    : public __and_<is_destructible<_Tp>,
                    __is_direct_constructible_impl<_Tp, _Arg>>
    { };

  template<typename, typename>
    struct is_same;

  template<typename, typename>
    struct is_base_of;

  template<typename>
    struct remove_reference;

  template<typename _From, typename _To, bool
           = __not_<__or_<is_void<_From>,
                          is_function<_From>>>::value>
    struct __is_base_to_derived_ref;

  template<typename _Tp, typename... _Args>
    struct is_constructible;



  template<typename _From, typename _To>
    struct __is_base_to_derived_ref<_From, _To, true>
    {
      typedef typename remove_cv<typename remove_reference<_From
        >::type>::type __src_t;
      typedef typename remove_cv<typename remove_reference<_To
        >::type>::type __dst_t;
      typedef __and_<__not_<is_same<__src_t, __dst_t>>,
       is_base_of<__src_t, __dst_t>,
       __not_<is_constructible<__dst_t, _From>>> type;
      static constexpr bool value = type::value;
    };

  template<typename _From, typename _To>
    struct __is_base_to_derived_ref<_From, _To, false>
    : public false_type
    { };

  template<typename _From, typename _To, bool
           = __and_<is_lvalue_reference<_From>,
                    is_rvalue_reference<_To>>::value>
    struct __is_lvalue_to_rvalue_ref;



  template<typename _From, typename _To>
    struct __is_lvalue_to_rvalue_ref<_From, _To, true>
    {
      typedef typename remove_cv<typename remove_reference<
        _From>::type>::type __src_t;
      typedef typename remove_cv<typename remove_reference<
        _To>::type>::type __dst_t;
      typedef __and_<__not_<is_function<__src_t>>,
        __or_<is_same<__src_t, __dst_t>,
      is_base_of<__dst_t, __src_t>>> type;
      static constexpr bool value = type::value;
    };

  template<typename _From, typename _To>
    struct __is_lvalue_to_rvalue_ref<_From, _To, false>
    : public false_type
    { };







  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_ref_cast
    : public __and_<__is_static_castable<_Arg, _Tp>,
                    __not_<__or_<__is_base_to_derived_ref<_Arg, _Tp>,
                                 __is_lvalue_to_rvalue_ref<_Arg, _Tp>
                   >>>
    { };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_new
    : public conditional<is_reference<_Tp>::value,
    __is_direct_constructible_ref_cast<_Tp, _Arg>,
    __is_direct_constructible_new_safe<_Tp, _Arg>
    >::type
    { };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible
    : public __is_direct_constructible_new<_Tp, _Arg>::type
    { };






  struct __do_is_nary_constructible_impl
  {
    template<typename _Tp, typename... _Args, typename
             = decltype(_Tp(declval<_Args>()...))>
      static true_type __test(int);

    template<typename, typename...>
      static false_type __test(...);
  };

  template<typename _Tp, typename... _Args>
    struct __is_nary_constructible_impl
    : public __do_is_nary_constructible_impl
    {
      typedef decltype(__test<_Tp, _Args...>(0)) type;
    };

  template<typename _Tp, typename... _Args>
    struct __is_nary_constructible
    : public __is_nary_constructible_impl<_Tp, _Args...>::type
    {
      static_assert(sizeof...(_Args) > 1,
                    "Only useful for > 1 arguments");
    };

  template<typename _Tp, typename... _Args>
    struct __is_constructible_impl
    : public __is_nary_constructible<_Tp, _Args...>
    { };

  template<typename _Tp, typename _Arg>
    struct __is_constructible_impl<_Tp, _Arg>
    : public __is_direct_constructible<_Tp, _Arg>
    { };

  template<typename _Tp>
    struct __is_constructible_impl<_Tp>
    : public is_default_constructible<_Tp>
    { };


  template<typename _Tp, typename... _Args>
    struct is_constructible
    : public __is_constructible_impl<_Tp, _Args...>::type
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_constructible_impl;

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, true>
    : public is_constructible<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_copy_constructible
    : public __is_copy_constructible_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_constructible_impl;

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, true>
    : public is_constructible<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_move_constructible
    : public __is_move_constructible_impl<_Tp>
    { };

  template<typename _Tp>
    struct __is_nt_default_constructible_atom
    : public integral_constant<bool, noexcept(_Tp())>
    { };

  template<typename _Tp, bool = is_array<_Tp>::value>
    struct __is_nt_default_constructible_impl;

  template<typename _Tp>
    struct __is_nt_default_constructible_impl<_Tp, true>
    : public __and_<__is_array_known_bounds<_Tp>,
      __is_nt_default_constructible_atom<typename
                      remove_all_extents<_Tp>::type>>
    { };

  template<typename _Tp>
    struct __is_nt_default_constructible_impl<_Tp, false>
    : public __is_nt_default_constructible_atom<_Tp>
    { };


  template<typename _Tp>
    struct is_nothrow_default_constructible
    : public __and_<is_default_constructible<_Tp>,
                    __is_nt_default_constructible_impl<_Tp>>
    { };

  template<typename _Tp, typename... _Args>
    struct __is_nt_constructible_impl
    : public integral_constant<bool, noexcept(_Tp(declval<_Args>()...))>
    { };

  template<typename _Tp, typename _Arg>
    struct __is_nt_constructible_impl<_Tp, _Arg>
    : public integral_constant<bool,
                               noexcept(static_cast<_Tp>(declval<_Arg>()))>
    { };

  template<typename _Tp>
    struct __is_nt_constructible_impl<_Tp>
    : public is_nothrow_default_constructible<_Tp>
    { };


  template<typename _Tp, typename... _Args>
    struct is_nothrow_constructible
    : public __and_<is_constructible<_Tp, _Args...>,
      __is_nt_constructible_impl<_Tp, _Args...>>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_copy_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, true>
    : public is_nothrow_constructible<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_constructible
    : public __is_nothrow_copy_constructible_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_move_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, true>
    : public is_nothrow_constructible<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_constructible
    : public __is_nothrow_move_constructible_impl<_Tp>
    { };

  template<typename _Tp, typename _Up>
    class __is_assignable_helper
    {
      template<typename _Tp1, typename _Up1,
        typename = decltype(declval<_Tp1>() = declval<_Up1>())>
 static true_type
 __test(int);

      template<typename, typename>
 static false_type
 __test(...);

    public:
      typedef decltype(__test<_Tp, _Up>(0)) type;
    };


  template<typename _Tp, typename _Up>
    struct is_assignable
      : public __is_assignable_helper<_Tp, _Up>::type
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_assignable_impl;

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, true>
    : public is_assignable<_Tp&, const _Tp&>
    { };


  template<typename _Tp>
    struct is_copy_assignable
    : public __is_copy_assignable_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_assignable_impl;

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, true>
    : public is_assignable<_Tp&, _Tp&&>
    { };


  template<typename _Tp>
    struct is_move_assignable
    : public __is_move_assignable_impl<_Tp>
    { };

  template<typename _Tp, typename _Up>
    struct __is_nt_assignable_impl
    : public integral_constant<bool, noexcept(declval<_Tp>() = declval<_Up>())>
    { };


  template<typename _Tp, typename _Up>
    struct is_nothrow_assignable
    : public __and_<is_assignable<_Tp, _Up>,
      __is_nt_assignable_impl<_Tp, _Up>>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_copy_assignable_impl;

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, true>
    : public is_nothrow_assignable<_Tp&, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_assignable
    : public __is_nt_copy_assignable_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_move_assignable_impl;

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, true>
    : public is_nothrow_assignable<_Tp&, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_assignable
    : public __is_nt_move_assignable_impl<_Tp>
    { };


  template<typename _Tp, typename... _Args>
    struct is_trivially_constructible
    : public __and_<is_constructible<_Tp, _Args...>, integral_constant<bool,
   __is_trivially_constructible(_Tp, _Args...)>>
    { };


  template<typename _Tp>
    struct is_trivially_default_constructible
    : public is_trivially_constructible<_Tp>::type
    { };

  struct __do_is_implicitly_default_constructible_impl
  {
    template <typename _Tp>
    static void __helper(const _Tp&);

    template <typename _Tp>
    static true_type __test(const _Tp&,
                            decltype(__helper<const _Tp&>({}))* = 0);

    static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_implicitly_default_constructible_impl
      : public __do_is_implicitly_default_constructible_impl
  {
    typedef decltype(__test(declval<_Tp>())) type;
  };

  template<typename _Tp>
    struct __is_implicitly_default_constructible_safe
      : public __is_implicitly_default_constructible_impl<_Tp>::type
  { };

  template <typename _Tp>
    struct __is_implicitly_default_constructible
      : public __and_<is_default_constructible<_Tp>,
                      __is_implicitly_default_constructible_safe<_Tp>>
  { };


  template<typename _Tp>
    struct is_trivially_copy_constructible
    : public __and_<is_copy_constructible<_Tp>,
      integral_constant<bool,
   __is_trivially_constructible(_Tp, const _Tp&)>>
    { };


  template<typename _Tp>
    struct is_trivially_move_constructible
    : public __and_<is_move_constructible<_Tp>,
      integral_constant<bool,
   __is_trivially_constructible(_Tp, _Tp&&)>>
    { };


  template<typename _Tp, typename _Up>
    struct is_trivially_assignable
    : public __and_<is_assignable<_Tp, _Up>,
      integral_constant<bool,
   __is_trivially_assignable(_Tp, _Up)>>
    { };


  template<typename _Tp>
    struct is_trivially_copy_assignable
    : public __and_<is_copy_assignable<_Tp>,
      integral_constant<bool,
   __is_trivially_assignable(_Tp&, const _Tp&)>>
    { };


  template<typename _Tp>
    struct is_trivially_move_assignable
    : public __and_<is_move_assignable<_Tp>,
      integral_constant<bool,
   __is_trivially_assignable(_Tp&, _Tp&&)>>
    { };


  template<typename _Tp>
    struct is_trivially_destructible
    : public __and_<is_destructible<_Tp>, integral_constant<bool,
         __has_trivial_destructor(_Tp)>>
    { };



  template<typename _Tp>
    struct has_virtual_destructor
    : public integral_constant<bool, __has_virtual_destructor(_Tp)>
    { };





  template<typename _Tp>
    struct alignment_of
    : public integral_constant<std::size_t, __alignof__(_Tp)> { };


  template<typename>
    struct rank
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, std::size_t _Size>
    struct rank<_Tp[_Size]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };

  template<typename _Tp>
    struct rank<_Tp[]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };


  template<typename, unsigned _Uint>
    struct extent
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, unsigned _Uint, std::size_t _Size>
    struct extent<_Tp[_Size], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? _Size : extent<_Tp,
          _Uint - 1>::value>
    { };

  template<typename _Tp, unsigned _Uint>
    struct extent<_Tp[], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? 0 : extent<_Tp,
             _Uint - 1>::value>
    { };





  template<typename, typename>
    struct is_same
    : public false_type { };

  template<typename _Tp>
    struct is_same<_Tp, _Tp>
    : public true_type { };


  template<typename _Base, typename _Derived>
    struct is_base_of
    : public integral_constant<bool, __is_base_of(_Base, _Derived)>
    { };

  template<typename _From, typename _To,
           bool = __or_<is_void<_From>, is_function<_To>,
                        is_array<_To>>::value>
    struct __is_convertible_helper
    { typedef typename is_void<_To>::type type; };

  template<typename _From, typename _To>
    class __is_convertible_helper<_From, _To, false>
    {
       template<typename _To1>
 static void __test_aux(_To1);

      template<typename _From1, typename _To1,
        typename = decltype(__test_aux<_To1>(std::declval<_From1>()))>
 static true_type
 __test(int);

      template<typename, typename>
 static false_type
 __test(...);

    public:
      typedef decltype(__test<_From, _To>(0)) type;
    };



  template<typename _From, typename _To>
    struct is_convertible
    : public __is_convertible_helper<_From, _To>::type
    { };





  template<typename _Tp>
    struct remove_const
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_const<_Tp const>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_volatile
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_volatile<_Tp volatile>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_cv
    {
      typedef typename
      remove_const<typename remove_volatile<_Tp>::type>::type type;
    };


  template<typename _Tp>
    struct add_const
    { typedef _Tp const type; };


  template<typename _Tp>
    struct add_volatile
    { typedef _Tp volatile type; };


  template<typename _Tp>
    struct add_cv
    {
      typedef typename
      add_const<typename add_volatile<_Tp>::type>::type type;
    };



#define __cpp_lib_transformation_trait_aliases 201304


  template<typename _Tp>
    using remove_const_t = typename remove_const<_Tp>::type;


  template<typename _Tp>
    using remove_volatile_t = typename remove_volatile<_Tp>::type;


  template<typename _Tp>
    using remove_cv_t = typename remove_cv<_Tp>::type;


  template<typename _Tp>
    using add_const_t = typename add_const<_Tp>::type;


  template<typename _Tp>
    using add_volatile_t = typename add_volatile<_Tp>::type;


  template<typename _Tp>
    using add_cv_t = typename add_cv<_Tp>::type;





  template<typename _Tp>
    struct remove_reference
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&&>
    { typedef _Tp type; };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_lvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_lvalue_reference_helper<_Tp, true>
    { typedef _Tp& type; };


  template<typename _Tp>
    struct add_lvalue_reference
    : public __add_lvalue_reference_helper<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_rvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_rvalue_reference_helper<_Tp, true>
    { typedef _Tp&& type; };


  template<typename _Tp>
    struct add_rvalue_reference
    : public __add_rvalue_reference_helper<_Tp>
    { };



  template<typename _Tp>
    using remove_reference_t = typename remove_reference<_Tp>::type;


  template<typename _Tp>
    using add_lvalue_reference_t = typename add_lvalue_reference<_Tp>::type;


  template<typename _Tp>
    using add_rvalue_reference_t = typename add_rvalue_reference<_Tp>::type;





  template<typename _Unqualified, bool _IsConst, bool _IsVol>
    struct __cv_selector;

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, false>
    { typedef _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, true>
    { typedef volatile _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, false>
    { typedef const _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, true>
    { typedef const volatile _Unqualified __type; };

  template<typename _Qualified, typename _Unqualified,
    bool _IsConst = is_const<_Qualified>::value,
    bool _IsVol = is_volatile<_Qualified>::value>
    class __match_cv_qualifiers
    {
      typedef __cv_selector<_Unqualified, _IsConst, _IsVol> __match;

    public:
      typedef typename __match::__type __type;
    };


  template<typename _Tp>
    struct __make_unsigned
    { typedef _Tp __type; };

  template<>
    struct __make_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __make_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __make_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __make_unsigned<long long>
    { typedef unsigned long long __type; };
# 1774 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_unsigned_selector;

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, true, false>
    {
      typedef __make_unsigned<typename remove_cv<_Tp>::type> __unsignedt;
      typedef typename __unsignedt::__type __unsigned_type;
      typedef __match_cv_qualifiers<_Tp, __unsigned_type> __cv_unsigned;

    public:
      typedef typename __cv_unsigned::__type __type;
    };

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, false, true>
    {

      typedef unsigned char __smallest;
      static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);
      static const bool __b1 = sizeof(_Tp) <= sizeof(unsigned short);
      static const bool __b2 = sizeof(_Tp) <= sizeof(unsigned int);
      static const bool __b3 = sizeof(_Tp) <= sizeof(unsigned long);
      typedef conditional<__b3, unsigned long, unsigned long long> __cond3;
      typedef typename __cond3::type __cond3_type;
      typedef conditional<__b2, unsigned int, __cond3_type> __cond2;
      typedef typename __cond2::type __cond2_type;
      typedef conditional<__b1, unsigned short, __cond2_type> __cond1;
      typedef typename __cond1::type __cond1_type;

      typedef typename conditional<__b0, __smallest, __cond1_type>::type
 __unsigned_type;
      typedef __match_cv_qualifiers<_Tp, __unsigned_type> __cv_unsigned;

    public:
      typedef typename __cv_unsigned::__type __type;
    };





  template<typename _Tp>
    struct make_unsigned
    { typedef typename __make_unsigned_selector<_Tp>::__type type; };


  template<>
    struct make_unsigned<bool>;



  template<typename _Tp>
    struct __make_signed
    { typedef _Tp __type; };

  template<>
    struct __make_signed<char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned short>
    { typedef signed short __type; };

  template<>
    struct __make_signed<unsigned int>
    { typedef signed int __type; };

  template<>
    struct __make_signed<unsigned long>
    { typedef signed long __type; };

  template<>
    struct __make_signed<unsigned long long>
    { typedef signed long long __type; };


  template<>
    struct __make_signed<wchar_t> : __make_signed<unsigned int>
    { };



  template<>
    struct __make_signed<char16_t> : __make_signed<uint_least16_t>
    { };
  template<>
    struct __make_signed<char32_t> : __make_signed<uint_least32_t>
    { };
# 1893 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_signed_selector;

  template<typename _Tp>
    class __make_signed_selector<_Tp, true, false>
    {
      typedef __make_signed<typename remove_cv<_Tp>::type> __signedt;
      typedef typename __signedt::__type __signed_type;
      typedef __match_cv_qualifiers<_Tp, __signed_type> __cv_signed;

    public:
      typedef typename __cv_signed::__type __type;
    };

  template<typename _Tp>
    class __make_signed_selector<_Tp, false, true>
    {
      typedef typename __make_unsigned_selector<_Tp>::__type __unsigned_type;

    public:
      typedef typename __make_signed_selector<__unsigned_type>::__type __type;
    };





  template<typename _Tp>
    struct make_signed
    { typedef typename __make_signed_selector<_Tp>::__type type; };


  template<>
    struct make_signed<bool>;



  template<typename _Tp>
    using make_signed_t = typename make_signed<_Tp>::type;


  template<typename _Tp>
    using make_unsigned_t = typename make_unsigned<_Tp>::type;





  template<typename _Tp>
    struct remove_extent
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_extent<_Tp[_Size]>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_extent<_Tp[]>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_all_extents
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_all_extents<_Tp[_Size]>
    { typedef typename remove_all_extents<_Tp>::type type; };

  template<typename _Tp>
    struct remove_all_extents<_Tp[]>
    { typedef typename remove_all_extents<_Tp>::type type; };



  template<typename _Tp>
    using remove_extent_t = typename remove_extent<_Tp>::type;


  template<typename _Tp>
    using remove_all_extents_t = typename remove_all_extents<_Tp>::type;




  template<typename _Tp, typename>
    struct __remove_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp, typename _Up>
    struct __remove_pointer_helper<_Tp, _Up*>
    { typedef _Up type; };


  template<typename _Tp>
    struct remove_pointer
    : public __remove_pointer_helper<_Tp, typename remove_cv<_Tp>::type>
    { };


  template<typename _Tp, bool = __or_<__is_referenceable<_Tp>,
          is_void<_Tp>>::value>
    struct __add_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_pointer_helper<_Tp, true>
    { typedef typename remove_reference<_Tp>::type* type; };

  template<typename _Tp>
    struct add_pointer
    : public __add_pointer_helper<_Tp>
    { };



  template<typename _Tp>
    using remove_pointer_t = typename remove_pointer<_Tp>::type;


  template<typename _Tp>
    using add_pointer_t = typename add_pointer<_Tp>::type;


  template<std::size_t _Len>
    struct __aligned_storage_msa
    {
      union __type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__)) { } __align;
      };
    };
# 2039 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\type_traits" 3
  template<std::size_t _Len, std::size_t _Align =
    __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    struct aligned_storage
    {
      union type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__((_Align)))) { } __align;
      };
    };

  template <typename... _Types>
    struct __strictest_alignment
    {
      static const size_t _S_alignment = 0;
      static const size_t _S_size = 0;
    };

  template <typename _Tp, typename... _Types>
    struct __strictest_alignment<_Tp, _Types...>
    {
      static const size_t _S_alignment =
        alignof(_Tp) > __strictest_alignment<_Types...>::_S_alignment
 ? alignof(_Tp) : __strictest_alignment<_Types...>::_S_alignment;
      static const size_t _S_size =
        sizeof(_Tp) > __strictest_alignment<_Types...>::_S_size
 ? sizeof(_Tp) : __strictest_alignment<_Types...>::_S_size;
    };
# 2078 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\type_traits" 3
  template <size_t _Len, typename... _Types>
    struct aligned_union
    {
    private:
      static_assert(sizeof...(_Types) != 0, "At least one type is required");

      using __strictest = __strictest_alignment<_Types...>;
      static const size_t _S_len = _Len > __strictest::_S_size
 ? _Len : __strictest::_S_size;
    public:

      static const size_t alignment_value = __strictest::_S_alignment;

      typedef typename aligned_storage<_S_len, alignment_value>::type type;
    };

  template <size_t _Len, typename... _Types>
    const size_t aligned_union<_Len, _Types...>::alignment_value;



  template<typename _Up,
    bool _IsArray = is_array<_Up>::value,
    bool _IsFunction = is_function<_Up>::value>
    struct __decay_selector;


  template<typename _Up>
    struct __decay_selector<_Up, false, false>
    { typedef typename remove_cv<_Up>::type __type; };

  template<typename _Up>
    struct __decay_selector<_Up, true, false>
    { typedef typename remove_extent<_Up>::type* __type; };

  template<typename _Up>
    struct __decay_selector<_Up, false, true>
    { typedef typename add_pointer<_Up>::type __type; };


  template<typename _Tp>
    class decay
    {
      typedef typename remove_reference<_Tp>::type __remove_type;

    public:
      typedef typename __decay_selector<__remove_type>::__type type;
    };

  template<typename _Tp>
    class reference_wrapper;


  template<typename _Tp>
    struct __strip_reference_wrapper
    {
      typedef _Tp __type;
    };

  template<typename _Tp>
    struct __strip_reference_wrapper<reference_wrapper<_Tp> >
    {
      typedef _Tp& __type;
    };

  template<typename _Tp>
    struct __decay_and_strip
    {
      typedef typename __strip_reference_wrapper<
 typename decay<_Tp>::type>::__type __type;
    };




  template<bool, typename _Tp = void>
    struct enable_if
    { };


  template<typename _Tp>
    struct enable_if<true, _Tp>
    { typedef _Tp type; };

  template<typename... _Cond>
    using _Require = typename enable_if<__and_<_Cond...>::value>::type;



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct conditional
    { typedef _Iftrue type; };


  template<typename _Iftrue, typename _Iffalse>
    struct conditional<false, _Iftrue, _Iffalse>
    { typedef _Iffalse type; };


  template<typename... _Tp>
    struct common_type;



  struct __do_common_type_impl
  {
    template<typename _Tp, typename _Up>
      static __success_type<typename decay<decltype
       (true ? std::declval<_Tp>()
        : std::declval<_Up>())>::type> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _Tp, typename _Up>
    struct __common_type_impl
    : private __do_common_type_impl
    {
      typedef decltype(_S_test<_Tp, _Up>(0)) type;
    };

  struct __do_member_type_wrapper
  {
    template<typename _Tp>
      static __success_type<typename _Tp::type> _S_test(int);

    template<typename>
      static __failure_type _S_test(...);
  };

  template<typename _Tp>
    struct __member_type_wrapper
    : private __do_member_type_wrapper
    {
      typedef decltype(_S_test<_Tp>(0)) type;
    };

  template<typename _CTp, typename... _Args>
    struct __expanded_common_type_wrapper
    {
      typedef common_type<typename _CTp::type, _Args...> type;
    };

  template<typename... _Args>
    struct __expanded_common_type_wrapper<__failure_type, _Args...>
    { typedef __failure_type type; };

  template<typename _Tp>
    struct common_type<_Tp>
    { typedef typename decay<_Tp>::type type; };

  template<typename _Tp, typename _Up>
    struct common_type<_Tp, _Up>
    : public __common_type_impl<_Tp, _Up>::type
    { };

  template<typename _Tp, typename _Up, typename... _Vp>
    struct common_type<_Tp, _Up, _Vp...>
    : public __expanded_common_type_wrapper<typename __member_type_wrapper<
               common_type<_Tp, _Up>>::type, _Vp...>::type
    { };


  template<typename _Tp>
    struct underlying_type
    {
      typedef __underlying_type(_Tp) type;
    };

  template<typename _Tp>
    struct __declval_protector
    {
      static const bool __stop = false;
      static typename add_rvalue_reference<_Tp>::type __delegate();
    };

  template<typename _Tp>
    inline typename add_rvalue_reference<_Tp>::type
    declval() noexcept
    {
      static_assert(__declval_protector<_Tp>::__stop,
      "declval() must not be used!");
      return __declval_protector<_Tp>::__delegate();
    }


  template<typename _Signature>
    class result_of;



#define __cpp_lib_result_of_sfinae 201210

  struct __invoke_memfun_ref { };
  struct __invoke_memfun_deref { };
  struct __invoke_memobj_ref { };
  struct __invoke_memobj_deref { };
  struct __invoke_other { };


  template<typename _Tp, typename _Tag>
    struct __result_of_success : __success_type<_Tp>
    { using __invoke_type = _Tag; };


  struct __result_of_memfun_ref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __result_of_success<decltype(
      (std::declval<_Tp1>().*std::declval<_Fp>())(std::declval<_Args>()...)
      ), __invoke_memfun_ref> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_ref
    : private __result_of_memfun_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memfun_deref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __result_of_success<decltype(
      ((*std::declval<_Tp1>()).*std::declval<_Fp>())(std::declval<_Args>()...)
      ), __invoke_memfun_deref> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_deref
    : private __result_of_memfun_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memobj_ref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __result_of_success<decltype(
      std::declval<_Tp1>().*std::declval<_Fp>()
      ), __invoke_memobj_ref> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_ref
    : private __result_of_memobj_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };


  struct __result_of_memobj_deref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __result_of_success<decltype(
      (*std::declval<_Tp1>()).*std::declval<_Fp>()
      ), __invoke_memobj_deref> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_deref
    : private __result_of_memobj_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj;

  template<typename _Res, typename _Class, typename _Arg>
    struct __result_of_memobj<_Res _Class::*, _Arg>
    {
      typedef typename remove_cv<typename remove_reference<
        _Arg>::type>::type _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<__or_<is_same<_Argval, _Class>,
        is_base_of<_Class, _Argval>>::value,
        __result_of_memobj_ref<_MemPtr, _Arg>,
        __result_of_memobj_deref<_MemPtr, _Arg>
      >::type::type type;
    };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun;

  template<typename _Res, typename _Class, typename _Arg, typename... _Args>
    struct __result_of_memfun<_Res _Class::*, _Arg, _Args...>
    {
      typedef typename remove_cv<typename remove_reference<
        _Arg>::type>::type _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<__or_<is_same<_Argval, _Class>,
        is_base_of<_Class, _Argval>>::value,
        __result_of_memfun_ref<_MemPtr, _Arg, _Args...>,
        __result_of_memfun_deref<_MemPtr, _Arg, _Args...>
      >::type::type type;
    };






  template<typename _Tp, typename _Up = typename decay<_Tp>::type>
    struct __inv_unwrap
    {
      using type = _Tp;
    };

  template<typename _Tp, typename _Up>
    struct __inv_unwrap<_Tp, reference_wrapper<_Up>>
    {
      using type = _Up&;
    };

  template<bool, bool, typename _Functor, typename... _ArgTypes>
    struct __result_of_impl
    {
      typedef __failure_type type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_impl<true, false, _MemPtr, _Arg>
    : public __result_of_memobj<typename decay<_MemPtr>::type,
    typename __inv_unwrap<_Arg>::type>
    { };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_impl<false, true, _MemPtr, _Arg, _Args...>
    : public __result_of_memfun<typename decay<_MemPtr>::type,
    typename __inv_unwrap<_Arg>::type, _Args...>
    { };


  struct __result_of_other_impl
  {
    template<typename _Fn, typename... _Args>
      static __result_of_success<decltype(
      std::declval<_Fn>()(std::declval<_Args>()...)
      ), __invoke_other> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _Functor, typename... _ArgTypes>
    struct __result_of_impl<false, false, _Functor, _ArgTypes...>
    : private __result_of_other_impl
    {
      typedef decltype(_S_test<_Functor, _ArgTypes...>(0)) type;
    };


  template<typename _Functor, typename... _ArgTypes>
    struct __invoke_result
    : public __result_of_impl<
        is_member_object_pointer<
          typename remove_reference<_Functor>::type
        >::value,
        is_member_function_pointer<
          typename remove_reference<_Functor>::type
        >::value,
 _Functor, _ArgTypes...
      >::type
    { };

  template<typename _Functor, typename... _ArgTypes>
    struct result_of<_Functor(_ArgTypes...)>
    : public __invoke_result<_Functor, _ArgTypes...>
    { };



  template<size_t _Len, size_t _Align =
     __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;

  template <size_t _Len, typename... _Types>
    using aligned_union_t = typename aligned_union<_Len, _Types...>::type;


  template<typename _Tp>
    using decay_t = typename decay<_Tp>::type;


  template<bool _Cond, typename _Tp = void>
    using enable_if_t = typename enable_if<_Cond, _Tp>::type;


  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    using conditional_t = typename conditional<_Cond, _Iftrue, _Iffalse>::type;


  template<typename... _Tp>
    using common_type_t = typename common_type<_Tp...>::type;


  template<typename _Tp>
    using underlying_type_t = typename underlying_type<_Tp>::type;


  template<typename _Tp>
    using result_of_t = typename result_of<_Tp>::type;


  template<typename...> using __void_t = void;
# 2507 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\type_traits" 3
  template<typename _Default, typename _AlwaysVoid,
    template<typename...> class _Op, typename... _Args>
    struct __detector
    {
      using value_t = false_type;
      using type = _Default;
    };


  template<typename _Default, template<typename...> class _Op,
     typename... _Args>
    struct __detector<_Default, __void_t<_Op<_Args...>>, _Op, _Args...>
    {
      using value_t = true_type;
      using type = _Op<_Args...>;
    };


  template<typename _Default, template<typename...> class _Op,
    typename... _Args>
    using __detected_or = __detector<_Default, void, _Op, _Args...>;


  template<typename _Default, template<typename...> class _Op,
    typename... _Args>
    using __detected_or_t
      = typename __detected_or<_Default, _Op, _Args...>::type;







#define _GLIBCXX_HAS_NESTED_TYPE(_NTYPE) template<typename _Tp, typename = __void_t<>> struct __has_ ##_NTYPE : false_type { }; template<typename _Tp> struct __has_ ##_NTYPE<_Tp, __void_t<typename _Tp::_NTYPE>> : true_type { };
# 2551 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\type_traits" 3
  template <typename _Tp>
    struct __is_swappable;

  template <typename _Tp>
    struct __is_nothrow_swappable;

  template<typename... _Elements>
    class tuple;

  template<typename>
    struct __is_tuple_like_impl : false_type
    { };

  template<typename... _Tps>
    struct __is_tuple_like_impl<tuple<_Tps...>> : true_type
    { };


  template<typename _Tp>
    struct __is_tuple_like
    : public __is_tuple_like_impl<typename remove_cv<
      typename remove_reference<_Tp>::type>::type>::type
    { };

  template<typename _Tp>
    inline
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
         is_move_constructible<_Tp>,
         is_move_assignable<_Tp>>::value>::type
    swap(_Tp&, _Tp&)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
             is_nothrow_move_assignable<_Tp>>::value);

  template<typename _Tp, size_t _Nm>
    inline
    typename enable_if<__is_swappable<_Tp>::value>::type
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    noexcept(__is_nothrow_swappable<_Tp>::value);

  namespace __swappable_details {
    using std::swap;

    struct __do_is_swappable_impl
    {
      template<typename _Tp, typename
               = decltype(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))>
        static true_type __test(int);

      template<typename>
        static false_type __test(...);
    };

    struct __do_is_nothrow_swappable_impl
    {
      template<typename _Tp>
        static __bool_constant<
          noexcept(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))
        > __test(int);

      template<typename>
        static false_type __test(...);
    };

  }

  template<typename _Tp>
    struct __is_swappable_impl
    : public __swappable_details::__do_is_swappable_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_nothrow_swappable_impl
    : public __swappable_details::__do_is_nothrow_swappable_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_swappable
    : public __is_swappable_impl<_Tp>::type
    { };

  template<typename _Tp>
    struct __is_nothrow_swappable
    : public __is_nothrow_swappable_impl<_Tp>::type
    { };
# 2756 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\type_traits" 3
  template<typename _Result, typename _Ret, typename = void>
    struct __is_invocable_impl : false_type { };

  template<typename _Result, typename _Ret>
    struct __is_invocable_impl<_Result, _Ret, __void_t<typename _Result::type>>
    : is_convertible<typename _Result::type, _Ret>::type
    { };

  template<typename _Result>
    struct __is_invocable_impl<_Result, void, __void_t<typename _Result::type>>
    : true_type
    { };

  template<typename _Fn, typename... _ArgTypes>
    struct __is_invocable
    : __is_invocable_impl<__invoke_result<_Fn, _ArgTypes...>, void>::type
    { };

  template<typename _Fn, typename _Tp, typename... _Args>
    constexpr bool __call_is_nt(__invoke_memfun_ref)
    {
      using _Up = typename __inv_unwrap<_Tp>::type;
      return noexcept((std::declval<_Up>().*std::declval<_Fn>())(
     std::declval<_Args>()...));
    }

  template<typename _Fn, typename _Tp, typename... _Args>
    constexpr bool __call_is_nt(__invoke_memfun_deref)
    {
      return noexcept(((*std::declval<_Tp>()).*std::declval<_Fn>())(
     std::declval<_Args>()...));
    }

  template<typename _Fn, typename _Tp>
    constexpr bool __call_is_nt(__invoke_memobj_ref)
    {
      using _Up = typename __inv_unwrap<_Tp>::type;
      return noexcept(std::declval<_Up>().*std::declval<_Fn>());
    }

  template<typename _Fn, typename _Tp>
    constexpr bool __call_is_nt(__invoke_memobj_deref)
    {
      return noexcept((*std::declval<_Tp>()).*std::declval<_Fn>());
    }

  template<typename _Fn, typename... _Args>
    constexpr bool __call_is_nt(__invoke_other)
    {
      return noexcept(std::declval<_Fn>()(std::declval<_Args>()...));
    }

  template<typename _Result, typename _Fn, typename... _Args>
    struct __call_is_nothrow
    : __bool_constant<
 std::__call_is_nt<_Fn, _Args...>(typename _Result::__invoke_type{})
      >
    { };

  template<typename _Fn, typename... _Args>
    using __call_is_nothrow_
      = __call_is_nothrow<__invoke_result<_Fn, _Args...>, _Fn, _Args...>;


  template<typename _Fn, typename... _Args>
    struct __is_nothrow_invocable
    : __and_<__is_invocable<_Fn, _Args...>,
             __call_is_nothrow_<_Fn, _Args...>>::type
    { };

  struct __nonesuch {
    __nonesuch() = delete;
    ~__nonesuch() = delete;
    __nonesuch(__nonesuch const&) = delete;
    void operator=(__nonesuch const&) = delete;
  };
# 3112 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\type_traits" 3

}
# 55 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 71 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\move.h" 3
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Tp&&>(__t); }







  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
    {
      static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
      " substituting _Tp is an lvalue reference type");
      return static_cast<_Tp&&>(__t);
    }






  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }


  template<typename _Tp>
    struct __move_if_noexcept_cond
    : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
                    is_copy_constructible<_Tp>>::type { };
# 115 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\move.h" 3
  template<typename _Tp>
    constexpr typename
    conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type
    move_if_noexcept(_Tp& __x) noexcept
    { return std::move(__x); }
# 135 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\move.h" 3
  template<typename _Tp>
    inline _Tp*
    addressof(_Tp& __r) noexcept
    { return std::__addressof(__r); }



  template<typename _Tp>
    const _Tp* addressof(const _Tp&&) = delete;


  template <typename _Tp, typename _Up = _Tp>
    inline _Tp
    __exchange(_Tp& __obj, _Up&& __new_val)
    {
      _Tp __old_val = std::move(__obj);
      __obj = std::forward<_Up>(__new_val);
      return __old_val;
    }



}

#define _GLIBCXX_MOVE(__val) std::move(__val)
#define _GLIBCXX_FORWARD(_Tp,__val) std::forward<_Tp>(__val)





namespace std __attribute__ ((__visibility__ ("default")))
{

# 181 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\move.h" 3
  template<typename _Tp>
    inline

    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
         is_move_constructible<_Tp>,
         is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
             is_nothrow_move_assignable<_Tp>>::value)




    {

     

      _Tp __tmp = std::move(__a);
      __a = std::move(__b);
      __b = std::move(__tmp);
    }




  template<typename _Tp, size_t _Nm>
    inline

    typename enable_if<__is_swappable<_Tp>::value>::type
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    noexcept(__is_nothrow_swappable<_Tp>::value)




    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 swap(__a[__n], __b[__n]);
    }



}
# 41 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\bits\\nested_exception.h" 2 3

extern "C++" {

namespace std
{






  class nested_exception
  {
    exception_ptr _M_ptr;

  public:
    nested_exception() noexcept : _M_ptr(current_exception()) { }

    nested_exception(const nested_exception&) noexcept = default;

    nested_exception& operator=(const nested_exception&) noexcept = default;

    virtual ~nested_exception() noexcept;

    [[noreturn]]
    void
    rethrow_nested() const
    {
      if (_M_ptr)
 rethrow_exception(_M_ptr);
      std::terminate();
    }

    exception_ptr
    nested_ptr() const noexcept
    { return _M_ptr; }
  };

  template<typename _Except>
    struct _Nested_exception : public _Except, public nested_exception
    {
      explicit _Nested_exception(const _Except& __ex)
      : _Except(__ex)
      { }

      explicit _Nested_exception(_Except&& __ex)
      : _Except(static_cast<_Except&&>(__ex))
      { }
    };




  template<typename _Tp>
    inline void
    __throw_with_nested_impl(_Tp&& __t, true_type)
    {
      using _Up = typename remove_reference<_Tp>::type;
      throw _Nested_exception<_Up>{std::forward<_Tp>(__t)};
    }

  template<typename _Tp>
    inline void
    __throw_with_nested_impl(_Tp&& __t, false_type)
    { throw std::forward<_Tp>(__t); }



  template<typename _Tp>
    [[noreturn]]
    inline void
    throw_with_nested(_Tp&& __t)
    {
      using _Up = typename decay<_Tp>::type;
      using _CopyConstructible
 = __and_<is_copy_constructible<_Up>, is_move_constructible<_Up>>;
      static_assert(_CopyConstructible::value,
   "throw_with_nested argument must be CopyConstructible");
      using __nest = __and_<is_class<_Up>, __bool_constant<!__is_final(_Up)>,
       __not_<is_base_of<nested_exception, _Up>>>;
      std::__throw_with_nested_impl(std::forward<_Tp>(__t), __nest{});
    }


  template<typename _Tp>
    using __rethrow_if_nested_cond = typename enable_if<
      __and_<is_polymorphic<_Tp>,
      __or_<__not_<is_base_of<nested_exception, _Tp>>,
     is_convertible<_Tp*, nested_exception*>>>::value
    >::type;


  template<typename _Ex>
    inline __rethrow_if_nested_cond<_Ex>
    __rethrow_if_nested_impl(const _Ex* __ptr)
    {
      if (auto __ne_ptr = dynamic_cast<const nested_exception*>(__ptr))
 __ne_ptr->rethrow_nested();
    }


  inline void
  __rethrow_if_nested_impl(const void*)
  { }


  template<typename _Ex>
    inline void
    rethrow_if_nested(const _Ex& __ex)
    { std::__rethrow_if_nested_impl(std::__addressof(__ex)); }


}

}



#pragma GCC visibility pop
# 144 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\exception" 2 3
# 41 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\new" 2 3

#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }



    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };


  class bad_array_new_length : public bad_alloc
  {
  public:
    bad_array_new_length() throw() { };



    virtual ~bad_array_new_length() throw();


    virtual const char* what() const throw();
  };






  struct nothrow_t
  {

    explicit nothrow_t() = default;

  };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();



  new_handler get_new_handler() noexcept;

}
# 120 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\new" 3
void* operator new(std::size_t)
  __attribute__((__externally_visible__));
void* operator new[](std::size_t)
  __attribute__((__externally_visible__));
void operator delete(void*) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*) noexcept
  __attribute__((__externally_visible__));

void operator delete(void*, std::size_t) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*, std::size_t) noexcept
  __attribute__((__externally_visible__));

void* operator new(std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void* operator new[](std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void operator delete(void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
# 168 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\new" 3
inline void* operator new(std::size_t, void* __p) noexcept
{ return __p; }
inline void* operator new[](std::size_t, void* __p) noexcept
{ return __p; }


inline void operator delete (void*, void*) noexcept { }
inline void operator delete[](void*, void*) noexcept { }

}
# 216 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\new" 3
#pragma GCC visibility pop
# 13 "D:/Pool/eclipse-workspace_aarch64/newspace/raspiOS/src/arch/qemu_virt/main_run_process.cpp" 2
# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/exception/svc_call.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/exception/svc_call.h"
#define INCLUDE_EXCEPTION_SVC_CALL_H_ 
# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/exception/exceptions.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/exception/exceptions.h"
#define INCLUDE_ARCH_COMMON_AARCH64_EXCEPTIONS_H_ 



# 12 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/exception/exceptions.h"
enum ExceptionClass{
 UNDEF_INST=0b000000,
 INSTR_ABORT_LOWER_EL = 0b100000,
 INSTR_ABORT_SAME_EL = 0b100001,
 PC_ALIGNMENT_FAULT = 0b100010,
 DATA_ABORT_LOWER_EL = 0b100100,
 DATA_ABORT_SAME_EL = 0b100101,
 SP_ALIGNMENT_FAULT = 0b100110,
 SERROR_INTERRUPT = 0b101111,
 SVC_AA64=0b010101,
 HVC_AA64 = 0b010110,
 SMC_AA64 = 0b010111,
};
# 11 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/exception/svc_call.h" 2







enum SvcFunc{ puts, allocateBlock,killProcess};



template <SvcFunc func>
__attribute__((always_inline)) inline uint64_t svc_call();
template <SvcFunc func>
__attribute__((always_inline)) inline uint64_t svc_call(uint64_t arg0);
template <SvcFunc func>
__attribute__((always_inline)) inline uint64_t svc_call(uint64_t arg0,uint64_t arg1);
template <SvcFunc func>
__attribute__((always_inline)) inline uint64_t svc_call(uint64_t arg0,uint64_t arg1,uint64_t arg2);
template <SvcFunc func>
__attribute__((always_inline)) inline uint64_t svc_call(uint64_t arg0,uint64_t arg1,uint64_t arg2,uint64_t arg3);



template <SvcFunc func>
uint64_t svc_call()
{
 uint64_t res=0;
 L__LINE__:;
 __asm__ __volatile__(
      "svc %1 \n\t"
      "str x0,%0 \n\t"
      :"=m"(res):"i"(func):"x0");
 return res;
}
template <SvcFunc func>
uint64_t svc_call(uint64_t arg0)
{
 uint64_t res=0;
 L__LINE__:;
 __asm__ __volatile__("mov x0, %2 \n\t"
      "svc %1 \n\t"
      "str x0,%0 \n\t"
      :"=m"(res):"i"(func),"r"(arg0):"x0");
 return res;
}
template <SvcFunc func>
uint64_t svc_call(uint64_t arg0,uint64_t arg1)
{
 uint64_t res=0;
 L__LINE__:;
 __asm__ __volatile__("mov x0, %2 \n\t"
      "mov  x1, %3  \n\t"
      "svc %1 \n\t"
      "str x0,%0 \n\t"
      :"=m"(res):"i"(func),"r"(arg0),"r"(arg1):"x0","x1");
 return res;
}
template <SvcFunc func>
uint64_t svc_call(uint64_t arg0,uint64_t arg1,uint64_t arg2)
{
 uint64_t res=0;
 L__LINE__:;
 __asm__ __volatile__("mov x0, %2 \n\t"
      "mov  x1, %3  \n\t"
      "mov  x2, %4 \n\t"
      "svc %1 \n\t"
      "str x0,%0 \n\t"
      :"=m"(res):"i"(func),"r"(arg0),"r"(arg1),"r"(arg2):"x0","x1","x2");
 return res;
}
template <SvcFunc func>
uint64_t svc_call(uint64_t arg0,uint64_t arg1,uint64_t arg2,uint64_t arg3)
{
 uint64_t res=0;
 L__LINE__:;
 __asm__ __volatile__("mov x0, %2 \n\t"
      "mov  x1, %3  \n\t"
      "mov  x2, %4 \n\t"
      "mov  x3, %5  \n\t"
      "svc %1 \n\t"
      "str x0,%0 \n\t"
      :"=m"(res):"i"(func),"r"(arg0),"r"(arg1),"r"(arg2),"r"(arg3):"x0","x1","x2","x3");
 return res;
}
# 14 "D:/Pool/eclipse-workspace_aarch64/newspace/raspiOS/src/arch/qemu_virt/main_run_process.cpp" 2


int enableMMU();
int main();

int main()
{
 if(enableMMU()!=0)
  return 1;
 auto tcr = RegTCR_EL1::read();
 auto ttbr1Mask = upperMaskBits(tcr.T1SZ);


 __asm__ __volatile__(
   "mov x0,sp \n\t"
   "orr x0,x0,%0 \n\t"
   "mov sp,x0 \n\t"
   "orr x29,x29, %0 \n\t"::"r"(ttbr1Mask):"sp","x0");


 extern char mainStart[];
 RegPC pc;
 pc.PC = reinterpret_cast<uint64_t>(mainStart) | ttbr1Mask;
 pc.write();
 __asm__sym__mainStart: __asm__ __volatile__("mainStart" ":\n\t");


 extern char ramStart[];
 extern char ramEnd[];
 size_t ramSize = static_cast<size_t>(ramEnd - ramStart);
 new (&mman) MemoryManager( reinterpret_cast<void*>(reinterpret_cast<uint64_t>(ramStart)|ttbr1Mask), ramSize,true );


 new (&pidManager) PidManager();


 Process *process = mman.allocateAs<Process*>(sizeof(Process));
 if(process==nullptr)
 {
  kout << "cannot allocate space for process\n";
  return 1;
 }
 int initState = process->init(
   64 - tcr.T0SZ,
   nullptr,
   10,
   20480,
   Process::PAGE_SIZE * Process::HEAP_L3_ENTRY_NUM,
   Process::PAGE_SIZE * Process::STACK_L3_ENTRY_NUM
   );
 if(initState!=0)
 {
  kout << "init process failed\n";
  return 1;
 }


 void* codePtr = process->getCodeBase();
 const void *userSpaceStart = reinterpret_cast<const void*>(524288 | ttbr1Mask);
 std::memcpy(codePtr, userSpaceStart, 20480);

 kout << "====code is \n";
 kout.print(reinterpret_cast<const char*>(codePtr),200);
 kout << "\n";


 process->getSpEL0().write();
 process->getTTBR0().write();
 process->getELR().write();
 process->getSPSR().write();
 asm_eret();
 return 0;
}

int enableMMU()
{

 extern RegDescriptor4KBL0 L0Table[];
 extern RegDescriptor4KBL1 L1Table[];

 auto curEl = RegCurrentEL::read();
 if(curEl.EL != 1)
 {
  kout << "[FATAL] " << " Not at EL1 \n";
  return 1;
 }

 RegSPSel spsel{0};
 spsel.SP = 1;
 spsel.write();




 extern char ExceptionVectorEL1[];
 RegVBAR_EL1 vbar;
 vbar.Addr = reinterpret_cast<uint64_t>(ExceptionVectorEL1);
 vbar.write();


 auto aa64 = RegID_AA64MMFR0_EL1::read();
 aa64.dump();
 if(aa64.TGran4 != 0b0000)
 {
  kout << "[FATAL] " << "4KB granule is not supported\n";
  return 1;
 }

 int paBitsMap[]= {32, 36, 40, 42, 44, 48, 52};
 int indexBitsMap[]={2, 6, 1, 3, 5, 9, 0x7fffffff};

 int initLevelMap[]={1, 1, 0, 0, 0, 0, 0x7fffffff};

 if(aa64.PARange >= (sizeof(paBitsMap)/sizeof(paBitsMap[0])))
 {
  kout << "[FATAL] " << "PARange not supported\n";
  return 1;
 }
 int effPARange = aa64.PARange;
 if(paBitsMap[effPARange] == 52 )
 {
  kout << "[INFO] " << "PARange is 52, we need to reduce it to 48\n";
  --effPARange;
 }

 if(initLevelMap[effPARange] != 0)
 {
  kout << "[FATAL] " << "Initial level not at 0,which this program designed for specifically.";
  return 1;
 }


 auto tcr = RegTCR_EL1::read();

 tcr.TBI0 = tcr.TBI1 = 0;

 tcr.IPS = effPARange & 0b0111;

 tcr.T0SZ = tcr.T1SZ = 64 - paBitsMap[effPARange];
 tcr.A1 = 0;
 tcr.TG0 = 0b00;
 tcr.TG1 = 0b10;
 tcr.SH0 = tcr.SH1 = 0b10;
 tcr.IRGN0 = tcr.IRGN1 = 0b01;
 tcr.ORGN0 = tcr.ORGN1 =0b01;
 tcr.EPD0 = tcr.EPD1 = 0;

 tcr.write();
# 170 "D:/Pool/eclipse-workspace_aarch64/newspace/raspiOS/src/arch/qemu_virt/main_run_process.cpp"
 RegMAIR_EL1 mair{0};
 mair.Attr0 = 0x00;
 mair.Attr1 = 0xff;
 mair.Attr3 = 0x44;

 mair.write();
# 186 "D:/Pool/eclipse-workspace_aarch64/newspace/raspiOS/src/arch/qemu_virt/main_run_process.cpp"
 extern char mainEnd[];
 if( (reinterpret_cast<size_t>(mainEnd) >> 30) >= 1)
 {
  kout << "[FATAL] " << "end of main overflows, meaning that it may not be flatten mapped.\n";
  return 1;
 }







 RegDescriptor4KBL0 & descrL0 = L0Table[0];
 descrL0.IsTable = 1;
 descrL0.Valid = 1;
 descrL0.RES0 = 0;
 descrL0.NSTable = 0;
 descrL0.NextLevelTableAddr = ( reinterpret_cast<uint64_t>(L1Table) & upperMaskBits(64-12)) >> 12;
 descrL0.APTable = 0b00;
 descrL0.PXNTable = 0;
 descrL0.XNTable = 0 ;
 descrL0.Ignored_0=0;
 descrL0.Ignored_1=0;
# 225 "D:/Pool/eclipse-workspace_aarch64/newspace/raspiOS/src/arch/qemu_virt/main_run_process.cpp"
 RegDescriptor4KBL1 & descrL1= L1Table[0];
 descrL1.S0.IsTable=0;
 descrL1.S0.NS=1;
 descrL1.S0.OutputAddr = (0 >> 30);
 descrL1.S0.AF = 1;
 descrL1.S0.AttrIndex = 1;
 descrL1.S0.Valid = 1;
 descrL1.S0.PXN = 0;
 descrL1.S0.UXN = 0;
 descrL1.S0.Contiguous = 1;
 descrL1.S0.nG = 0;


 descrL1.S0.AP = 0b00;
 descrL1.S0.NS = 1;
 descrL1.S0.SH = 0b10;
 descrL1.S0.Ignored = 0;
 descrL1.S0.RES0_0=0;
 descrL1.S0.RES0_1=0;
 descrL1.S0.Reserved=0;


 L1Table[1] = L1Table[0];
 L1Table[1].S0.AP = 0b00;
 L1Table[1].S0.OutputAddr = (0x40000000 >> 30);


 RegTTBR0_EL1 ttbr0 {0};



 int extraBits = 9 - indexBitsMap[effPARange];
 (void)extraBits;




 ttbr0.BADDR = reinterpret_cast<uint64_t>(L0Table)>>1;
 ttbr0.ASID = 0;
 ttbr0.CnP = 0;




 RegTTBR1_EL1 ttbr1 {0};
 ttbr1.BADDR = ttbr0.BADDR;
 ttbr1.ASID = 0;
 ttbr1.CnP = 0;

 ttbr0.write();
 ttbr1.write();
 asm_isb();



 kout << "L0Table = " << Hex(reinterpret_cast<uint64_t>(L0Table)) << "\n";
 kout << "L1Table = " << Hex(reinterpret_cast<uint64_t>(L1Table)) << "\n";
 ttbr0.updateRead();
 ttbr0.dump();
 ttbr1.updateRead();
 ttbr1.dump();

 tcr.updateRead();
 tcr.dump();

 L0Table[0].dump();
 L1Table[0].dump();
 RegSCTLR_EL1::read().dump();


 if(RegID_AA64MMFR1_EL1::read().PAN == 0)
 {
  kout << "[INFO] " << "PAN not supported\n";
 }else{

  RegPAN::read().dump();
 }
# 315 "D:/Pool/eclipse-workspace_aarch64/newspace/raspiOS/src/arch/qemu_virt/main_run_process.cpp"
 auto sctl = RegSCTLR_EL1::read();
 sctl.EE = 0;
 sctl.E0E = 0;
 sctl.WXN = 0;
 sctl.I = 1;
 sctl.SA = 0;
 sctl.SA0 = 0;
 sctl.C = 1;
 sctl.A = 0;
 sctl.M = 1;
 sctl.write();

 asm_isb();
 sctl.updateRead();
 sctl.dump();

 kout << "[INFO] " << "Successfully set TTBR0\n";

 vbar.Addr |= upperMaskBits(tcr.T1SZ);
 vbar.write();


 RegPC pc{0};
 extern char afterMMUSet[];
 kout << "[INFO] " << "afterMMUSet = ";
 kout << Hex(reinterpret_cast<uint64_t>(afterMMUSet))<<"\n";
 kout << "[INFO] " << "mainEnd = " ;
 kout << Hex(reinterpret_cast<uint64_t>(mainEnd))<<"\n";


 pc.PC = reinterpret_cast<uint64_t>(afterMMUSet) | upperMaskBits(tcr.T1SZ);
 pc.write();


 __asm__ __volatile__(
   "mov x0,sp \n\t"
   "orr x0,x0,%0 \n\t"
   "mov sp,x0 \n\t"
   "orr x29,x29, %0 \n\t"::"r"(upperMaskBits(tcr.T1SZ)):"sp","x0");


 __asm__sym__afterMMUSet: __asm__ __volatile__("afterMMUSet" ":\n\t");
 kout << "[INFO] " << "Successfully enabled MMU\n";
 kout << "[INFO] " << "end enableMMU.\n";


 __asm__sym__mainEnd: __asm__ __volatile__("mainEnd" ":\n\t");

 return 0;
}
